
Fatfs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08015338  08015338  00025338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d38  08015d38  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08015d38  08015d38  00025d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d40  08015d40  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d40  08015d40  00025d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d44  08015d44  00025d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08015d48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047c8  200001e0  08015f28  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00002000  200049a8  08015f28  000349a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a43d  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005516  00000000  00000000  0005a64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b28  00000000  00000000  0005fb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e0  00000000  00000000  00061690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029504  00000000  00000000  00062f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c5c9  00000000  00000000  0008c474  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db310  00000000  00000000  000a8a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f8  00000000  00000000  00183dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015320 	.word	0x08015320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08015320 	.word	0x08015320

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_CRC_Init+0x20>)
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <MX_CRC_Init+0x24>)
 8000f90:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_CRC_Init+0x20>)
 8000f94:	f001 fbe5 	bl	8002762 <HAL_CRC_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f9e:	f000 fdfd 	bl	8001b9c <Error_Handler>
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20004214 	.word	0x20004214
 8000fac:	40023000 	.word	0x40023000

08000fb0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_CRC_MspInit+0x3c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10d      	bne.n	8000fde <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <HAL_CRC_MspInit+0x40>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40023000 	.word	0x40023000
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_DMA_Init+0x5c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <MX_DMA_Init+0x5c>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_DMA_Init+0x5c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 8, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2108      	movs	r1, #8
 800101a:	203a      	movs	r0, #58	; 0x3a
 800101c:	f001 fb73 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001020:	203a      	movs	r0, #58	; 0x3a
 8001022:	f001 fb8c 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2106      	movs	r1, #6
 800102a:	203b      	movs	r0, #59	; 0x3b
 800102c:	f001 fb6b 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001030:	203b      	movs	r0, #59	; 0x3b
 8001032:	f001 fb84 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2106      	movs	r1, #6
 800103a:	2045      	movs	r0, #69	; 0x45
 800103c:	f001 fb63 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001040:	2045      	movs	r0, #69	; 0x45
 8001042:	f001 fb7c 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <f_list>:
#include "ffex.h"
#include <stdio.h>
#include <string.h>

FRESULT f_list(const TCHAR *path)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800105a:	af00      	add	r7, sp, #0
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	6018      	str	r0, [r3, #0]
  FRESULT res = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  FILINFO fno = {0};
 8001066:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800106a:	4618      	mov	r0, r3
 800106c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001070:	461a      	mov	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f00f ff4f 	bl	8010f16 <memset>
  DIR dir = {0};
 8001078:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800107c:	4618      	mov	r0, r3
 800107e:	2350      	movs	r3, #80	; 0x50
 8001080:	461a      	mov	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f00f ff47 	bl	8010f16 <memset>
  TCHAR file[_MAX_LFN + 2] = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4618      	mov	r0, r3
 800108e:	f240 1301 	movw	r3, #257	; 0x101
 8001092:	461a      	mov	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	f00f ff3e 	bl	8010f16 <memset>
  res += f_opendir(&dir, path);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	4610      	mov	r0, r2
 80010a4:	f00a ffda 	bl	800c05c <f_opendir>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80010b0:	4413      	add	r3, r2
 80010b2:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  if(res == FR_OK)
 80010b6:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d14a      	bne.n	8001154 <f_list+0x100>
  {
    while(FR_OK == f_readdir(&dir, &fno))
 80010be:	e030      	b.n	8001122 <f_list+0xce>
    {
      if(0 == strlen(fno.fname)) break;
 80010c0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80010c4:	331a      	adds	r3, #26
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d036      	beq.n	800113a <f_list+0xe6>
      memset(file, 0, sizeof(file));
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	f240 1201 	movw	r2, #257	; 0x101
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f00f ff1d 	bl	8010f16 <memset>
      sprintf((char *)file, "%s/%s", path, fno.fname);
 80010dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80010e0:	331a      	adds	r3, #26
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	f107 000c 	add.w	r0, r7, #12
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	491e      	ldr	r1, [pc, #120]	; (8001164 <f_list+0x110>)
 80010ec:	f010 fd78 	bl	8011be0 <siprintf>
      printf("%s\r\n", file);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <f_list+0x114>)
 80010f8:	f010 fd54 	bl	8011ba4 <iprintf>
      if (fno.fattrib & AM_DIR)
 80010fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001100:	7b1b      	ldrb	r3, [r3, #12]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <f_list+0xce>
      {
        res += f_list(file);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffa0 	bl	8001054 <f_list>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800111c:	4413      	add	r3, r2
 800111e:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
    while(FR_OK == f_readdir(&dir, &fno))
 8001122:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001126:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f00b f8af 	bl	800c290 <f_readdir>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0c3      	beq.n	80010c0 <f_list+0x6c>
 8001138:	e000      	b.n	800113c <f_list+0xe8>
      if(0 == strlen(fno.fname)) break;
 800113a:	bf00      	nop
      }
    }
    res += f_closedir(&dir);
 800113c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001140:	4618      	mov	r0, r3
 8001142:	f00b f87a 	bl	800c23a <f_closedir>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 800114e:	4413      	add	r3, r2
 8001150:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  }
  return res;
 8001154:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
}
 8001158:	4618      	mov	r0, r3
 800115a:	f507 7722 	add.w	r7, r7, #648	; 0x288
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	08015338 	.word	0x08015338
 8001168:	08015340 	.word	0x08015340

0800116c <f_deldir>:

FRESULT f_deldir(const TCHAR *path)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8001172:	af00      	add	r7, sp, #0
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	6018      	str	r0, [r3, #0]
  FRESULT res = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  FILINFO fno = {0};
 800117e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001182:	4618      	mov	r0, r3
 8001184:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001188:	461a      	mov	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f00f fec3 	bl	8010f16 <memset>
  DIR dir = {0};
 8001190:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001194:	4618      	mov	r0, r3
 8001196:	2350      	movs	r3, #80	; 0x50
 8001198:	461a      	mov	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f00f febb 	bl	8010f16 <memset>
  TCHAR file[_MAX_LFN + 2] = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4618      	mov	r0, r3
 80011a6:	f240 1301 	movw	r3, #257	; 0x101
 80011aa:	461a      	mov	r2, r3
 80011ac:	2100      	movs	r1, #0
 80011ae:	f00f feb2 	bl	8010f16 <memset>
  res += f_opendir(&dir, path);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011b8:	6819      	ldr	r1, [r3, #0]
 80011ba:	4610      	mov	r0, r2
 80011bc:	f00a ff4e 	bl	800c05c <f_opendir>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80011c8:	4413      	add	r3, r2
 80011ca:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  if(FR_OK == res)
 80011ce:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d150      	bne.n	8001278 <f_deldir+0x10c>
  {
    while(FR_OK == f_readdir(&dir, &fno))
 80011d6:	e037      	b.n	8001248 <f_deldir+0xdc>
    {
      if(0 == strlen(fno.fname)) break;
 80011d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80011dc:	331a      	adds	r3, #26
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d03d      	beq.n	8001260 <f_deldir+0xf4>
      memset(file, 0, sizeof(file));
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	f240 1201 	movw	r2, #257	; 0x101
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00f fe91 	bl	8010f16 <memset>
      sprintf((char*)file, "%s/%s", path, fno.fname);
 80011f4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80011f8:	331a      	adds	r3, #26
 80011fa:	1d3a      	adds	r2, r7, #4
 80011fc:	f107 000c 	add.w	r0, r7, #12
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	4921      	ldr	r1, [pc, #132]	; (8001288 <f_deldir+0x11c>)
 8001204:	f010 fcec 	bl	8011be0 <siprintf>
      if (fno.fattrib & AM_DIR)
 8001208:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800120c:	7b1b      	ldrb	r3, [r3, #12]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00c      	beq.n	8001230 <f_deldir+0xc4>
      {
        res += f_deldir(file);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffa6 	bl	800116c <f_deldir>
 8001220:	4603      	mov	r3, r0
 8001222:	461a      	mov	r2, r3
 8001224:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8001228:	4413      	add	r3, r2
 800122a:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
 800122e:	e00b      	b.n	8001248 <f_deldir+0xdc>
      }
      else
      {
        res += f_unlink(file);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4618      	mov	r0, r3
 8001236:	f00b f9eb 	bl	800c610 <f_unlink>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8001242:	4413      	add	r3, r2
 8001244:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
    while(FR_OK == f_readdir(&dir, &fno))
 8001248:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800124c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f00b f81c 	bl	800c290 <f_readdir>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0bc      	beq.n	80011d8 <f_deldir+0x6c>
 800125e:	e000      	b.n	8001262 <f_deldir+0xf6>
      if(0 == strlen(fno.fname)) break;
 8001260:	bf00      	nop
      }
    }
    res += f_unlink(path);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	f00b f9d3 	bl	800c610 <f_unlink>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
 8001272:	4413      	add	r3, r2
 8001274:	f887 3287 	strb.w	r3, [r7, #647]	; 0x287
  }
  return res;
 8001278:	f897 3287 	ldrb.w	r3, [r7, #647]	; 0x287
}
 800127c:	4618      	mov	r0, r3
 800127e:	f507 7722 	add.w	r7, r7, #648	; 0x288
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08015338 	.word	0x08015338

0800128c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800129c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <vApplicationGetIdleTaskMemory+0x30>)
 80012a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200001fc 	.word	0x200001fc
 80012bc:	20000250 	.word	0x20000250

080012c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_FREERTOS_Init+0x30>)
 80012c8:	1d3c      	adds	r4, r7, #4
 80012ca:	461d      	mov	r5, r3
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f00c ffdc 	bl	800e29a <osThreadCreate>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <MX_FREERTOS_Init+0x34>)
 80012e6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdb0      	pop	{r4, r5, r7, pc}
 80012f0:	08015354 	.word	0x08015354
 80012f4:	2000421c 	.word	0x2000421c

080012f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80012fe:	af02      	add	r7, sp, #8
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  HAL_UART_Receive_DMA(&huart1, RxBuf, sizeof(RxBuf));
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	49ce      	ldr	r1, [pc, #824]	; (8001640 <StartDefaultTask+0x348>)
 8001308:	48ce      	ldr	r0, [pc, #824]	; (8001644 <StartDefaultTask+0x34c>)
 800130a:	f004 faff 	bl	800590c <HAL_UART_Receive_DMA>
  uint8_t str[] = "Hello World!";
 800130e:	4bce      	ldr	r3, [pc, #824]	; (8001648 <StartDefaultTask+0x350>)
 8001310:	f507 740c 	add.w	r4, r7, #560	; 0x230
 8001314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001316:	c407      	stmia	r4!, {r0, r1, r2}
 8001318:	7023      	strb	r3, [r4, #0]
  uint8_t file[32] = {0};
 800131a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800131e:	2220      	movs	r2, #32
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f00f fdf7 	bl	8010f16 <memset>
  UINT wbyte = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  BYTE work[_MAX_SS] = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4618      	mov	r0, r3
 8001334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001338:	461a      	mov	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	f00f fdeb 	bl	8010f16 <memset>
  FRESULT res = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
  strcat(strcat((char *)file, (char *)SDPath), "1.txt");
 8001346:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800134a:	49c0      	ldr	r1, [pc, #768]	; (800164c <StartDefaultTask+0x354>)
 800134c:	4618      	mov	r0, r3
 800134e:	f010 fc67 	bl	8011c20 <strcat>
 8001352:	4604      	mov	r4, r0
 8001354:	4620      	mov	r0, r4
 8001356:	f7fe ff3b 	bl	80001d0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	4423      	add	r3, r4
 800135e:	4abc      	ldr	r2, [pc, #752]	; (8001650 <StartDefaultTask+0x358>)
 8001360:	6810      	ldr	r0, [r2, #0]
 8001362:	6018      	str	r0, [r3, #0]
 8001364:	8892      	ldrh	r2, [r2, #4]
 8001366:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
    switch(flag)
 8001368:	4bba      	ldr	r3, [pc, #744]	; (8001654 <StartDefaultTask+0x35c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	2b08      	cmp	r3, #8
 8001370:	f200 81da 	bhi.w	8001728 <StartDefaultTask+0x430>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <StartDefaultTask+0x84>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	080013a1 	.word	0x080013a1
 8001380:	080013e1 	.word	0x080013e1
 8001384:	08001487 	.word	0x08001487
 8001388:	08001525 	.word	0x08001525
 800138c:	0800152d 	.word	0x0800152d
 8001390:	08001595 	.word	0x08001595
 8001394:	080015d9 	.word	0x080015d9
 8001398:	0800168d 	.word	0x0800168d
 800139c:	080016d1 	.word	0x080016d1
    {
      case MOUNT:
      {
        flag = IDLE;
 80013a0:	4bac      	ldr	r3, [pc, #688]	; (8001654 <StartDefaultTask+0x35c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 80013a6:	2201      	movs	r2, #1
 80013a8:	49a8      	ldr	r1, [pc, #672]	; (800164c <StartDefaultTask+0x354>)
 80013aa:	48ab      	ldr	r0, [pc, #684]	; (8001658 <StartDefaultTask+0x360>)
 80013ac:	f009 feee 	bl	800b18c <f_mount>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80013b6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80013ba:	4619      	mov	r1, r3
 80013bc:	48a7      	ldr	r0, [pc, #668]	; (800165c <StartDefaultTask+0x364>)
 80013be:	f010 fbf1 	bl	8011ba4 <iprintf>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 80013c2:	2201      	movs	r2, #1
 80013c4:	49a1      	ldr	r1, [pc, #644]	; (800164c <StartDefaultTask+0x354>)
 80013c6:	2000      	movs	r0, #0
 80013c8:	f009 fee0 	bl	800b18c <f_mount>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80013d2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80013d6:	4619      	mov	r1, r3
 80013d8:	48a1      	ldr	r0, [pc, #644]	; (8001660 <StartDefaultTask+0x368>)
 80013da:	f010 fbe3 	bl	8011ba4 <iprintf>
        break;
 80013de:	e1a4      	b.n	800172a <StartDefaultTask+0x432>
      }
      case WRITE:
      {
        flag = IDLE;
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <StartDefaultTask+0x35c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 80013e6:	2201      	movs	r2, #1
 80013e8:	4998      	ldr	r1, [pc, #608]	; (800164c <StartDefaultTask+0x354>)
 80013ea:	489b      	ldr	r0, [pc, #620]	; (8001658 <StartDefaultTask+0x360>)
 80013ec:	f009 fece 	bl	800b18c <f_mount>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80013f6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80013fa:	4619      	mov	r1, r3
 80013fc:	4897      	ldr	r0, [pc, #604]	; (800165c <StartDefaultTask+0x364>)
 80013fe:	f010 fbd1 	bl	8011ba4 <iprintf>
        res = f_open(&SDFile, (char *)file, FA_OPEN_ALWAYS | FA_WRITE); printf("open:%d\r\n", res);
 8001402:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001406:	2212      	movs	r2, #18
 8001408:	4619      	mov	r1, r3
 800140a:	4896      	ldr	r0, [pc, #600]	; (8001664 <StartDefaultTask+0x36c>)
 800140c:	f009 ff22 	bl	800b254 <f_open>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001416:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800141a:	4619      	mov	r1, r3
 800141c:	4892      	ldr	r0, [pc, #584]	; (8001668 <StartDefaultTask+0x370>)
 800141e:	f010 fbc1 	bl	8011ba4 <iprintf>
        res = f_write(&SDFile, str, sizeof(str), &wbyte); printf("write:%d\r\n", res);
 8001422:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001426:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800142a:	220d      	movs	r2, #13
 800142c:	488d      	ldr	r0, [pc, #564]	; (8001664 <StartDefaultTask+0x36c>)
 800142e:	f00a fa91 	bl	800b954 <f_write>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001438:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800143c:	4619      	mov	r1, r3
 800143e:	488b      	ldr	r0, [pc, #556]	; (800166c <StartDefaultTask+0x374>)
 8001440:	f010 fbb0 	bl	8011ba4 <iprintf>
        res = f_close(&SDFile); printf("close:%d\r\n", res);
 8001444:	4887      	ldr	r0, [pc, #540]	; (8001664 <StartDefaultTask+0x36c>)
 8001446:	f00a fdda 	bl	800bffe <f_close>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001450:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8001454:	4619      	mov	r1, r3
 8001456:	4886      	ldr	r0, [pc, #536]	; (8001670 <StartDefaultTask+0x378>)
 8001458:	f010 fba4 	bl	8011ba4 <iprintf>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 800145c:	2201      	movs	r2, #1
 800145e:	497b      	ldr	r1, [pc, #492]	; (800164c <StartDefaultTask+0x354>)
 8001460:	2000      	movs	r0, #0
 8001462:	f009 fe93 	bl	800b18c <f_mount>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800146c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8001470:	4619      	mov	r1, r3
 8001472:	487b      	ldr	r0, [pc, #492]	; (8001660 <StartDefaultTask+0x368>)
 8001474:	f010 fb96 	bl	8011ba4 <iprintf>
        printf("[%s]\r\n", file);
 8001478:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800147c:	4619      	mov	r1, r3
 800147e:	487d      	ldr	r0, [pc, #500]	; (8001674 <StartDefaultTask+0x37c>)
 8001480:	f010 fb90 	bl	8011ba4 <iprintf>
        break;
 8001484:	e151      	b.n	800172a <StartDefaultTask+0x432>
      }
      case PRINTF:
      {
        flag = IDLE;
 8001486:	4b73      	ldr	r3, [pc, #460]	; (8001654 <StartDefaultTask+0x35c>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 800148c:	2201      	movs	r2, #1
 800148e:	496f      	ldr	r1, [pc, #444]	; (800164c <StartDefaultTask+0x354>)
 8001490:	4871      	ldr	r0, [pc, #452]	; (8001658 <StartDefaultTask+0x360>)
 8001492:	f009 fe7b 	bl	800b18c <f_mount>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800149c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80014a0:	4619      	mov	r1, r3
 80014a2:	486e      	ldr	r0, [pc, #440]	; (800165c <StartDefaultTask+0x364>)
 80014a4:	f010 fb7e 	bl	8011ba4 <iprintf>
        res = f_open(&SDFile, (char *)file, FA_OPEN_ALWAYS | FA_WRITE); printf("open:%d\r\n", res);
 80014a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80014ac:	2212      	movs	r2, #18
 80014ae:	4619      	mov	r1, r3
 80014b0:	486c      	ldr	r0, [pc, #432]	; (8001664 <StartDefaultTask+0x36c>)
 80014b2:	f009 fecf 	bl	800b254 <f_open>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80014bc:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80014c0:	4619      	mov	r1, r3
 80014c2:	4869      	ldr	r0, [pc, #420]	; (8001668 <StartDefaultTask+0x370>)
 80014c4:	f010 fb6e 	bl	8011ba4 <iprintf>
        res = f_printf(&SDFile, "20%d:%d:%d.%s", 20, 11, 23, "Monday"); printf("printf:%d\r\n", res);
 80014c8:	4b6b      	ldr	r3, [pc, #428]	; (8001678 <StartDefaultTask+0x380>)
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	2317      	movs	r3, #23
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	230b      	movs	r3, #11
 80014d2:	2214      	movs	r2, #20
 80014d4:	4969      	ldr	r1, [pc, #420]	; (800167c <StartDefaultTask+0x384>)
 80014d6:	4863      	ldr	r0, [pc, #396]	; (8001664 <StartDefaultTask+0x36c>)
 80014d8:	f00c fb04 	bl	800dae4 <f_printf>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80014e2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80014e6:	4619      	mov	r1, r3
 80014e8:	4865      	ldr	r0, [pc, #404]	; (8001680 <StartDefaultTask+0x388>)
 80014ea:	f010 fb5b 	bl	8011ba4 <iprintf>
        res = f_close(&SDFile); printf("close:%d\r\n", res);
 80014ee:	485d      	ldr	r0, [pc, #372]	; (8001664 <StartDefaultTask+0x36c>)
 80014f0:	f00a fd85 	bl	800bffe <f_close>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80014fa:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80014fe:	4619      	mov	r1, r3
 8001500:	485b      	ldr	r0, [pc, #364]	; (8001670 <StartDefaultTask+0x378>)
 8001502:	f010 fb4f 	bl	8011ba4 <iprintf>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 8001506:	2201      	movs	r2, #1
 8001508:	4950      	ldr	r1, [pc, #320]	; (800164c <StartDefaultTask+0x354>)
 800150a:	2000      	movs	r0, #0
 800150c:	f009 fe3e 	bl	800b18c <f_mount>
 8001510:	4603      	mov	r3, r0
 8001512:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001516:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800151a:	4619      	mov	r1, r3
 800151c:	4850      	ldr	r0, [pc, #320]	; (8001660 <StartDefaultTask+0x368>)
 800151e:	f010 fb41 	bl	8011ba4 <iprintf>
        break;
 8001522:	e102      	b.n	800172a <StartDefaultTask+0x432>
      }
      case READ:
      {
        flag = IDLE;
 8001524:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <StartDefaultTask+0x35c>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]

        break;
 800152a:	e0fe      	b.n	800172a <StartDefaultTask+0x432>
      }
      case DELETE:
      {
        flag = IDLE;
 800152c:	4b49      	ldr	r3, [pc, #292]	; (8001654 <StartDefaultTask+0x35c>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
        printf("[%s]\r\n", file);
 8001532:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001536:	4619      	mov	r1, r3
 8001538:	484e      	ldr	r0, [pc, #312]	; (8001674 <StartDefaultTask+0x37c>)
 800153a:	f010 fb33 	bl	8011ba4 <iprintf>
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 800153e:	2201      	movs	r2, #1
 8001540:	4942      	ldr	r1, [pc, #264]	; (800164c <StartDefaultTask+0x354>)
 8001542:	4845      	ldr	r0, [pc, #276]	; (8001658 <StartDefaultTask+0x360>)
 8001544:	f009 fe22 	bl	800b18c <f_mount>
 8001548:	4603      	mov	r3, r0
 800154a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800154e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8001552:	4619      	mov	r1, r3
 8001554:	4841      	ldr	r0, [pc, #260]	; (800165c <StartDefaultTask+0x364>)
 8001556:	f010 fb25 	bl	8011ba4 <iprintf>
        res = f_unlink((char *)file); printf("delete:%d\r\n", res);
 800155a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800155e:	4618      	mov	r0, r3
 8001560:	f00b f856 	bl	800c610 <f_unlink>
 8001564:	4603      	mov	r3, r0
 8001566:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800156a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800156e:	4619      	mov	r1, r3
 8001570:	4844      	ldr	r0, [pc, #272]	; (8001684 <StartDefaultTask+0x38c>)
 8001572:	f010 fb17 	bl	8011ba4 <iprintf>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 8001576:	2201      	movs	r2, #1
 8001578:	4934      	ldr	r1, [pc, #208]	; (800164c <StartDefaultTask+0x354>)
 800157a:	2000      	movs	r0, #0
 800157c:	f009 fe06 	bl	800b18c <f_mount>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001586:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800158a:	4619      	mov	r1, r3
 800158c:	4834      	ldr	r0, [pc, #208]	; (8001660 <StartDefaultTask+0x368>)
 800158e:	f010 fb09 	bl	8011ba4 <iprintf>
        break;
 8001592:	e0ca      	b.n	800172a <StartDefaultTask+0x432>
      }
      case REMOVEDIR:
      {
        flag = IDLE;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <StartDefaultTask+0x35c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 800159a:	2201      	movs	r2, #1
 800159c:	492b      	ldr	r1, [pc, #172]	; (800164c <StartDefaultTask+0x354>)
 800159e:	482e      	ldr	r0, [pc, #184]	; (8001658 <StartDefaultTask+0x360>)
 80015a0:	f009 fdf4 	bl	800b18c <f_mount>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80015aa:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80015ae:	4619      	mov	r1, r3
 80015b0:	482a      	ldr	r0, [pc, #168]	; (800165c <StartDefaultTask+0x364>)
 80015b2:	f010 faf7 	bl	8011ba4 <iprintf>
        DeleteEarlyLog();
 80015b6:	f000 f8cf 	bl	8001758 <DeleteEarlyLog>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 80015ba:	2201      	movs	r2, #1
 80015bc:	4923      	ldr	r1, [pc, #140]	; (800164c <StartDefaultTask+0x354>)
 80015be:	2000      	movs	r0, #0
 80015c0:	f009 fde4 	bl	800b18c <f_mount>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80015ca:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80015ce:	4619      	mov	r1, r3
 80015d0:	4823      	ldr	r0, [pc, #140]	; (8001660 <StartDefaultTask+0x368>)
 80015d2:	f010 fae7 	bl	8011ba4 <iprintf>
        break;
 80015d6:	e0a8      	b.n	800172a <StartDefaultTask+0x432>
      }
      case FORMAT:
      {
        flag = IDLE;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <StartDefaultTask+0x35c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 80015de:	2201      	movs	r2, #1
 80015e0:	491a      	ldr	r1, [pc, #104]	; (800164c <StartDefaultTask+0x354>)
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <StartDefaultTask+0x360>)
 80015e4:	f009 fdd2 	bl	800b18c <f_mount>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80015ee:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80015f2:	4619      	mov	r1, r3
 80015f4:	4819      	ldr	r0, [pc, #100]	; (800165c <StartDefaultTask+0x364>)
 80015f6:	f010 fad5 	bl	8011ba4 <iprintf>
        res = f_mkfs(SDPath, FM_EXFAT, 0, work, sizeof(work)); printf("mkfs:%d\r\n", res);
 80015fa:	f107 020c 	add.w	r2, r7, #12
 80015fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	2200      	movs	r2, #0
 8001608:	2104      	movs	r1, #4
 800160a:	4810      	ldr	r0, [pc, #64]	; (800164c <StartDefaultTask+0x354>)
 800160c:	f00b f90e 	bl	800c82c <f_mkfs>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001616:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800161a:	4619      	mov	r1, r3
 800161c:	481a      	ldr	r0, [pc, #104]	; (8001688 <StartDefaultTask+0x390>)
 800161e:	f010 fac1 	bl	8011ba4 <iprintf>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 8001622:	2201      	movs	r2, #1
 8001624:	4909      	ldr	r1, [pc, #36]	; (800164c <StartDefaultTask+0x354>)
 8001626:	2000      	movs	r0, #0
 8001628:	f009 fdb0 	bl	800b18c <f_mount>
 800162c:	4603      	mov	r3, r0
 800162e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8001632:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8001636:	4619      	mov	r1, r3
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <StartDefaultTask+0x368>)
 800163a:	f010 fab3 	bl	8011ba4 <iprintf>
        break;
 800163e:	e074      	b.n	800172a <StartDefaultTask+0x432>
 8001640:	20004444 	.word	0x20004444
 8001644:	20004404 	.word	0x20004404
 8001648:	08015408 	.word	0x08015408
 800164c:	200044cc 	.word	0x200044cc
 8001650:	08015370 	.word	0x08015370
 8001654:	20000454 	.word	0x20000454
 8001658:	20004728 	.word	0x20004728
 800165c:	08015378 	.word	0x08015378
 8001660:	08015384 	.word	0x08015384
 8001664:	200044d0 	.word	0x200044d0
 8001668:	08015394 	.word	0x08015394
 800166c:	080153a0 	.word	0x080153a0
 8001670:	080153ac 	.word	0x080153ac
 8001674:	080153b8 	.word	0x080153b8
 8001678:	080153d0 	.word	0x080153d0
 800167c:	080153c0 	.word	0x080153c0
 8001680:	080153d8 	.word	0x080153d8
 8001684:	080153e4 	.word	0x080153e4
 8001688:	080153f0 	.word	0x080153f0
      }
      case DISKFREE:
      {
        flag = IDLE;
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <StartDefaultTask+0x444>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 8001692:	2201      	movs	r2, #1
 8001694:	492a      	ldr	r1, [pc, #168]	; (8001740 <StartDefaultTask+0x448>)
 8001696:	482b      	ldr	r0, [pc, #172]	; (8001744 <StartDefaultTask+0x44c>)
 8001698:	f009 fd78 	bl	800b18c <f_mount>
 800169c:	4603      	mov	r3, r0
 800169e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80016a2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80016a6:	4619      	mov	r1, r3
 80016a8:	4827      	ldr	r0, [pc, #156]	; (8001748 <StartDefaultTask+0x450>)
 80016aa:	f010 fa7b 	bl	8011ba4 <iprintf>
        CalStorage();
 80016ae:	f000 f8c3 	bl	8001838 <CalStorage>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 80016b2:	2201      	movs	r2, #1
 80016b4:	4922      	ldr	r1, [pc, #136]	; (8001740 <StartDefaultTask+0x448>)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f009 fd68 	bl	800b18c <f_mount>
 80016bc:	4603      	mov	r3, r0
 80016be:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80016c2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80016c6:	4619      	mov	r1, r3
 80016c8:	4820      	ldr	r0, [pc, #128]	; (800174c <StartDefaultTask+0x454>)
 80016ca:	f010 fa6b 	bl	8011ba4 <iprintf>
        break;
 80016ce:	e02c      	b.n	800172a <StartDefaultTask+0x432>
      }
      case LISTDISK:
      {
        flag = IDLE;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <StartDefaultTask+0x444>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
        res = f_mount(&SDFatFS, SDPath, 1); printf("mount:%d\r\n", res);
 80016d6:	2201      	movs	r2, #1
 80016d8:	4919      	ldr	r1, [pc, #100]	; (8001740 <StartDefaultTask+0x448>)
 80016da:	481a      	ldr	r0, [pc, #104]	; (8001744 <StartDefaultTask+0x44c>)
 80016dc:	f009 fd56 	bl	800b18c <f_mount>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80016e6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80016ea:	4619      	mov	r1, r3
 80016ec:	4816      	ldr	r0, [pc, #88]	; (8001748 <StartDefaultTask+0x450>)
 80016ee:	f010 fa59 	bl	8011ba4 <iprintf>
        res = f_list(SDPath); printf("list:%d\r\n", res);
 80016f2:	4813      	ldr	r0, [pc, #76]	; (8001740 <StartDefaultTask+0x448>)
 80016f4:	f7ff fcae 	bl	8001054 <f_list>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 80016fe:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8001702:	4619      	mov	r1, r3
 8001704:	4812      	ldr	r0, [pc, #72]	; (8001750 <StartDefaultTask+0x458>)
 8001706:	f010 fa4d 	bl	8011ba4 <iprintf>
        res = f_mount(NULL, SDPath, 1); printf("unmount:%d\r\n", res);
 800170a:	2201      	movs	r2, #1
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <StartDefaultTask+0x448>)
 800170e:	2000      	movs	r0, #0
 8001710:	f009 fd3c 	bl	800b18c <f_mount>
 8001714:	4603      	mov	r3, r0
 8001716:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 800171a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 800171e:	4619      	mov	r1, r3
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <StartDefaultTask+0x454>)
 8001722:	f010 fa3f 	bl	8011ba4 <iprintf>
        break;
 8001726:	e000      	b.n	800172a <StartDefaultTask+0x432>
      }
      default:
        break;
 8001728:	bf00      	nop
    }
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800172a:	2101      	movs	r1, #1
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <StartDefaultTask+0x45c>)
 800172e:	f001 fdf4 	bl	800331a <HAL_GPIO_TogglePin>
    osDelay(125);
 8001732:	207d      	movs	r0, #125	; 0x7d
 8001734:	f00c fdfd 	bl	800e332 <osDelay>
    switch(flag)
 8001738:	e616      	b.n	8001368 <StartDefaultTask+0x70>
 800173a:	bf00      	nop
 800173c:	20000454 	.word	0x20000454
 8001740:	200044cc 	.word	0x200044cc
 8001744:	20004728 	.word	0x20004728
 8001748:	08015378 	.word	0x08015378
 800174c:	08015384 	.word	0x08015384
 8001750:	080153fc 	.word	0x080153fc
 8001754:	40020000 	.word	0x40020000

08001758 <DeleteEarlyLog>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void DeleteEarlyLog(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0d4      	sub	sp, #336	; 0x150
 800175c:	af02      	add	r7, sp, #8
  FILINFO FileInfo;
  char DeleteDir[32] = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	4618      	mov	r0, r3
 8001762:	2320      	movs	r3, #32
 8001764:	461a      	mov	r2, r3
 8001766:	2100      	movs	r1, #0
 8001768:	f00f fbd5 	bl	8010f16 <memset>
  uint8_t y, m, d;
  for(y=20; y<99; y++)
 800176c:	2314      	movs	r3, #20
 800176e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001772:	e051      	b.n	8001818 <DeleteEarlyLog+0xc0>
  {
    for(m=8; m<13; m++)
 8001774:	2308      	movs	r3, #8
 8001776:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800177a:	e041      	b.n	8001800 <DeleteEarlyLog+0xa8>
    {
      for(d=15; d<32; d++)
 800177c:	230f      	movs	r3, #15
 800177e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001782:	e031      	b.n	80017e8 <DeleteEarlyLog+0x90>
      {
        memset(DeleteDir, 0, sizeof(DeleteDir));
 8001784:	463b      	mov	r3, r7
 8001786:	2220      	movs	r2, #32
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00f fbc3 	bl	8010f16 <memset>
        sprintf(DeleteDir, FORMATOFLOGDIR, SDPath, y, m, d);
 8001790:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001794:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001798:	f897 2145 	ldrb.w	r2, [r7, #325]	; 0x145
 800179c:	4638      	mov	r0, r7
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	460b      	mov	r3, r1
 80017a4:	4a20      	ldr	r2, [pc, #128]	; (8001828 <DeleteEarlyLog+0xd0>)
 80017a6:	4921      	ldr	r1, [pc, #132]	; (800182c <DeleteEarlyLog+0xd4>)
 80017a8:	f010 fa1a 	bl	8011be0 <siprintf>
        if(FR_OK == f_stat(DeleteDir, &FileInfo))
 80017ac:	f107 0220 	add.w	r2, r7, #32
 80017b0:	463b      	mov	r3, r7
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fdd0 	bl	800c35a <f_stat>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10e      	bne.n	80017de <DeleteEarlyLog+0x86>
        {
          printf("DELETEDIR:%s\t", DeleteDir);
 80017c0:	463b      	mov	r3, r7
 80017c2:	4619      	mov	r1, r3
 80017c4:	481a      	ldr	r0, [pc, #104]	; (8001830 <DeleteEarlyLog+0xd8>)
 80017c6:	f010 f9ed 	bl	8011ba4 <iprintf>
          printf("REMOVEDIR RESULT:%d\r\n", f_deldir(DeleteDir));
 80017ca:	463b      	mov	r3, r7
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fccd 	bl	800116c <f_deldir>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4817      	ldr	r0, [pc, #92]	; (8001834 <DeleteEarlyLog+0xdc>)
 80017d8:	f010 f9e4 	bl	8011ba4 <iprintf>
 80017dc:	e020      	b.n	8001820 <DeleteEarlyLog+0xc8>
      for(d=15; d<32; d++)
 80017de:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80017e2:	3301      	adds	r3, #1
 80017e4:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80017e8:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80017ec:	2b1f      	cmp	r3, #31
 80017ee:	d9c9      	bls.n	8001784 <DeleteEarlyLog+0x2c>
          return;
        }
      }
      d = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
    for(m=8; m<13; m++)
 80017f6:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80017fa:	3301      	adds	r3, #1
 80017fc:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001800:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d9b9      	bls.n	800177c <DeleteEarlyLog+0x24>
    }
    m = 1;
 8001808:	2301      	movs	r3, #1
 800180a:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
  for(y=20; y<99; y++)
 800180e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001812:	3301      	adds	r3, #1
 8001814:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001818:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800181c:	2b62      	cmp	r3, #98	; 0x62
 800181e:	d9a9      	bls.n	8001774 <DeleteEarlyLog+0x1c>
  }
}
 8001820:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200044cc 	.word	0x200044cc
 800182c:	08015418 	.word	0x08015418
 8001830:	0801542c 	.word	0x0801542c
 8001834:	0801543c 	.word	0x0801543c

08001838 <CalStorage>:

void CalStorage(void)
{
 8001838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800183c:	b08e      	sub	sp, #56	; 0x38
 800183e:	af04      	add	r7, sp, #16
  DWORD clst = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  FATFS * pFs = &SDFatFS;
 8001844:	4b55      	ldr	r3, [pc, #340]	; (800199c <CalStorage+0x164>)
 8001846:	603b      	str	r3, [r7, #0]
  if(FR_OK == f_getfree(SDPath, &clst, &pFs))
 8001848:	463a      	mov	r2, r7
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4854      	ldr	r0, [pc, #336]	; (80019a0 <CalStorage+0x168>)
 8001850:	f00a fdd5 	bl	800c3fe <f_getfree>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 809a 	bne.w	8001990 <CalStorage+0x158>
  {
    uint32_t TotalSizeKB = (pFs->n_fatent - 2) * pFs->csize / 2;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	3b02      	subs	r3, #2
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	8952      	ldrh	r2, [r2, #10]
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t FreeSizeKB = clst * pFs->csize / 2;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	895b      	ldrh	r3, [r3, #10]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	fb03 f302 	mul.w	r3, r3, r2
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	623b      	str	r3, [r7, #32]
    uint32_t UsedSizeKB = TotalSizeKB - FreeSizeKB;
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	61fb      	str	r3, [r7, #28]
    double FreePercent = (double)FreeSizeKB / TotalSizeKB * 100;
 8001886:	6a38      	ldr	r0, [r7, #32]
 8001888:	f7fe fe3c 	bl	8000504 <__aeabi_ui2d>
 800188c:	4604      	mov	r4, r0
 800188e:	460d      	mov	r5, r1
 8001890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001892:	f7fe fe37 	bl	8000504 <__aeabi_ui2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe ffd5 	bl	800084c <__aeabi_ddiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	4618      	mov	r0, r3
 80018a8:	4621      	mov	r1, r4
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <CalStorage+0x16c>)
 80018b0:	f7fe fea2 	bl	80005f8 <__aeabi_dmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double UsedPercent = (double)UsedSizeKB / TotalSizeKB * 100;
 80018bc:	69f8      	ldr	r0, [r7, #28]
 80018be:	f7fe fe21 	bl	8000504 <__aeabi_ui2d>
 80018c2:	4604      	mov	r4, r0
 80018c4:	460d      	mov	r5, r1
 80018c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018c8:	f7fe fe1c 	bl	8000504 <__aeabi_ui2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe ffba 	bl	800084c <__aeabi_ddiv>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <CalStorage+0x16c>)
 80018e6:	f7fe fe87 	bl	80005f8 <__aeabi_dmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
    printf("\r\nSDCard Size:%.3lfGB, Used:%.3lfGB, Free:%.3lfGB\r\n", TotalSizeKB*1.0/1024/1024, UsedSizeKB*1.0/1024/1024, FreeSizeKB*1.0/1024/1024);
 80018f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018f4:	f7fe fe06 	bl	8000504 <__aeabi_ui2d>
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <CalStorage+0x170>)
 80018fe:	f7fe ffa5 	bl	800084c <__aeabi_ddiv>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	4618      	mov	r0, r3
 8001908:	4621      	mov	r1, r4
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <CalStorage+0x170>)
 8001910:	f7fe ff9c 	bl	800084c <__aeabi_ddiv>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	4698      	mov	r8, r3
 800191a:	46a1      	mov	r9, r4
 800191c:	69f8      	ldr	r0, [r7, #28]
 800191e:	f7fe fdf1 	bl	8000504 <__aeabi_ui2d>
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <CalStorage+0x170>)
 8001928:	f7fe ff90 	bl	800084c <__aeabi_ddiv>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4618      	mov	r0, r3
 8001932:	4621      	mov	r1, r4
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <CalStorage+0x170>)
 800193a:	f7fe ff87 	bl	800084c <__aeabi_ddiv>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	4625      	mov	r5, r4
 8001944:	461c      	mov	r4, r3
 8001946:	6a38      	ldr	r0, [r7, #32]
 8001948:	f7fe fddc 	bl	8000504 <__aeabi_ui2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <CalStorage+0x170>)
 8001952:	f7fe ff7b 	bl	800084c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <CalStorage+0x170>)
 8001964:	f7fe ff72 	bl	800084c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001970:	e9cd 4500 	strd	r4, r5, [sp]
 8001974:	4642      	mov	r2, r8
 8001976:	464b      	mov	r3, r9
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <CalStorage+0x174>)
 800197a:	f010 f913 	bl	8011ba4 <iprintf>
    printf("\r\nSDCard Used:%.3lf%%, Free:%.3lf%%\r\n", UsedPercent, FreePercent);
 800197e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001982:	e9cd 3400 	strd	r3, r4, [sp]
 8001986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <CalStorage+0x178>)
 800198c:	f010 f90a 	bl	8011ba4 <iprintf>
  }
}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800199a:	bf00      	nop
 800199c:	20004728 	.word	0x20004728
 80019a0:	200044cc 	.word	0x200044cc
 80019a4:	40590000 	.word	0x40590000
 80019a8:	40900000 	.word	0x40900000
 80019ac:	08015454 	.word	0x08015454
 80019b0:	08015488 	.word	0x08015488

080019b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_GPIO_Init+0xb4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <MX_GPIO_Init+0xb4>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <MX_GPIO_Init+0xb4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <MX_GPIO_Init+0xb4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <MX_GPIO_Init+0xb4>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <MX_GPIO_Init+0xb4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_GPIO_Init+0xb4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <MX_GPIO_Init+0xb4>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_GPIO_Init+0xb4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_GPIO_Init+0xb4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <MX_GPIO_Init+0xb4>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_GPIO_Init+0xb4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	480b      	ldr	r0, [pc, #44]	; (8001a6c <MX_GPIO_Init+0xb8>)
 8001a40:	f001 fc52 	bl	80032e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a44:	2301      	movs	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_GPIO_Init+0xb8>)
 8001a5c:	f001 faaa 	bl	8002fb4 <HAL_GPIO_Init>

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a74:	f000 fd16 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a78:	f000 f812 	bl	8001aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7c:	f7ff ff9a 	bl	80019b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a80:	f7ff fab8 	bl	8000ff4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001a84:	f000 fb34 	bl	80020f0 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 8001a88:	f000 f88c 	bl	8001ba4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001a8c:	f005 fc30 	bl	80072f0 <MX_FATFS_Init>
  MX_CRC_Init();
 8001a90:	f7ff fa7a 	bl	8000f88 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a94:	f7ff fc14 	bl	80012c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001a98:	f00c fbdc 	bl	800e254 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <main+0x2c>
	...

08001aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b094      	sub	sp, #80	; 0x50
 8001aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2230      	movs	r2, #48	; 0x30
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f00f fa31 	bl	8010f16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <SystemClock_Config+0xd0>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <SystemClock_Config+0xd0>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <SystemClock_Config+0xd0>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <SystemClock_Config+0xd4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <SystemClock_Config+0xd4>)
 8001aea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <SystemClock_Config+0xd4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b14:	23a8      	movs	r3, #168	; 0xa8
 8001b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 fc13 	bl	8003350 <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b30:	f000 f834 	bl	8001b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2105      	movs	r1, #5
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fe6c 	bl	8003830 <HAL_RCC_ClockConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b5e:	f000 f81d 	bl	8001b9c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001b62:	f001 ff4b 	bl	80039fc <HAL_RCC_EnableCSS>
}
 8001b66:	bf00      	nop
 8001b68:	3750      	adds	r7, #80	; 0x50
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000

08001b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8a:	f000 fcad 	bl	80024e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40010000 	.word	0x40010000

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <Error_Handler+0x6>

08001ba4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001baa:	4a0d      	ldr	r2, [pc, #52]	; (8001be0 <MX_SDIO_SD_Init+0x3c>)
 8001bac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <MX_SDIO_SD_Init+0x38>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]

}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	200042e0 	.word	0x200042e0
 8001be0:	40012c00 	.word	0x40012c00

08001be4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a68      	ldr	r2, [pc, #416]	; (8001da4 <HAL_SD_MspInit+0x1c0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	f040 80c9 	bne.w	8001d9a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c16:	6453      	str	r3, [r2, #68]	; 0x44
 8001c18:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b5c      	ldr	r3, [pc, #368]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b58      	ldr	r3, [pc, #352]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c50:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <HAL_SD_MspInit+0x1c4>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c5c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c60:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c6e:	230c      	movs	r3, #12
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	484c      	ldr	r0, [pc, #304]	; (8001dac <HAL_SD_MspInit+0x1c8>)
 8001c7a:	f001 f99b 	bl	8002fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4845      	ldr	r0, [pc, #276]	; (8001db0 <HAL_SD_MspInit+0x1cc>)
 8001c9a:	f001 f98b 	bl	8002fb4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001c9e:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001ca0:	4a45      	ldr	r2, [pc, #276]	; (8001db8 <HAL_SD_MspInit+0x1d4>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001ca4:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001caa:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cac:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbe:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cc6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001cc8:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cce:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001cd0:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cdc:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cde:	2204      	movs	r2, #4
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ce2:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001ce8:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cf2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001cf8:	482e      	ldr	r0, [pc, #184]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001cfa:	f000 fd4f 	bl	800279c <HAL_DMA_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001d04:	f7ff ff4a 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d0e:	4a29      	ldr	r2, [pc, #164]	; (8001db4 <HAL_SD_MspInit+0x1d0>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <HAL_SD_MspInit+0x1dc>)
 8001d18:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d20:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d44:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d48:	2220      	movs	r2, #32
 8001d4a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d54:	2204      	movs	r2, #4
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001d6e:	4813      	ldr	r0, [pc, #76]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d70:	f000 fd14 	bl	800279c <HAL_DMA_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001d7a:	f7ff ff0f 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a0e      	ldr	r2, [pc, #56]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_SD_MspInit+0x1d8>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 6, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2106      	movs	r1, #6
 8001d8e:	2031      	movs	r0, #49	; 0x31
 8001d90:	f000 fcb9 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001d94:	2031      	movs	r0, #49	; 0x31
 8001d96:	f000 fcd2 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	20004220 	.word	0x20004220
 8001db8:	40026458 	.word	0x40026458
 8001dbc:	20004280 	.word	0x20004280
 8001dc0:	400264a0 	.word	0x400264a0

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_MspInit+0x54>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_MspInit+0x54>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_MspInit+0x54>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_MspInit+0x54>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <HAL_MspInit+0x54>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_MspInit+0x54>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	210f      	movs	r1, #15
 8001e06:	f06f 0001 	mvn.w	r0, #1
 8001e0a:	f000 fc7c 	bl	8002706 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	2019      	movs	r0, #25
 8001e32:	f000 fc68 	bl	8002706 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e36:	2019      	movs	r0, #25
 8001e38:	f000 fc81 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_InitTick+0xa4>)
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_InitTick+0xa4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_InitTick+0xa4>)
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e58:	f107 0210 	add.w	r2, r7, #16
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 fee2 	bl	8003c2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e68:	f001 fecc 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_InitTick+0xa8>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9b      	lsrs	r3, r3, #18
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_InitTick+0xac>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_InitTick+0xb0>)
 8001e84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_InitTick+0xac>)
 8001e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_InitTick+0xac>)
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_InitTick+0xac>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_InitTick+0xac>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_InitTick+0xac>)
 8001ea2:	f003 fa0f 	bl	80052c4 <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <HAL_InitTick+0xac>)
 8001eae:	f003 fa3e 	bl	800532e <HAL_TIM_Base_Start_IT>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3730      	adds	r7, #48	; 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	431bde83 	.word	0x431bde83
 8001ec8:	20004364 	.word	0x20004364
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ed4:	f001 fedc 	bl	8003c90 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x8>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f06:	f003 fa36 	bl	8005376 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20004364 	.word	0x20004364

08001f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <USART1_IRQHandler+0x14>)
 8001f1a:	f003 fdd3 	bl	8005ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  My_UART_IRQHandler(&huart1);
 8001f1e:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART1_IRQHandler+0x14>)
 8001f20:	f000 f9b8 	bl	8002294 <My_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20004404 	.word	0x20004404

08001f2c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <SDIO_IRQHandler+0x10>)
 8001f32:	f002 f933 	bl	800419c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200042e0 	.word	0x200042e0

08001f40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <DMA2_Stream2_IRQHandler+0x10>)
 8001f46:	f000 fdc1 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200043a4 	.word	0x200043a4

08001f54 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <DMA2_Stream3_IRQHandler+0x10>)
 8001f5a:	f000 fdb7 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20004220 	.word	0x20004220

08001f68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <DMA2_Stream6_IRQHandler+0x10>)
 8001f6e:	f000 fdad 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20004280 	.word	0x20004280

08001f7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	e00a      	b.n	8001fa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f8e:	f3af 8000 	nop.w
 8001f92:	4601      	mov	r1, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf0      	blt.n	8001f8e <_read+0x12>
	}

return len;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e009      	b.n	8001fdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	60ba      	str	r2, [r7, #8]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f94d 	bl	8002270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf1      	blt.n	8001fc8 <_write+0x12>
	}
	return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_close>:

int _close(int file)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002016:	605a      	str	r2, [r3, #4]
	return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_isatty>:

int _isatty(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	return 1;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
	return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f00e ff10 	bl	8010eac <__errno>
 800208c:	4602      	mov	r2, r0
 800208e:	230c      	movs	r3, #12
 8002090:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20020000 	.word	0x20020000
 80020b8:	00001000 	.word	0x00001000
 80020bc:	20000450 	.word	0x20000450
 80020c0:	200049a8 	.word	0x200049a8

080020c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <SystemInit+0x28>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <SystemInit+0x28>)
 80020d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SystemInit+0x28>)
 80020da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020de:	609a      	str	r2, [r3, #8]
#endif
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_USART1_UART_Init+0x4c>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <MX_USART1_UART_Init+0x50>)
 80020f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <MX_USART1_UART_Init+0x4c>)
 80020fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_USART1_UART_Init+0x4c>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002116:	220c      	movs	r2, #12
 8002118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_USART1_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_USART1_UART_Init+0x4c>)
 8002128:	f003 fb0a 	bl	8005740 <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002132:	f7ff fd33 	bl	8001b9c <Error_Handler>
  }

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20004404 	.word	0x20004404
 8002140:	40011000 	.word	0x40011000

08002144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3e      	ldr	r2, [pc, #248]	; (800225c <HAL_UART_MspInit+0x118>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d175      	bne.n	8002252 <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_UART_MspInit+0x11c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a3c      	ldr	r2, [pc, #240]	; (8002260 <HAL_UART_MspInit+0x11c>)
 8002170:	f043 0310 	orr.w	r3, r3, #16
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_UART_MspInit+0x11c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_UART_MspInit+0x11c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a35      	ldr	r2, [pc, #212]	; (8002260 <HAL_UART_MspInit+0x11c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_UART_MspInit+0x11c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800219e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021b0:	2307      	movs	r3, #7
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	482a      	ldr	r0, [pc, #168]	; (8002264 <HAL_UART_MspInit+0x120>)
 80021bc:	f000 fefa 	bl	8002fb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021c2:	4a2a      	ldr	r2, [pc, #168]	; (800226c <HAL_UART_MspInit+0x128>)
 80021c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021c6:	4b28      	ldr	r3, [pc, #160]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_UART_MspInit+0x124>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <HAL_UART_MspInit+0x124>)
 8002202:	f000 facb 	bl	800279c <HAL_DMA_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800220c:	f7ff fcc6 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_UART_MspInit+0x124>)
 8002214:	635a      	str	r2, [r3, #52]	; 0x34
 8002216:	4a14      	ldr	r2, [pc, #80]	; (8002268 <HAL_UART_MspInit+0x124>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2108      	movs	r1, #8
 8002220:	2025      	movs	r0, #37	; 0x25
 8002222:	f000 fa70 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002226:	2025      	movs	r0, #37	; 0x25
 8002228:	f000 fa89 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0210 	orr.w	r2, r2, #16
 800223a:	60da      	str	r2, [r3, #12]
    __HAL_UART_CLEAR_IDLEFLAG(uartHandle);
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40011000 	.word	0x40011000
 8002260:	40023800 	.word	0x40023800
 8002264:	40020000 	.word	0x40020000
 8002268:	200043a4 	.word	0x200043a4
 800226c:	40026440 	.word	0x40026440

08002270 <__io_putchar>:
}

/* USER CODE BEGIN 1 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002278:	1d39      	adds	r1, r7, #4
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
 800227e:	2201      	movs	r2, #1
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <__io_putchar+0x20>)
 8002282:	f003 faaa 	bl	80057da <HAL_UART_Transmit>
  return ch;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20004404 	.word	0x20004404

08002294 <My_UART_IRQHandler>:
#endif

void My_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a5d      	ldr	r2, [pc, #372]	; (8002418 <My_UART_IRQHandler+0x184>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	f040 80b4 	bne.w	8002410 <My_UART_IRQHandler+0x17c>
  {
    if(__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	f040 80ac 	bne.w	8002410 <My_UART_IRQHandler+0x17c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
      HAL_UART_DMAStop(huart);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f003 fb9c 	bl	8005a0c <HAL_UART_DMAStop>
      if(NULL != strstr((char *)RxBuf, "MOUNT"))
 80022d4:	4951      	ldr	r1, [pc, #324]	; (800241c <My_UART_IRQHandler+0x188>)
 80022d6:	4852      	ldr	r0, [pc, #328]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80022d8:	f00f fcb1 	bl	8011c3e <strstr>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <My_UART_IRQHandler+0x5e>
      {
        printf("%s\r\n", RxBuf);
 80022e2:	494f      	ldr	r1, [pc, #316]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80022e4:	484f      	ldr	r0, [pc, #316]	; (8002424 <My_UART_IRQHandler+0x190>)
 80022e6:	f00f fc5d 	bl	8011ba4 <iprintf>
        flag = MOUNT;
 80022ea:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <My_UART_IRQHandler+0x194>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e084      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "WRITE"))
 80022f2:	494e      	ldr	r1, [pc, #312]	; (800242c <My_UART_IRQHandler+0x198>)
 80022f4:	484a      	ldr	r0, [pc, #296]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80022f6:	f00f fca2 	bl	8011c3e <strstr>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <My_UART_IRQHandler+0x7c>
      {
        printf("%s\r\n", RxBuf);
 8002300:	4947      	ldr	r1, [pc, #284]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002302:	4848      	ldr	r0, [pc, #288]	; (8002424 <My_UART_IRQHandler+0x190>)
 8002304:	f00f fc4e 	bl	8011ba4 <iprintf>
        flag = WRITE;
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <My_UART_IRQHandler+0x194>)
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e075      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "PRINTF"))
 8002310:	4947      	ldr	r1, [pc, #284]	; (8002430 <My_UART_IRQHandler+0x19c>)
 8002312:	4843      	ldr	r0, [pc, #268]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002314:	f00f fc93 	bl	8011c3e <strstr>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <My_UART_IRQHandler+0x9a>
      {
        printf("%s\r\n", RxBuf);
 800231e:	4940      	ldr	r1, [pc, #256]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002320:	4840      	ldr	r0, [pc, #256]	; (8002424 <My_UART_IRQHandler+0x190>)
 8002322:	f00f fc3f 	bl	8011ba4 <iprintf>
        flag = PRINTF;
 8002326:	4b40      	ldr	r3, [pc, #256]	; (8002428 <My_UART_IRQHandler+0x194>)
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
 800232c:	e066      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "READ"))
 800232e:	4941      	ldr	r1, [pc, #260]	; (8002434 <My_UART_IRQHandler+0x1a0>)
 8002330:	483b      	ldr	r0, [pc, #236]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002332:	f00f fc84 	bl	8011c3e <strstr>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <My_UART_IRQHandler+0xb8>
      {
        printf("%s\r\n", RxBuf);
 800233c:	4938      	ldr	r1, [pc, #224]	; (8002420 <My_UART_IRQHandler+0x18c>)
 800233e:	4839      	ldr	r0, [pc, #228]	; (8002424 <My_UART_IRQHandler+0x190>)
 8002340:	f00f fc30 	bl	8011ba4 <iprintf>
        flag = READ;
 8002344:	4b38      	ldr	r3, [pc, #224]	; (8002428 <My_UART_IRQHandler+0x194>)
 8002346:	2204      	movs	r2, #4
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e057      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "DELETE"))
 800234c:	493a      	ldr	r1, [pc, #232]	; (8002438 <My_UART_IRQHandler+0x1a4>)
 800234e:	4834      	ldr	r0, [pc, #208]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002350:	f00f fc75 	bl	8011c3e <strstr>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <My_UART_IRQHandler+0xd6>
      {
        printf("%s\r\n", RxBuf);
 800235a:	4931      	ldr	r1, [pc, #196]	; (8002420 <My_UART_IRQHandler+0x18c>)
 800235c:	4831      	ldr	r0, [pc, #196]	; (8002424 <My_UART_IRQHandler+0x190>)
 800235e:	f00f fc21 	bl	8011ba4 <iprintf>
        flag = DELETE;
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <My_UART_IRQHandler+0x194>)
 8002364:	2205      	movs	r2, #5
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e048      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "REMOVEDIR"))
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <My_UART_IRQHandler+0x1a8>)
 800236c:	482c      	ldr	r0, [pc, #176]	; (8002420 <My_UART_IRQHandler+0x18c>)
 800236e:	f00f fc66 	bl	8011c3e <strstr>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <My_UART_IRQHandler+0xf4>
      {
        printf("%s\r\n", RxBuf);
 8002378:	4929      	ldr	r1, [pc, #164]	; (8002420 <My_UART_IRQHandler+0x18c>)
 800237a:	482a      	ldr	r0, [pc, #168]	; (8002424 <My_UART_IRQHandler+0x190>)
 800237c:	f00f fc12 	bl	8011ba4 <iprintf>
        flag = REMOVEDIR;
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <My_UART_IRQHandler+0x194>)
 8002382:	2206      	movs	r2, #6
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e039      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "FORMAT"))
 8002388:	492d      	ldr	r1, [pc, #180]	; (8002440 <My_UART_IRQHandler+0x1ac>)
 800238a:	4825      	ldr	r0, [pc, #148]	; (8002420 <My_UART_IRQHandler+0x18c>)
 800238c:	f00f fc57 	bl	8011c3e <strstr>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <My_UART_IRQHandler+0x112>
      {
        printf("%s\r\n", RxBuf);
 8002396:	4922      	ldr	r1, [pc, #136]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002398:	4822      	ldr	r0, [pc, #136]	; (8002424 <My_UART_IRQHandler+0x190>)
 800239a:	f00f fc03 	bl	8011ba4 <iprintf>
        flag = FORMAT;
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <My_UART_IRQHandler+0x194>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e02a      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "DISKFREE"))
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <My_UART_IRQHandler+0x1b0>)
 80023a8:	481d      	ldr	r0, [pc, #116]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80023aa:	f00f fc48 	bl	8011c3e <strstr>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <My_UART_IRQHandler+0x130>
      {
        printf("%s\r\n", RxBuf);
 80023b4:	491a      	ldr	r1, [pc, #104]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80023b6:	481b      	ldr	r0, [pc, #108]	; (8002424 <My_UART_IRQHandler+0x190>)
 80023b8:	f00f fbf4 	bl	8011ba4 <iprintf>
        flag = DISKFREE;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <My_UART_IRQHandler+0x194>)
 80023be:	2208      	movs	r2, #8
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e01b      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "LISTDISK"))
 80023c4:	4920      	ldr	r1, [pc, #128]	; (8002448 <My_UART_IRQHandler+0x1b4>)
 80023c6:	4816      	ldr	r0, [pc, #88]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80023c8:	f00f fc39 	bl	8011c3e <strstr>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <My_UART_IRQHandler+0x14e>
      {
        printf("%s\r\n", RxBuf);
 80023d2:	4913      	ldr	r1, [pc, #76]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80023d4:	4813      	ldr	r0, [pc, #76]	; (8002424 <My_UART_IRQHandler+0x190>)
 80023d6:	f00f fbe5 	bl	8011ba4 <iprintf>
        flag = LISTDISK;
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <My_UART_IRQHandler+0x194>)
 80023dc:	2209      	movs	r2, #9
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e00c      	b.n	80023fc <My_UART_IRQHandler+0x168>
      }
      else if(NULL != strstr((char *)RxBuf, "SOFTRESET"))
 80023e2:	491a      	ldr	r1, [pc, #104]	; (800244c <My_UART_IRQHandler+0x1b8>)
 80023e4:	480e      	ldr	r0, [pc, #56]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80023e6:	f00f fc2a 	bl	8011c3e <strstr>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <My_UART_IRQHandler+0x168>
      {
        printf("%s\r\n", RxBuf);
 80023f0:	490b      	ldr	r1, [pc, #44]	; (8002420 <My_UART_IRQHandler+0x18c>)
 80023f2:	480c      	ldr	r0, [pc, #48]	; (8002424 <My_UART_IRQHandler+0x190>)
 80023f4:	f00f fbd6 	bl	8011ba4 <iprintf>
        HAL_NVIC_SystemReset();
 80023f8:	f000 f9af 	bl	800275a <HAL_NVIC_SystemReset>
      }
      memset(RxBuf, 0, sizeof(RxBuf));
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	2100      	movs	r1, #0
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <My_UART_IRQHandler+0x18c>)
 8002402:	f00e fd88 	bl	8010f16 <memset>
      HAL_UART_Receive_DMA(huart, RxBuf, sizeof(RxBuf));
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	4905      	ldr	r1, [pc, #20]	; (8002420 <My_UART_IRQHandler+0x18c>)
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f003 fa7e 	bl	800590c <HAL_UART_Receive_DMA>
    }
  }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40011000 	.word	0x40011000
 800241c:	080154b0 	.word	0x080154b0
 8002420:	20004444 	.word	0x20004444
 8002424:	080154b8 	.word	0x080154b8
 8002428:	20000454 	.word	0x20000454
 800242c:	080154c0 	.word	0x080154c0
 8002430:	080154c8 	.word	0x080154c8
 8002434:	080154d0 	.word	0x080154d0
 8002438:	080154d8 	.word	0x080154d8
 800243c:	080154e0 	.word	0x080154e0
 8002440:	080154ec 	.word	0x080154ec
 8002444:	080154f4 	.word	0x080154f4
 8002448:	08015500 	.word	0x08015500
 800244c:	0801550c 	.word	0x0801550c

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002456:	e003      	b.n	8002460 <LoopCopyDataInit>

08002458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800245a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800245c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800245e:	3104      	adds	r1, #4

08002460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002468:	d3f6      	bcc.n	8002458 <CopyDataInit>
  ldr  r2, =_sbss
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800246c:	e002      	b.n	8002474 <LoopFillZerobss>

0800246e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800246e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002470:	f842 3b04 	str.w	r3, [r2], #4

08002474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002478:	d3f9      	bcc.n	800246e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800247a:	f7ff fe23 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247e:	f00e fd1b 	bl	8010eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7ff faf5 	bl	8001a70 <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800248c:	08015d48 	.word	0x08015d48
  ldr  r0, =_sdata
 8002490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002494:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002498:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800249c:	200049a8 	.word	0x200049a8

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f90f 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff fca2 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fc74 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008
 800250c:	200044c4 	.word	0x200044c4

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200044c4 	.word	0x200044c4

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_Delay+0x40>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000008 	.word	0x20000008

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <__NVIC_SystemReset+0x20>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <__NVIC_SystemReset+0x20>)
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_SystemReset+0x24>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
 80026e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <__NVIC_SystemReset+0x1c>
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	05fa0004 	.word	0x05fa0004

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff37 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff4c 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff9c 	bl	8002660 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff6b 	bl	800260c <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff3f 	bl	80025d0 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800275e:	f7ff ffb3 	bl	80026c8 <__NVIC_SystemReset>

08002762 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00e      	b.n	8002792 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	795b      	ldrb	r3, [r3, #5]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fc13 	bl	8000fb0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff feb2 	bl	8002510 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e099      	b.n	80028ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e00f      	b.n	80027fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff fe99 	bl	8002510 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d908      	bls.n	80027fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e078      	b.n	80028ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e8      	bne.n	80027da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_DMA_Init+0x158>)
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2b04      	cmp	r3, #4
 800288c:	d117      	bne.n	80028be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb0d 	bl	8002ec0 <DMA_CheckFifoParam>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ba:	2301      	movs	r3, #1
 80028bc:	e016      	b.n	80028ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fac4 	bl	8002e54 <DMA_CalcBaseAndBitshift>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	f010803f 	.word	0xf010803f

080028f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA_Start_IT+0x26>
 800291a:	2302      	movs	r3, #2
 800291c:	e040      	b.n	80029a0 <HAL_DMA_Start_IT+0xa8>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d12f      	bne.n	8002992 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fa56 	bl	8002df8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	223f      	movs	r2, #63	; 0x3f
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0216 	orr.w	r2, r2, #22
 8002966:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0208 	orr.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e005      	b.n	800299e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b6:	f7ff fdab 	bl	8002510 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e052      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_Abort+0x62>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	e013      	b.n	8002a54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2c:	f7ff fd70 	bl	8002510 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d90c      	bls.n	8002a54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e015      	b.n	8002a80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e4      	bne.n	8002a2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	223f      	movs	r2, #63	; 0x3f
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00c      	b.n	8002ac0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ad8:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_DMA_IRQHandler+0x258>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a92      	ldr	r2, [pc, #584]	; (8002d28 <HAL_DMA_IRQHandler+0x25c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2208      	movs	r2, #8
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01a      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d013      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2208      	movs	r2, #8
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f043 0202 	orr.w	r2, r3, #2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2204      	movs	r2, #4
 8002b74:	409a      	lsls	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2204      	movs	r2, #4
 8002b92:	409a      	lsls	r2, r3
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	2210      	movs	r2, #16
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d043      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d03c      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d024      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e01f      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e016      	b.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0208 	bic.w	r2, r2, #8
 8002c2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	2220      	movs	r2, #32
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 808e 	beq.w	8002d6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8086 	beq.w	8002d6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2220      	movs	r2, #32
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d136      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0216 	bic.w	r2, r2, #22
 8002c84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x1da>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	223f      	movs	r2, #63	; 0x3f
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d07d      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
        }
        return;
 8002ce2:	e078      	b.n	8002dd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01c      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d108      	bne.n	8002d12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d030      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
 8002d10:	e02b      	b.n	8002d6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d027      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
 8002d22:	e022      	b.n	8002d6a <HAL_DMA_IRQHandler+0x29e>
 8002d24:	20000000 	.word	0x20000000
 8002d28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0210 	bic.w	r2, r2, #16
 8002d48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d032      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d022      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2205      	movs	r2, #5
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d307      	bcc.n	8002db2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f2      	bne.n	8002d96 <HAL_DMA_IRQHandler+0x2ca>
 8002db0:	e000      	b.n	8002db4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002db2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
 8002dd4:	e000      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dd6:	bf00      	nop
    }
  }
}
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop

08002de0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	d108      	bne.n	8002e38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e36:	e007      	b.n	8002e48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3b10      	subs	r3, #16
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <DMA_CalcBaseAndBitshift+0x68>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d909      	bls.n	8002e96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	1d1a      	adds	r2, r3, #4
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	659a      	str	r2, [r3, #88]	; 0x58
 8002e94:	e007      	b.n	8002ea6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	aaaaaaab 	.word	0xaaaaaaab
 8002ebc:	0801559c 	.word	0x0801559c

08002ec0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d11f      	bne.n	8002f1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d855      	bhi.n	8002f8c <DMA_CheckFifoParam+0xcc>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x28>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f0b 	.word	0x08002f0b
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f8d 	.word	0x08002f8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d045      	beq.n	8002f90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f08:	e042      	b.n	8002f90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f12:	d13f      	bne.n	8002f94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e03c      	b.n	8002f94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d121      	bne.n	8002f68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d836      	bhi.n	8002f98 <DMA_CheckFifoParam+0xd8>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <DMA_CheckFifoParam+0x70>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f47 	.word	0x08002f47
 8002f38:	08002f41 	.word	0x08002f41
 8002f3c:	08002f59 	.word	0x08002f59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e02f      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d024      	beq.n	8002f9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f56:	e021      	b.n	8002f9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f60:	d11e      	bne.n	8002fa0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f66:	e01b      	b.n	8002fa0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <DMA_CheckFifoParam+0xb4>
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d003      	beq.n	8002f7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f72:	e018      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e015      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00e      	beq.n	8002fa4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
      break;
 8002f8a:	e00b      	b.n	8002fa4 <DMA_CheckFifoParam+0xe4>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e00a      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f90:	bf00      	nop
 8002f92:	e008      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f94:	bf00      	nop
 8002f96:	e006      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f98:	bf00      	nop
 8002f9a:	e004      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9c:	bf00      	nop
 8002f9e:	e002      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002fa0:	bf00      	nop
 8002fa2:	e000      	b.n	8002fa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fa4:	bf00      	nop
    }
  } 
  
  return status; 
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e16b      	b.n	80032a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	f040 815a 	bne.w	80032a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d00b      	beq.n	800300e <HAL_GPIO_Init+0x5a>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003002:	2b11      	cmp	r3, #17
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b12      	cmp	r3, #18
 800300c:	d130      	bne.n	8003070 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003044:	2201      	movs	r2, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 0201 	and.w	r2, r3, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0xfc>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b12      	cmp	r3, #18
 80030ae:	d123      	bne.n	80030f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	08da      	lsrs	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3208      	adds	r2, #8
 80030b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	69b9      	ldr	r1, [r7, #24]
 80030f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0203 	and.w	r2, r3, #3
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80b4 	beq.w	80032a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_GPIO_Init+0x308>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a5e      	ldr	r2, [pc, #376]	; (80032bc <HAL_GPIO_Init+0x308>)
 8003144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b5c      	ldr	r3, [pc, #368]	; (80032bc <HAL_GPIO_Init+0x308>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003156:	4a5a      	ldr	r2, [pc, #360]	; (80032c0 <HAL_GPIO_Init+0x30c>)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a51      	ldr	r2, [pc, #324]	; (80032c4 <HAL_GPIO_Init+0x310>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <HAL_GPIO_Init+0x226>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a50      	ldr	r2, [pc, #320]	; (80032c8 <HAL_GPIO_Init+0x314>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d025      	beq.n	80031d6 <HAL_GPIO_Init+0x222>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4f      	ldr	r2, [pc, #316]	; (80032cc <HAL_GPIO_Init+0x318>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <HAL_GPIO_Init+0x21e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4e      	ldr	r2, [pc, #312]	; (80032d0 <HAL_GPIO_Init+0x31c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d019      	beq.n	80031ce <HAL_GPIO_Init+0x21a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <HAL_GPIO_Init+0x320>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d013      	beq.n	80031ca <HAL_GPIO_Init+0x216>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <HAL_GPIO_Init+0x324>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00d      	beq.n	80031c6 <HAL_GPIO_Init+0x212>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4b      	ldr	r2, [pc, #300]	; (80032dc <HAL_GPIO_Init+0x328>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_Init+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4a      	ldr	r2, [pc, #296]	; (80032e0 <HAL_GPIO_Init+0x32c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_GPIO_Init+0x20a>
 80031ba:	2307      	movs	r3, #7
 80031bc:	e00e      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031be:	2308      	movs	r3, #8
 80031c0:	e00c      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031c2:	2306      	movs	r3, #6
 80031c4:	e00a      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031c6:	2305      	movs	r3, #5
 80031c8:	e008      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031ce:	2303      	movs	r3, #3
 80031d0:	e004      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e002      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <HAL_GPIO_Init+0x228>
 80031da:	2300      	movs	r3, #0
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4093      	lsls	r3, r2
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ec:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_GPIO_Init+0x30c>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	089b      	lsrs	r3, r3, #2
 80031f2:	3302      	adds	r3, #2
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031fa:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_GPIO_Init+0x330>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800321e:	4a31      	ldr	r2, [pc, #196]	; (80032e4 <HAL_GPIO_Init+0x330>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_GPIO_Init+0x330>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_GPIO_Init+0x330>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_GPIO_Init+0x330>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <HAL_GPIO_Init+0x330>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_GPIO_Init+0x330>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800329c:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <HAL_GPIO_Init+0x330>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	f67f ae90 	bls.w	8002fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3724      	adds	r7, #36	; 0x24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40013800 	.word	0x40013800
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40020400 	.word	0x40020400
 80032cc:	40020800 	.word	0x40020800
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40021400 	.word	0x40021400
 80032dc:	40021800 	.word	0x40021800
 80032e0:	40021c00 	.word	0x40021c00
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	4613      	mov	r3, r2
 80032f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f8:	787b      	ldrb	r3, [r7, #1]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003304:	e003      	b.n	800330e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	041a      	lsls	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	619a      	str	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	460b      	mov	r3, r1
 8003324:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	401a      	ands	r2, r3
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	429a      	cmp	r2, r3
 8003332:	d104      	bne.n	800333e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	041a      	lsls	r2, r3, #16
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800333c:	e002      	b.n	8003344 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e25b      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	4ba3      	ldr	r3, [pc, #652]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4ba0      	ldr	r3, [pc, #640]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b9d      	ldr	r3, [pc, #628]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b99      	ldr	r3, [pc, #612]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e236      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a90      	ldr	r2, [pc, #576]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a8a      	ldr	r2, [pc, #552]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a87      	ldr	r2, [pc, #540]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a83      	ldr	r2, [pc, #524]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a80      	ldr	r2, [pc, #512]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7ff f882 	bl	8002510 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7ff f87e 	bl	8002510 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1fb      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff f86e 	bl	8002510 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7ff f86a 	bl	8002510 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1e7      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b62      	ldr	r3, [pc, #392]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e1bb      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4952      	ldr	r1, [pc, #328]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_RCC_OscConfig+0x2b0>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7ff f823 	bl	8002510 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7ff f81f 	bl	8002510 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e19c      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b46      	ldr	r3, [pc, #280]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4940      	ldr	r1, [pc, #256]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_OscConfig+0x2b0>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7ff f802 	bl	8002510 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7fe fffe 	bl	8002510 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e17b      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d030      	beq.n	800359c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x2b4>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe ffe2 	bl	8002510 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7fe ffde 	bl	8002510 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e15b      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e015      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x2b4>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fe ffcb 	bl	8002510 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe ffc7 	bl	8002510 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e144      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a0 	beq.w	80036ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_OscConfig+0x2b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d121      	bne.n	800362a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_RCC_OscConfig+0x2b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_RCC_OscConfig+0x2b8>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fe ff8d 	bl	8002510 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e011      	b.n	800361e <HAL_RCC_OscConfig+0x2ce>
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470000 	.word	0x42470000
 8003604:	42470e80 	.word	0x42470e80
 8003608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fe ff80 	bl	8002510 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0fd      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_OscConfig+0x4d4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x2f0>
 8003632:	4b7d      	ldr	r3, [pc, #500]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a7c      	ldr	r2, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	e01c      	b.n	800367a <HAL_RCC_OscConfig+0x32a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003648:	4b77      	ldr	r3, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a76      	ldr	r2, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	4b74      	ldr	r3, [pc, #464]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a73      	ldr	r2, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	e00b      	b.n	800367a <HAL_RCC_OscConfig+0x32a>
 8003662:	4b71      	ldr	r3, [pc, #452]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a70      	ldr	r2, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	4b6e      	ldr	r3, [pc, #440]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a6d      	ldr	r2, [pc, #436]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fe ff45 	bl	8002510 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fe ff41 	bl	8002510 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0bc      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ee      	beq.n	800368a <HAL_RCC_OscConfig+0x33a>
 80036ac:	e014      	b.n	80036d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe ff2f 	bl	8002510 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fe ff2b 	bl	8002510 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e0a6      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036cc:	4b56      	ldr	r3, [pc, #344]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ee      	bne.n	80036b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d105      	bne.n	80036ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036de:	4b52      	ldr	r3, [pc, #328]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a51      	ldr	r2, [pc, #324]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80036e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8092 	beq.w	8003818 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f4:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d05c      	beq.n	80037ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d141      	bne.n	800378c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b48      	ldr	r3, [pc, #288]	; (800382c <HAL_RCC_OscConfig+0x4dc>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fe feff 	bl	8002510 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe fefb 	bl	8002510 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e078      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003728:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	019b      	lsls	r3, r3, #6
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	3b01      	subs	r3, #1
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	4933      	ldr	r1, [pc, #204]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375e:	4b33      	ldr	r3, [pc, #204]	; (800382c <HAL_RCC_OscConfig+0x4dc>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fed4 	bl	8002510 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fed0 	bl	8002510 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e04d      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x41c>
 800378a:	e045      	b.n	8003818 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x4dc>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fe febd 	bl	8002510 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379a:	f7fe feb9 	bl	8002510 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e036      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x44a>
 80037b8:	e02e      	b.n	8003818 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e029      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_RCC_OscConfig+0x4d8>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11c      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d115      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000
 8003828:	40023800 	.word	0x40023800
 800382c:	42470060 	.word	0x42470060

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0cc      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 030f 	and.w	r3, r3, #15
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d90c      	bls.n	800386c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b8      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800388e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494d      	ldr	r1, [pc, #308]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d044      	beq.n	8003950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d119      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d003      	beq.n	80038ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e067      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4934      	ldr	r1, [pc, #208]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003920:	f7fe fdf6 	bl	8002510 <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fe fdf2 	bl	8002510 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e04f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 020c 	and.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d1eb      	bne.n	8003928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d20c      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039b6:	f000 f82d 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039ba:	4601      	mov	r1, r0
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x1c0>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	fa21 f303 	lsr.w	r3, r1, r3
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fa20 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	08015584 	.word	0x08015584
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004

080039fc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_EnableCSS+0x14>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	4247004c 	.word	0x4247004c

08003a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d007      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x32>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d008      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x38>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 80b4 	bne.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b5e      	ldr	r3, [pc, #376]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a42:	60bb      	str	r3, [r7, #8]
       break;
 8003a44:	e0b3      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a46:	4b5e      	ldr	r3, [pc, #376]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a48:	60bb      	str	r3, [r7, #8]
      break;
 8003a4a:	e0b0      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b5a      	ldr	r3, [pc, #360]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a56:	4b58      	ldr	r3, [pc, #352]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04a      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a62:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	f04f 0400 	mov.w	r4, #0
 8003a6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	ea03 0501 	and.w	r5, r3, r1
 8003a78:	ea04 0602 	and.w	r6, r4, r2
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4632      	mov	r2, r6
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	0154      	lsls	r4, r2, #5
 8003a8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a8e:	014b      	lsls	r3, r1, #5
 8003a90:	4619      	mov	r1, r3
 8003a92:	4622      	mov	r2, r4
 8003a94:	1b49      	subs	r1, r1, r5
 8003a96:	eb62 0206 	sbc.w	r2, r2, r6
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	f04f 0400 	mov.w	r4, #0
 8003aa2:	0194      	lsls	r4, r2, #6
 8003aa4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aa8:	018b      	lsls	r3, r1, #6
 8003aaa:	1a5b      	subs	r3, r3, r1
 8003aac:	eb64 0402 	sbc.w	r4, r4, r2
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	00e2      	lsls	r2, r4, #3
 8003aba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003abe:	00d9      	lsls	r1, r3, #3
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4614      	mov	r4, r2
 8003ac4:	195b      	adds	r3, r3, r5
 8003ac6:	eb44 0406 	adc.w	r4, r4, r6
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	0262      	lsls	r2, r4, #9
 8003ad4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ad8:	0259      	lsls	r1, r3, #9
 8003ada:	460b      	mov	r3, r1
 8003adc:	4614      	mov	r4, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f04f 0400 	mov.w	r4, #0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4623      	mov	r3, r4
 8003aec:	f7fd f8cc 	bl	8000c88 <__aeabi_uldivmod>
 8003af0:	4603      	mov	r3, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e049      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	f04f 0400 	mov.w	r4, #0
 8003b02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	ea03 0501 	and.w	r5, r3, r1
 8003b0e:	ea04 0602 	and.w	r6, r4, r2
 8003b12:	4629      	mov	r1, r5
 8003b14:	4632      	mov	r2, r6
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	f04f 0400 	mov.w	r4, #0
 8003b1e:	0154      	lsls	r4, r2, #5
 8003b20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b24:	014b      	lsls	r3, r1, #5
 8003b26:	4619      	mov	r1, r3
 8003b28:	4622      	mov	r2, r4
 8003b2a:	1b49      	subs	r1, r1, r5
 8003b2c:	eb62 0206 	sbc.w	r2, r2, r6
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	0194      	lsls	r4, r2, #6
 8003b3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b3e:	018b      	lsls	r3, r1, #6
 8003b40:	1a5b      	subs	r3, r3, r1
 8003b42:	eb64 0402 	sbc.w	r4, r4, r2
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	00e2      	lsls	r2, r4, #3
 8003b50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b54:	00d9      	lsls	r1, r3, #3
 8003b56:	460b      	mov	r3, r1
 8003b58:	4614      	mov	r4, r2
 8003b5a:	195b      	adds	r3, r3, r5
 8003b5c:	eb44 0406 	adc.w	r4, r4, r6
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	02a2      	lsls	r2, r4, #10
 8003b6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b6e:	0299      	lsls	r1, r3, #10
 8003b70:	460b      	mov	r3, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	4621      	mov	r1, r4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	f7fd f881 	bl	8000c88 <__aeabi_uldivmod>
 8003b86:	4603      	mov	r3, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	60bb      	str	r3, [r7, #8]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003baa:	60bb      	str	r3, [r7, #8]
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	68bb      	ldr	r3, [r7, #8]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4601      	mov	r1, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5cd3      	ldrb	r3, [r2, r3]
 8003bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08015594 	.word	0x08015594

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5cd3      	ldrb	r3, [r2, r3]
 8003c1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08015594 	.word	0x08015594

08003c2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	220f      	movs	r2, #15
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c3c:	4b12      	ldr	r3, [pc, #72]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RCC_GetClockConfig+0x60>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40023c00 	.word	0x40023c00

08003c90 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b80      	cmp	r3, #128	; 0x80
 8003c9e:	d104      	bne.n	8003caa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003ca0:	f000 f80a 	bl	8003cb8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	701a      	strb	r2, [r3, #0]
  }
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	4002380e 	.word	0x4002380e

08003cb8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e022      	b.n	8003d1e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd ff7a 	bl	8001be4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f815 	bl	8003d28 <HAL_SD_InitCard>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e00a      	b.n	8003d1e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b08e      	sub	sp, #56	; 0x38
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003d44:	2376      	movs	r3, #118	; 0x76
 8003d46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681d      	ldr	r5, [r3, #0]
 8003d4c:	466c      	mov	r4, sp
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d5a:	f107 0308 	add.w	r3, r7, #8
 8003d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d60:	4628      	mov	r0, r5
 8003d62:	f002 fd61 	bl	8006828 <SDIO_Init>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e031      	b.n	8003ddc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_SD_InitCard+0xbc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f002 fd99 	bl	80068ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_SD_InitCard+0xbc>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 ffdc 	bl	8004d4c <SD_PowerON>
 8003d94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e013      	b.n	8003ddc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fefb 	bl	8004bb0 <SD_InitCard>
 8003dba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}
 8003de4:	422580a0 	.word	0x422580a0

08003de8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d107      	bne.n	8003e10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0c9      	b.n	8003fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 80c2 	bne.w	8003fa2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	441a      	add	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d907      	bls.n	8003e42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0b0      	b.n	8003fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2203      	movs	r2, #3
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a50      	ldr	r2, [pc, #320]	; (8003fac <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a4f      	ldr	r2, [pc, #316]	; (8003fb0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003e74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3380      	adds	r3, #128	; 0x80
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	025b      	lsls	r3, r3, #9
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	f7fe fd31 	bl	80028f8 <HAL_DMA_Start_IT>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d017      	beq.n	8003ecc <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a40      	ldr	r2, [pc, #256]	; (8003fb4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e06b      	b.n	8003fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d002      	beq.n	8003ee0 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f002 fd79 	bl	80069e0 <SDMMC_CmdBlockLength>
 8003eee:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	431a      	orrs	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e046      	b.n	8003fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	025b      	lsls	r3, r3, #9
 8003f20:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003f22:	2390      	movs	r3, #144	; 0x90
 8003f24:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003f26:	2302      	movs	r3, #2
 8003f28:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f107 0210 	add.w	r2, r7, #16
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 fd23 	bl	8006988 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d90a      	bls.n	8003f5e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2282      	movs	r2, #130	; 0x82
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 fd87 	bl	8006a68 <SDMMC_CmdReadMultiBlock>
 8003f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f5c:	e009      	b.n	8003f72 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2281      	movs	r2, #129	; 0x81
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 fd5a 	bl	8006a24 <SDMMC_CmdReadSingleBlock>
 8003f70:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e002      	b.n	8003fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3730      	adds	r7, #48	; 0x30
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	080049bf 	.word	0x080049bf
 8003fb0:	08004a31 	.word	0x08004a31
 8003fb4:	004005ff 	.word	0x004005ff
 8003fb8:	4225858c 	.word	0x4225858c

08003fbc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	; 0x30
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ce      	b.n	8004182 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	f040 80c7 	bne.w	8004180 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	429a      	cmp	r2, r3
 8004004:	d907      	bls.n	8004016 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0b5      	b.n	8004182 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2203      	movs	r2, #3
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	4a53      	ldr	r2, [pc, #332]	; (800418c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004048:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	2200      	movs	r2, #0
 8004050:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	025b      	lsls	r3, r3, #9
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004068:	4618      	mov	r0, r3
 800406a:	f002 fcb9 	bl	80069e0 <SDMMC_CmdBlockLength>
 800406e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00f      	beq.n	8004096 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800407c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e075      	b.n	8004182 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d90a      	bls.n	80040b2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	22a0      	movs	r2, #160	; 0xa0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040a8:	4618      	mov	r0, r3
 80040aa:	f002 fd21 	bl	8006af0 <SDMMC_CmdWriteMultiBlock>
 80040ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80040b0:	e009      	b.n	80040c6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2290      	movs	r2, #144	; 0x90
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 fcf4 	bl	8006aac <SDMMC_CmdWriteSingleBlock>
 80040c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a30      	ldr	r2, [pc, #192]	; (8004194 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e047      	b.n	8004182 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3380      	adds	r3, #128	; 0x80
 8004104:	461a      	mov	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	025b      	lsls	r3, r3, #9
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	f7fe fbf4 	bl	80028f8 <HAL_DMA_Start_IT>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01c      	beq.n	8004150 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a19      	ldr	r2, [pc, #100]	; (8004194 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e018      	b.n	8004182 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004150:	f04f 33ff 	mov.w	r3, #4294967295
 8004154:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	025b      	lsls	r3, r3, #9
 800415a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800415c:	2390      	movs	r3, #144	; 0x90
 800415e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004164:	2300      	movs	r3, #0
 8004166:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004168:	2301      	movs	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f107 0210 	add.w	r2, r7, #16
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f002 fc06 	bl	8006988 <SDIO_ConfigData>

      return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3730      	adds	r7, #48	; 0x30
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	08004995 	.word	0x08004995
 8004190:	08004a31 	.word	0x08004a31
 8004194:	004005ff 	.word	0x004005ff
 8004198:	4225858c 	.word	0x4225858c

0800419c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_SD_IRQHandler+0x2e>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 ffd8 	bl	8005178 <SD_Read_IT>
 80041c8:	e165      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 808f 	beq.w	80042f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80041f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80041f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d039      	beq.n	8004286 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d104      	bne.n	8004226 <HAL_SD_IRQHandler+0x8a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f002 fc82 	bl	8006b34 <SDMMC_CmdStopTransfer>
 8004230:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f92f 	bl	80044a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004252:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d104      	bne.n	8004276 <HAL_SD_IRQHandler+0xda>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f003 f8e0 	bl	800743c <HAL_SD_RxCpltCallback>
 800427c:	e10b      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f003 f8d2 	bl	8007428 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004284:	e107      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8102 	beq.w	8004496 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d011      	beq.n	80042c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f002 fc47 	bl	8006b34 <SDMMC_CmdStopTransfer>
 80042a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8f4 	bl	80044a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 80e5 	bne.w	8004496 <HAL_SD_IRQHandler+0x2fa>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f040 80df 	bne.w	8004496 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0208 	bic.w	r2, r2, #8
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f003 f899 	bl	8007428 <HAL_SD_TxCpltCallback>
}
 80042f6:	e0ce      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_SD_IRQHandler+0x17c>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 ff82 	bl	800521a <SD_Write_IT>
 8004316:	e0be      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431e:	f240 233a 	movw	r3, #570	; 0x23a
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b6 	beq.w	8004496 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	f043 0202 	orr.w	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f043 0208 	orr.w	r2, r3, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	f043 0208 	orr.w	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f240 723a 	movw	r2, #1850	; 0x73a
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80043c4:	f023 0302 	bic.w	r3, r3, #2
 80043c8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 fbb0 	bl	8006b34 <SDMMC_CmdStopTransfer>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f855 	bl	80044a8 <HAL_SD_ErrorCallback>
}
 80043fe:	e04a      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d045      	beq.n	8004496 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_SD_IRQHandler+0x282>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d011      	beq.n	8004442 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <HAL_SD_IRQHandler+0x304>)
 8004424:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fb2c 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02f      	beq.n	8004496 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fb4a 	bl	8004ad4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004440:	e029      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_SD_IRQHandler+0x2ba>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <HAL_SD_IRQHandler+0x308>)
 800445c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fb10 	bl	8002a88 <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fb65 	bl	8004b42 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004478:	e00d      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f002 ffc0 	bl	8007414 <HAL_SD_AbortCallback>
}
 8004494:	e7ff      	b.n	8004496 <HAL_SD_IRQHandler+0x2fa>
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	08004ad5 	.word	0x08004ad5
 80044a4:	08004b43 	.word	0x08004b43

080044a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ca:	0f9b      	lsrs	r3, r3, #30
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d6:	0e9b      	lsrs	r3, r3, #26
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e8:	0e1b      	lsrs	r3, r3, #24
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b2da      	uxtb	r2, r3
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	b2da      	uxtb	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	0d1b      	lsrs	r3, r3, #20
 800451e:	b29a      	uxth	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	b2da      	uxtb	r2, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453a:	0bdb      	lsrs	r3, r3, #15
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	0b9b      	lsrs	r3, r3, #14
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004570:	0b1b      	lsrs	r3, r3, #12
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	b2da      	uxtb	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2200      	movs	r2, #0
 8004582:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	2b00      	cmp	r3, #0
 800458a:	d163      	bne.n	8004654 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	009a      	lsls	r2, r3, #2
 8004592:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004596:	4013      	ands	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800459c:	0f92      	lsrs	r2, r2, #30
 800459e:	431a      	orrs	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a8:	0edb      	lsrs	r3, r3, #27
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ba:	0e1b      	lsrs	r3, r3, #24
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045cc:	0d5b      	lsrs	r3, r3, #21
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045de:	0c9b      	lsrs	r3, r3, #18
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f0:	0bdb      	lsrs	r3, r3, #15
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	7e1b      	ldrb	r3, [r3, #24]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	3302      	adds	r3, #2
 8004614:	2201      	movs	r2, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800461e:	fb02 f203 	mul.w	r2, r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	7a1b      	ldrb	r3, [r3, #8]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	2201      	movs	r2, #1
 8004632:	409a      	lsls	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004640:	0a52      	lsrs	r2, r2, #9
 8004642:	fb02 f203 	mul.w	r2, r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004650:	661a      	str	r2, [r3, #96]	; 0x60
 8004652:	e031      	b.n	80046b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	2b01      	cmp	r3, #1
 800465a:	d11d      	bne.n	8004698 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	0c1b      	lsrs	r3, r3, #16
 800466c:	431a      	orrs	r2, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	3301      	adds	r3, #1
 8004678:	029a      	lsls	r2, r3, #10
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	661a      	str	r2, [r3, #96]	; 0x60
 8004696:	e00f      	b.n	80046b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a58      	ldr	r2, [pc, #352]	; (8004800 <HAL_SD_GetCardCSD+0x344>)
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e09d      	b.n	80047f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046bc:	0b9b      	lsrs	r3, r3, #14
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ce:	09db      	lsrs	r3, r3, #7
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	0fdb      	lsrs	r3, r3, #31
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	0f5b      	lsrs	r3, r3, #29
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	b2da      	uxtb	r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	0e9b      	lsrs	r3, r3, #26
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	b2da      	uxtb	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	0d9b      	lsrs	r3, r3, #22
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	b2da      	uxtb	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	0d5b      	lsrs	r3, r3, #21
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	0bdb      	lsrs	r3, r3, #15
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	0b9b      	lsrs	r3, r3, #14
 8004778:	b2db      	uxtb	r3, r3
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478a:	0b5b      	lsrs	r3, r3, #13
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	0b1b      	lsrs	r3, r3, #12
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	0a9b      	lsrs	r3, r3, #10
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	004005ff 	.word	0x004005ff

08004804 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b08e      	sub	sp, #56	; 0x38
 8004860:	af04      	add	r7, sp, #16
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	2b03      	cmp	r3, #3
 8004874:	d02e      	beq.n	80048d4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d106      	bne.n	800488c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	639a      	str	r2, [r3, #56]	; 0x38
 800488a:	e029      	b.n	80048e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d10a      	bne.n	80048aa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fb0f 	bl	8004eb8 <SD_WideBus_Enable>
 800489a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
 80048a8:	e01a      	b.n	80048e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fb4c 	bl	8004f4e <SD_WideBus_Disable>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
 80048c4:	e00c      	b.n	80048e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
 80048d2:	e005      	b.n	80048e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d009      	beq.n	80048fc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e024      	b.n	8004946 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	466c      	mov	r4, sp
 8004924:	f107 0318 	add.w	r3, r7, #24
 8004928:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800492c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004930:	f107 030c 	add.w	r3, r7, #12
 8004934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004936:	4628      	mov	r0, r5
 8004938:	f001 ff76 	bl	8006828 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3728      	adds	r7, #40	; 0x28
 800494a:	46bd      	mov	sp, r7
 800494c:	bdb0      	pop	{r4, r5, r7, pc}
 800494e:	bf00      	nop
 8004950:	004005ff 	.word	0x004005ff

08004954 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa7e 	bl	8004e68 <SD_SendStatus>
 800496c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	0a5b      	lsrs	r3, r3, #9
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800498a:	693b      	ldr	r3, [r7, #16]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	2b82      	cmp	r3, #130	; 0x82
 80049d2:	d111      	bne.n	80049f8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f002 f8ab 	bl	8006b34 <SDMMC_CmdStopTransfer>
 80049de:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f7ff fd58 	bl	80044a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0208 	bic.w	r2, r2, #8
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f002 fd0b 	bl	800743c <HAL_SD_RxCpltCallback>
#endif
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe f9ce 	bl	8002de0 <HAL_DMA_GetError>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d03e      	beq.n	8004ac8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d002      	beq.n	8004a66 <SD_DMAError+0x36>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d12d      	bne.n	8004ac2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <SD_DMAError+0xa0>)
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004a8a:	6978      	ldr	r0, [r7, #20]
 8004a8c:	f7ff ff62 	bl	8004954 <HAL_SD_GetCardState>
 8004a90:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d002      	beq.n	8004a9e <SD_DMAError+0x6e>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b05      	cmp	r3, #5
 8004a9c:	d10a      	bne.n	8004ab4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f002 f846 	bl	8006b34 <SDMMC_CmdStopTransfer>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004ac2:	6978      	ldr	r0, [r7, #20]
 8004ac4:	f7ff fcf0 	bl	80044a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	004005ff 	.word	0x004005ff

08004ad4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff ff31 	bl	8004954 <HAL_SD_GetCardState>
 8004af2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d002      	beq.n	8004b0e <SD_DMATxAbort+0x3a>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d10a      	bne.n	8004b24 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 f80e 	bl	8006b34 <SDMMC_CmdStopTransfer>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f002 fc71 	bl	8007414 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b32:	e002      	b.n	8004b3a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff fcb7 	bl	80044a8 <HAL_SD_ErrorCallback>
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f7ff fefa 	bl	8004954 <HAL_SD_GetCardState>
 8004b60:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d002      	beq.n	8004b7c <SD_DMARxAbort+0x3a>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b05      	cmp	r3, #5
 8004b7a:	d10a      	bne.n	8004b92 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 ffd7 	bl	8006b34 <SDMMC_CmdStopTransfer>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f002 fc3a 	bl	8007414 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004ba0:	e002      	b.n	8004ba8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff fc80 	bl	80044a8 <HAL_SD_ErrorCallback>
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004bb0:	b5b0      	push	{r4, r5, r7, lr}
 8004bb2:	b094      	sub	sp, #80	; 0x50
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 fe89 	bl	80068d8 <SDIO_GetPowerState>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bd0:	e0b7      	b.n	8004d42 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d02f      	beq.n	8004c3a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f002 f8b2 	bl	8006d48 <SDMMC_CmdSendCID>
 8004be4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <SD_InitCard+0x40>
    {
      return errorstate;
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	e0a8      	b.n	8004d42 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 feb3 	bl	8006962 <SDIO_GetResponse>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2104      	movs	r1, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 feaa 	bl	8006962 <SDIO_GetResponse>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2108      	movs	r1, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fea1 	bl	8006962 <SDIO_GetResponse>
 8004c20:	4602      	mov	r2, r0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	210c      	movs	r1, #12
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fe98 	bl	8006962 <SDIO_GetResponse>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d00d      	beq.n	8004c5e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f107 020e 	add.w	r2, r7, #14
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f002 f8b8 	bl	8006dc2 <SDMMC_CmdSetRelAdd>
 8004c52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <SD_InitCard+0xae>
    {
      return errorstate;
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	e071      	b.n	8004d42 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d036      	beq.n	8004cd4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c66:	89fb      	ldrh	r3, [r7, #14]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f002 f882 	bl	8006d84 <SDMMC_CmdSendCSD>
 8004c80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8a:	e05a      	b.n	8004d42 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2100      	movs	r1, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fe65 	bl	8006962 <SDIO_GetResponse>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f001 fe5c 	bl	8006962 <SDIO_GetResponse>
 8004caa:	4602      	mov	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fe53 	bl	8006962 <SDIO_GetResponse>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	210c      	movs	r1, #12
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fe4a 	bl	8006962 <SDIO_GetResponse>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2104      	movs	r1, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fe41 	bl	8006962 <SDIO_GetResponse>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	0d1a      	lsrs	r2, r3, #20
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ce8:	f107 0310 	add.w	r3, r7, #16
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fbe4 	bl	80044bc <HAL_SD_GetCardCSD>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004cfe:	e020      	b.n	8004d42 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	4608      	mov	r0, r1
 8004d14:	f001 ff30 	bl	8006b78 <SDMMC_CmdSelDesel>
 8004d18:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <SD_InitCard+0x174>
  {
    return errorstate;
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	e00e      	b.n	8004d42 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681d      	ldr	r5, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	466c      	mov	r4, sp
 8004d2c:	f103 0210 	add.w	r2, r3, #16
 8004d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d36:	3304      	adds	r3, #4
 8004d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f001 fd74 	bl	8006828 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3740      	adds	r7, #64	; 0x40
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d4c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f001 ff2a 	bl	8006bbe <SDMMC_CmdGoIdleState>
 8004d6a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	e072      	b.n	8004e5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 ff3d 	bl	8006bfa <SDMMC_CmdOperCond>
 8004d80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 ff13 	bl	8006bbe <SDMMC_CmdGoIdleState>
 8004d98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <SD_PowerON+0x5e>
    {
      return errorstate;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	e05b      	b.n	8004e5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d137      	bne.n	8004e22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 ff3d 	bl	8006c38 <SDMMC_CmdAppCommand>
 8004dbe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02d      	beq.n	8004e22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dca:	e047      	b.n	8004e5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 ff30 	bl	8006c38 <SDMMC_CmdAppCommand>
 8004dd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SD_PowerON+0x98>
    {
      return errorstate;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	e03b      	b.n	8004e5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	491e      	ldr	r1, [pc, #120]	; (8004e64 <SD_PowerON+0x118>)
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 ff46 	bl	8006c7c <SDMMC_CmdAppOperCommand>
 8004df0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dfc:	e02e      	b.n	8004e5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 fdac 	bl	8006962 <SDIO_GetResponse>
 8004e0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	0fdb      	lsrs	r3, r3, #31
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <SD_PowerON+0xcc>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <SD_PowerON+0xce>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]

    count++;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d802      	bhi.n	8004e32 <SD_PowerON+0xe6>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0cc      	beq.n	8004dcc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d902      	bls.n	8004e42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e40:	e00c      	b.n	8004e5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	645a      	str	r2, [r3, #68]	; 0x44
 8004e52:	e002      	b.n	8004e5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	c1100000 	.word	0xc1100000

08004e68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e7c:	e018      	b.n	8004eb0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f001 ffba 	bl	8006e04 <SDMMC_CmdSendStatus>
 8004e90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	e009      	b.n	8004eb0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fd5d 	bl	8006962 <SDIO_GetResponse>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 fd47 	bl	8006962 <SDIO_GetResponse>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ede:	d102      	bne.n	8004ee6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ee0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ee4:	e02f      	b.n	8004f46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f879 	bl	8004fe4 <SD_FindSCR>
 8004ef2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	e023      	b.n	8004f46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01c      	beq.n	8004f42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f001 fe8f 	bl	8006c38 <SDMMC_CmdAppCommand>
 8004f1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	e00f      	b.n	8004f46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 fec8 	bl	8006cc2 <SDMMC_CmdBusWidth>
 8004f32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	e003      	b.n	8004f46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e001      	b.n	8004f46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fcfc 	bl	8006962 <SDIO_GetResponse>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f74:	d102      	bne.n	8004f7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f7a:	e02f      	b.n	8004fdc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	4619      	mov	r1, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f82e 	bl	8004fe4 <SD_FindSCR>
 8004f88:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	e023      	b.n	8004fdc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01c      	beq.n	8004fd8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f001 fe44 	bl	8006c38 <SDMMC_CmdAppCommand>
 8004fb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	e00f      	b.n	8004fdc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fe7d 	bl	8006cc2 <SDMMC_CmdBusWidth>
 8004fc8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	e003      	b.n	8004fdc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e001      	b.n	8004fdc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b08f      	sub	sp, #60	; 0x3c
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004fee:	f7fd fa8f 	bl	8002510 <HAL_GetTick>
 8004ff2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2108      	movs	r1, #8
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fce8 	bl	80069e0 <SDMMC_CmdBlockLength>
 8005010:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	e0a9      	b.n	8005170 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f001 fe05 	bl	8006c38 <SDMMC_CmdAppCommand>
 800502e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	e09a      	b.n	8005170 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295
 800503e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005040:	2308      	movs	r3, #8
 8005042:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005044:	2330      	movs	r3, #48	; 0x30
 8005046:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005048:	2302      	movs	r3, #2
 800504a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800504c:	2300      	movs	r3, #0
 800504e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005050:	2301      	movs	r3, #1
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f107 0210 	add.w	r2, r7, #16
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f001 fc92 	bl	8006988 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fe4c 	bl	8006d06 <SDMMC_CmdSendSCR>
 800506e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	d022      	beq.n	80050bc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	e07a      	b.n	8005170 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00e      	beq.n	80050a6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6819      	ldr	r1, [r3, #0]
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	f107 0208 	add.w	r2, r7, #8
 8005094:	18d4      	adds	r4, r2, r3
 8005096:	4608      	mov	r0, r1
 8005098:	f001 fbf1 	bl	800687e <SDIO_ReadFIFO>
 800509c:	4603      	mov	r3, r0
 800509e:	6023      	str	r3, [r4, #0]
      index++;
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	3301      	adds	r3, #1
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80050a6:	f7fd fa33 	bl	8002510 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d102      	bne.n	80050bc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80050b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050ba:	e059      	b.n	8005170 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c2:	f240 432a 	movw	r3, #1066	; 0x42a
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0d6      	beq.n	800507a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2208      	movs	r2, #8
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80050e2:	2308      	movs	r3, #8
 80050e4:	e044      	b.n	8005170 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2202      	movs	r2, #2
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80050fc:	2302      	movs	r3, #2
 80050fe:	e037      	b.n	8005170 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2220      	movs	r2, #32
 8005114:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005116:	2320      	movs	r3, #32
 8005118:	e02a      	b.n	8005170 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	061a      	lsls	r2, r3, #24
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005130:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800513a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	0e1b      	lsrs	r3, r3, #24
 8005140:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	601a      	str	r2, [r3, #0]
    scr++;
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	3304      	adds	r3, #4
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	061a      	lsls	r2, r3, #24
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005158:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005162:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	0e1b      	lsrs	r3, r3, #24
 8005168:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	373c      	adds	r7, #60	; 0x3c
 8005174:	46bd      	mov	sp, r7
 8005176:	bd90      	pop	{r4, r7, pc}

08005178 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d03f      	beq.n	8005212 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e033      	b.n	8005200 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fb6e 	bl	800687e <SDIO_ReadFIFO>
 80051a2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3301      	adds	r3, #1
 80051b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	0e1b      	lsrs	r3, r3, #24
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	3301      	adds	r3, #1
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b07      	cmp	r3, #7
 8005204:	d9c8      	bls.n	8005198 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b086      	sub	sp, #24
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d043      	beq.n	80052bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e037      	b.n	80052aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3b01      	subs	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	021a      	lsls	r2, r3, #8
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4313      	orrs	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	3b01      	subs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	041a      	lsls	r2, r3, #16
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3b01      	subs	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	061a      	lsls	r2, r3, #24
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3b01      	subs	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f107 0208 	add.w	r2, r7, #8
 800529c:	4611      	mov	r1, r2
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 fafa 	bl	8006898 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	3301      	adds	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b07      	cmp	r3, #7
 80052ae:	d9c4      	bls.n	800523a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e01d      	b.n	8005312 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f815 	bl	800531a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 f968 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b06      	cmp	r3, #6
 8005356:	d007      	beq.n	8005368 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d122      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d11b      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0202 	mvn.w	r2, #2
 80053a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8ee 	bl	800559a <HAL_TIM_IC_CaptureCallback>
 80053be:	e005      	b.n	80053cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8e0 	bl	8005586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8f1 	bl	80055ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d122      	bne.n	8005426 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d11b      	bne.n	8005426 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0204 	mvn.w	r2, #4
 80053f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8c4 	bl	800559a <HAL_TIM_IC_CaptureCallback>
 8005412:	e005      	b.n	8005420 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f8b6 	bl	8005586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8c7 	bl	80055ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d122      	bne.n	800547a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b08      	cmp	r3, #8
 8005440:	d11b      	bne.n	800547a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f06f 0208 	mvn.w	r2, #8
 800544a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2204      	movs	r2, #4
 8005450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f89a 	bl	800559a <HAL_TIM_IC_CaptureCallback>
 8005466:	e005      	b.n	8005474 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f88c 	bl	8005586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f89d 	bl	80055ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d122      	bne.n	80054ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b10      	cmp	r3, #16
 8005494:	d11b      	bne.n	80054ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0210 	mvn.w	r2, #16
 800549e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2208      	movs	r2, #8
 80054a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f870 	bl	800559a <HAL_TIM_IC_CaptureCallback>
 80054ba:	e005      	b.n	80054c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f862 	bl	8005586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f873 	bl	80055ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10e      	bne.n	80054fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d107      	bne.n	80054fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f06f 0201 	mvn.w	r2, #1
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fc fb3f 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d10e      	bne.n	8005526 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005512:	2b80      	cmp	r3, #128	; 0x80
 8005514:	d107      	bne.n	8005526 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800551e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f903 	bl	800572c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d10e      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d107      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f838 	bl	80055c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d10e      	bne.n	800557e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b20      	cmp	r3, #32
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0220 	mvn.w	r2, #32
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f8cd 	bl	8005718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a40      	ldr	r2, [pc, #256]	; (80056ec <TIM_Base_SetConfig+0x114>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d013      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3d      	ldr	r2, [pc, #244]	; (80056f0 <TIM_Base_SetConfig+0x118>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3c      	ldr	r2, [pc, #240]	; (80056f4 <TIM_Base_SetConfig+0x11c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <TIM_Base_SetConfig+0x120>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3a      	ldr	r2, [pc, #232]	; (80056fc <TIM_Base_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2f      	ldr	r2, [pc, #188]	; (80056ec <TIM_Base_SetConfig+0x114>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d02b      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d027      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <TIM_Base_SetConfig+0x118>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d023      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2b      	ldr	r2, [pc, #172]	; (80056f4 <TIM_Base_SetConfig+0x11c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01f      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <TIM_Base_SetConfig+0x120>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01b      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a29      	ldr	r2, [pc, #164]	; (80056fc <TIM_Base_SetConfig+0x124>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d017      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a28      	ldr	r2, [pc, #160]	; (8005700 <TIM_Base_SetConfig+0x128>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a27      	ldr	r2, [pc, #156]	; (8005704 <TIM_Base_SetConfig+0x12c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00f      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a26      	ldr	r2, [pc, #152]	; (8005708 <TIM_Base_SetConfig+0x130>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a25      	ldr	r2, [pc, #148]	; (800570c <TIM_Base_SetConfig+0x134>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a24      	ldr	r2, [pc, #144]	; (8005710 <TIM_Base_SetConfig+0x138>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a23      	ldr	r2, [pc, #140]	; (8005714 <TIM_Base_SetConfig+0x13c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <TIM_Base_SetConfig+0x114>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0xf8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0c      	ldr	r2, [pc, #48]	; (80056fc <TIM_Base_SetConfig+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d103      	bne.n	80056d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	615a      	str	r2, [r3, #20]
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800
 80056f8:	40000c00 	.word	0x40000c00
 80056fc:	40010400 	.word	0x40010400
 8005700:	40014000 	.word	0x40014000
 8005704:	40014400 	.word	0x40014400
 8005708:	40014800 	.word	0x40014800
 800570c:	40001800 	.word	0x40001800
 8005710:	40001c00 	.word	0x40001c00
 8005714:	40002000 	.word	0x40002000

08005718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e03f      	b.n	80057d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7fc fcec 	bl	8002144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	; 0x24
 8005770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fcd3 	bl	8006130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af02      	add	r7, sp, #8
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	f040 8083 	bne.w	8005902 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_UART_Transmit+0x2e>
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e07b      	b.n	8005904 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_UART_Transmit+0x40>
 8005816:	2302      	movs	r3, #2
 8005818:	e074      	b.n	8005904 <HAL_UART_Transmit+0x12a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2221      	movs	r2, #33	; 0x21
 800582c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005830:	f7fc fe6e 	bl	8002510 <HAL_GetTick>
 8005834:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800584a:	e042      	b.n	80058d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005862:	d122      	bne.n	80058aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2200      	movs	r2, #0
 800586c:	2180      	movs	r1, #128	; 0x80
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 fadc 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e042      	b.n	8005904 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005890:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d103      	bne.n	80058a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3302      	adds	r3, #2
 800589e:	60bb      	str	r3, [r7, #8]
 80058a0:	e017      	b.n	80058d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60bb      	str	r3, [r7, #8]
 80058a8:	e013      	b.n	80058d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fab9 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e01f      	b.n	8005904 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	60ba      	str	r2, [r7, #8]
 80058ca:	781a      	ldrb	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1b7      	bne.n	800584c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 faa0 	bl	8005e2c <UART_WaitOnFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e006      	b.n	8005904 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2220      	movs	r2, #32
 80058fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e000      	b.n	8005904 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005902:	2302      	movs	r3, #2
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	d166      	bne.n	80059f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_UART_Receive_DMA+0x26>
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e05f      	b.n	80059f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_UART_Receive_DMA+0x38>
 8005940:	2302      	movs	r3, #2
 8005942:	e058      	b.n	80059f6 <HAL_UART_Receive_DMA+0xea>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	88fa      	ldrh	r2, [r7, #6]
 8005956:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2222      	movs	r2, #34	; 0x22
 8005962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <HAL_UART_Receive_DMA+0xf4>)
 800596c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <HAL_UART_Receive_DMA+0xf8>)
 8005974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	4a23      	ldr	r2, [pc, #140]	; (8005a08 <HAL_UART_Receive_DMA+0xfc>)
 800597c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	2200      	movs	r2, #0
 8005984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005986:	f107 0308 	add.w	r3, r7, #8
 800598a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	f7fc ffab 	bl	80028f8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	08005d15 	.word	0x08005d15
 8005a04:	08005d7d 	.word	0x08005d7d
 8005a08:	08005d99 	.word	0x08005d99

08005a0c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b21      	cmp	r3, #33	; 0x21
 8005a38:	d116      	bne.n	8005a68 <HAL_UART_DMAStop+0x5c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d013      	beq.n	8005a68 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a4e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fc ffa3 	bl	80029a8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa2c 	bl	8005ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b22      	cmp	r3, #34	; 0x22
 8005a88:	d116      	bne.n	8005ab8 <HAL_UART_DMAStop+0xac>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d013      	beq.n	8005ab8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fc ff7b 	bl	80029a8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa1a 	bl	8005eec <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_UART_IRQHandler+0x52>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa8c 	bl	800602c <UART_Receive_IT>
      return;
 8005b14:	e0d1      	b.n	8005cba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80b0 	beq.w	8005c7e <HAL_UART_IRQHandler+0x1ba>
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_UART_IRQHandler+0x70>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80a5 	beq.w	8005c7e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_UART_IRQHandler+0x90>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4c:	f043 0201 	orr.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_UART_IRQHandler+0xb0>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	f043 0202 	orr.w	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HAL_UART_IRQHandler+0xd0>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	f043 0204 	orr.w	r2, r3, #4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00f      	beq.n	8005bbe <HAL_UART_IRQHandler+0xfa>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <HAL_UART_IRQHandler+0xee>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb6:	f043 0208 	orr.w	r2, r3, #8
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d078      	beq.n	8005cb8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f003 0320 	and.w	r3, r3, #32
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <HAL_UART_IRQHandler+0x11c>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	f003 0320 	and.w	r3, r3, #32
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa26 	bl	800602c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d102      	bne.n	8005c08 <HAL_UART_IRQHandler+0x144>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d031      	beq.n	8005c6c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f96f 	bl	8005eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d123      	bne.n	8005c64 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c2a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <HAL_UART_IRQHandler+0x1fc>)
 8005c3a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fc ff21 	bl	8002a88 <HAL_DMA_Abort_IT>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d016      	beq.n	8005c7a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c56:	4610      	mov	r0, r2
 8005c58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5a:	e00e      	b.n	8005c7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f84f 	bl	8005d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c62:	e00a      	b.n	8005c7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f84b 	bl	8005d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6a:	e006      	b.n	8005c7a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f847 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005c78:	e01e      	b.n	8005cb8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c7a:	bf00      	nop
    return;
 8005c7c:	e01c      	b.n	8005cb8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1d6>
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f95c 	bl	8005f50 <UART_Transmit_IT>
    return;
 8005c98:	e00f      	b.n	8005cba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_UART_IRQHandler+0x1f6>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9a4 	bl	8005ffc <UART_EndTransmit_IT>
    return;
 8005cb4:	bf00      	nop
 8005cb6:	e000      	b.n	8005cba <HAL_UART_IRQHandler+0x1f6>
    return;
 8005cb8:	bf00      	nop
  }
}
 8005cba:	3720      	adds	r7, #32
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	08005f29 	.word	0x08005f29

08005cc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11e      	bne.n	8005d6e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d44:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d64:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff ffb2 	bl	8005cd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff ffae 	bl	8005cec <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b21      	cmp	r3, #33	; 0x21
 8005dca:	d108      	bne.n	8005dde <UART_DMAError+0x46>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005dd8:	68b8      	ldr	r0, [r7, #8]
 8005dda:	f000 f871 	bl	8005ec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b22      	cmp	r3, #34	; 0x22
 8005dfe:	d108      	bne.n	8005e12 <UART_DMAError+0x7a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005e0c:	68b8      	ldr	r0, [r7, #8]
 8005e0e:	f000 f86d 	bl	8005eec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	f043 0210 	orr.w	r2, r3, #16
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1e:	68b8      	ldr	r0, [r7, #8]
 8005e20:	f7ff ff6e 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3c:	e02c      	b.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e44:	d028      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e4c:	f7fc fb60 	bl	8002510 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d21d      	bcs.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e00f      	b.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d0c3      	beq.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ed6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f7ff fedc 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b21      	cmp	r3, #33	; 0x21
 8005f62:	d144      	bne.n	8005fee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d11a      	bne.n	8005fa4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f82:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]
 8005f96:	e00e      	b.n	8005fb6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]
 8005fa2:	e008      	b.n	8005fb6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6211      	str	r1, [r2, #32]
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e000      	b.n	8005ff0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005fee:	2302      	movs	r3, #2
  }
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006012:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff fe51 	bl	8005cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	d171      	bne.n	8006124 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006048:	d123      	bne.n	8006092 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10e      	bne.n	8006076 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	1c9a      	adds	r2, r3, #2
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
 8006074:	e029      	b.n	80060ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	b29b      	uxth	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28
 8006090:	e01b      	b.n	80060ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6858      	ldr	r0, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	1c59      	adds	r1, r3, #1
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6291      	str	r1, [r2, #40]	; 0x28
 80060aa:	b2c2      	uxtb	r2, r0
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e00c      	b.n	80060ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	1c58      	adds	r0, r3, #1
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	6288      	str	r0, [r1, #40]	; 0x28
 80060c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4619      	mov	r1, r3
 80060d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d120      	bne.n	8006120 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0220 	bic.w	r2, r2, #32
 80060ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fdde 	bl	8005cd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e002      	b.n	8006126 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006172:	f023 030c 	bic.w	r3, r3, #12
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	430b      	orrs	r3, r1
 800617e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	f040 818b 	bne.w	80064b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4ac1      	ldr	r2, [pc, #772]	; (80064ac <UART_SetConfig+0x37c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0x88>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4abf      	ldr	r2, [pc, #764]	; (80064b0 <UART_SetConfig+0x380>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f040 80bd 	bne.w	8006332 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7fd fd24 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 80061bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	461d      	mov	r5, r3
 80061c2:	f04f 0600 	mov.w	r6, #0
 80061c6:	46a8      	mov	r8, r5
 80061c8:	46b1      	mov	r9, r6
 80061ca:	eb18 0308 	adds.w	r3, r8, r8
 80061ce:	eb49 0409 	adc.w	r4, r9, r9
 80061d2:	4698      	mov	r8, r3
 80061d4:	46a1      	mov	r9, r4
 80061d6:	eb18 0805 	adds.w	r8, r8, r5
 80061da:	eb49 0906 	adc.w	r9, r9, r6
 80061de:	f04f 0100 	mov.w	r1, #0
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061f2:	4688      	mov	r8, r1
 80061f4:	4691      	mov	r9, r2
 80061f6:	eb18 0005 	adds.w	r0, r8, r5
 80061fa:	eb49 0106 	adc.w	r1, r9, r6
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	461d      	mov	r5, r3
 8006204:	f04f 0600 	mov.w	r6, #0
 8006208:	196b      	adds	r3, r5, r5
 800620a:	eb46 0406 	adc.w	r4, r6, r6
 800620e:	461a      	mov	r2, r3
 8006210:	4623      	mov	r3, r4
 8006212:	f7fa fd39 	bl	8000c88 <__aeabi_uldivmod>
 8006216:	4603      	mov	r3, r0
 8006218:	460c      	mov	r4, r1
 800621a:	461a      	mov	r2, r3
 800621c:	4ba5      	ldr	r3, [pc, #660]	; (80064b4 <UART_SetConfig+0x384>)
 800621e:	fba3 2302 	umull	r2, r3, r3, r2
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	461d      	mov	r5, r3
 800622c:	f04f 0600 	mov.w	r6, #0
 8006230:	46a9      	mov	r9, r5
 8006232:	46b2      	mov	sl, r6
 8006234:	eb19 0309 	adds.w	r3, r9, r9
 8006238:	eb4a 040a 	adc.w	r4, sl, sl
 800623c:	4699      	mov	r9, r3
 800623e:	46a2      	mov	sl, r4
 8006240:	eb19 0905 	adds.w	r9, r9, r5
 8006244:	eb4a 0a06 	adc.w	sl, sl, r6
 8006248:	f04f 0100 	mov.w	r1, #0
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800625c:	4689      	mov	r9, r1
 800625e:	4692      	mov	sl, r2
 8006260:	eb19 0005 	adds.w	r0, r9, r5
 8006264:	eb4a 0106 	adc.w	r1, sl, r6
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	461d      	mov	r5, r3
 800626e:	f04f 0600 	mov.w	r6, #0
 8006272:	196b      	adds	r3, r5, r5
 8006274:	eb46 0406 	adc.w	r4, r6, r6
 8006278:	461a      	mov	r2, r3
 800627a:	4623      	mov	r3, r4
 800627c:	f7fa fd04 	bl	8000c88 <__aeabi_uldivmod>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	461a      	mov	r2, r3
 8006286:	4b8b      	ldr	r3, [pc, #556]	; (80064b4 <UART_SetConfig+0x384>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	; 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	3332      	adds	r3, #50	; 0x32
 800629a:	4a86      	ldr	r2, [pc, #536]	; (80064b4 <UART_SetConfig+0x384>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062a8:	4498      	add	r8, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	461d      	mov	r5, r3
 80062ae:	f04f 0600 	mov.w	r6, #0
 80062b2:	46a9      	mov	r9, r5
 80062b4:	46b2      	mov	sl, r6
 80062b6:	eb19 0309 	adds.w	r3, r9, r9
 80062ba:	eb4a 040a 	adc.w	r4, sl, sl
 80062be:	4699      	mov	r9, r3
 80062c0:	46a2      	mov	sl, r4
 80062c2:	eb19 0905 	adds.w	r9, r9, r5
 80062c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062de:	4689      	mov	r9, r1
 80062e0:	4692      	mov	sl, r2
 80062e2:	eb19 0005 	adds.w	r0, r9, r5
 80062e6:	eb4a 0106 	adc.w	r1, sl, r6
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	461d      	mov	r5, r3
 80062f0:	f04f 0600 	mov.w	r6, #0
 80062f4:	196b      	adds	r3, r5, r5
 80062f6:	eb46 0406 	adc.w	r4, r6, r6
 80062fa:	461a      	mov	r2, r3
 80062fc:	4623      	mov	r3, r4
 80062fe:	f7fa fcc3 	bl	8000c88 <__aeabi_uldivmod>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	461a      	mov	r2, r3
 8006308:	4b6a      	ldr	r3, [pc, #424]	; (80064b4 <UART_SetConfig+0x384>)
 800630a:	fba3 1302 	umull	r1, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	2164      	movs	r1, #100	; 0x64
 8006312:	fb01 f303 	mul.w	r3, r1, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	3332      	adds	r3, #50	; 0x32
 800631c:	4a65      	ldr	r2, [pc, #404]	; (80064b4 <UART_SetConfig+0x384>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	f003 0207 	and.w	r2, r3, #7
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4442      	add	r2, r8
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	e26f      	b.n	8006812 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006332:	f7fd fc53 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8006336:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	461d      	mov	r5, r3
 800633c:	f04f 0600 	mov.w	r6, #0
 8006340:	46a8      	mov	r8, r5
 8006342:	46b1      	mov	r9, r6
 8006344:	eb18 0308 	adds.w	r3, r8, r8
 8006348:	eb49 0409 	adc.w	r4, r9, r9
 800634c:	4698      	mov	r8, r3
 800634e:	46a1      	mov	r9, r4
 8006350:	eb18 0805 	adds.w	r8, r8, r5
 8006354:	eb49 0906 	adc.w	r9, r9, r6
 8006358:	f04f 0100 	mov.w	r1, #0
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006364:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006368:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800636c:	4688      	mov	r8, r1
 800636e:	4691      	mov	r9, r2
 8006370:	eb18 0005 	adds.w	r0, r8, r5
 8006374:	eb49 0106 	adc.w	r1, r9, r6
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	461d      	mov	r5, r3
 800637e:	f04f 0600 	mov.w	r6, #0
 8006382:	196b      	adds	r3, r5, r5
 8006384:	eb46 0406 	adc.w	r4, r6, r6
 8006388:	461a      	mov	r2, r3
 800638a:	4623      	mov	r3, r4
 800638c:	f7fa fc7c 	bl	8000c88 <__aeabi_uldivmod>
 8006390:	4603      	mov	r3, r0
 8006392:	460c      	mov	r4, r1
 8006394:	461a      	mov	r2, r3
 8006396:	4b47      	ldr	r3, [pc, #284]	; (80064b4 <UART_SetConfig+0x384>)
 8006398:	fba3 2302 	umull	r2, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	461d      	mov	r5, r3
 80063a6:	f04f 0600 	mov.w	r6, #0
 80063aa:	46a9      	mov	r9, r5
 80063ac:	46b2      	mov	sl, r6
 80063ae:	eb19 0309 	adds.w	r3, r9, r9
 80063b2:	eb4a 040a 	adc.w	r4, sl, sl
 80063b6:	4699      	mov	r9, r3
 80063b8:	46a2      	mov	sl, r4
 80063ba:	eb19 0905 	adds.w	r9, r9, r5
 80063be:	eb4a 0a06 	adc.w	sl, sl, r6
 80063c2:	f04f 0100 	mov.w	r1, #0
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063d6:	4689      	mov	r9, r1
 80063d8:	4692      	mov	sl, r2
 80063da:	eb19 0005 	adds.w	r0, r9, r5
 80063de:	eb4a 0106 	adc.w	r1, sl, r6
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	461d      	mov	r5, r3
 80063e8:	f04f 0600 	mov.w	r6, #0
 80063ec:	196b      	adds	r3, r5, r5
 80063ee:	eb46 0406 	adc.w	r4, r6, r6
 80063f2:	461a      	mov	r2, r3
 80063f4:	4623      	mov	r3, r4
 80063f6:	f7fa fc47 	bl	8000c88 <__aeabi_uldivmod>
 80063fa:	4603      	mov	r3, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	461a      	mov	r2, r3
 8006400:	4b2c      	ldr	r3, [pc, #176]	; (80064b4 <UART_SetConfig+0x384>)
 8006402:	fba3 1302 	umull	r1, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2164      	movs	r1, #100	; 0x64
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <UART_SetConfig+0x384>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006422:	4498      	add	r8, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	461d      	mov	r5, r3
 8006428:	f04f 0600 	mov.w	r6, #0
 800642c:	46a9      	mov	r9, r5
 800642e:	46b2      	mov	sl, r6
 8006430:	eb19 0309 	adds.w	r3, r9, r9
 8006434:	eb4a 040a 	adc.w	r4, sl, sl
 8006438:	4699      	mov	r9, r3
 800643a:	46a2      	mov	sl, r4
 800643c:	eb19 0905 	adds.w	r9, r9, r5
 8006440:	eb4a 0a06 	adc.w	sl, sl, r6
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006458:	4689      	mov	r9, r1
 800645a:	4692      	mov	sl, r2
 800645c:	eb19 0005 	adds.w	r0, r9, r5
 8006460:	eb4a 0106 	adc.w	r1, sl, r6
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	461d      	mov	r5, r3
 800646a:	f04f 0600 	mov.w	r6, #0
 800646e:	196b      	adds	r3, r5, r5
 8006470:	eb46 0406 	adc.w	r4, r6, r6
 8006474:	461a      	mov	r2, r3
 8006476:	4623      	mov	r3, r4
 8006478:	f7fa fc06 	bl	8000c88 <__aeabi_uldivmod>
 800647c:	4603      	mov	r3, r0
 800647e:	460c      	mov	r4, r1
 8006480:	461a      	mov	r2, r3
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <UART_SetConfig+0x384>)
 8006484:	fba3 1302 	umull	r1, r3, r3, r2
 8006488:	095b      	lsrs	r3, r3, #5
 800648a:	2164      	movs	r1, #100	; 0x64
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	3332      	adds	r3, #50	; 0x32
 8006496:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <UART_SetConfig+0x384>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	f003 0207 	and.w	r2, r3, #7
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4442      	add	r2, r8
 80064a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80064aa:	e1b2      	b.n	8006812 <UART_SetConfig+0x6e2>
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4ad7      	ldr	r2, [pc, #860]	; (800681c <UART_SetConfig+0x6ec>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d005      	beq.n	80064ce <UART_SetConfig+0x39e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4ad6      	ldr	r2, [pc, #856]	; (8006820 <UART_SetConfig+0x6f0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	f040 80d1 	bne.w	8006670 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80064ce:	f7fd fb99 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 80064d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	469a      	mov	sl, r3
 80064d8:	f04f 0b00 	mov.w	fp, #0
 80064dc:	46d0      	mov	r8, sl
 80064de:	46d9      	mov	r9, fp
 80064e0:	eb18 0308 	adds.w	r3, r8, r8
 80064e4:	eb49 0409 	adc.w	r4, r9, r9
 80064e8:	4698      	mov	r8, r3
 80064ea:	46a1      	mov	r9, r4
 80064ec:	eb18 080a 	adds.w	r8, r8, sl
 80064f0:	eb49 090b 	adc.w	r9, r9, fp
 80064f4:	f04f 0100 	mov.w	r1, #0
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006500:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006504:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006508:	4688      	mov	r8, r1
 800650a:	4691      	mov	r9, r2
 800650c:	eb1a 0508 	adds.w	r5, sl, r8
 8006510:	eb4b 0609 	adc.w	r6, fp, r9
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	4619      	mov	r1, r3
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	f04f 0400 	mov.w	r4, #0
 8006526:	0094      	lsls	r4, r2, #2
 8006528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800652c:	008b      	lsls	r3, r1, #2
 800652e:	461a      	mov	r2, r3
 8006530:	4623      	mov	r3, r4
 8006532:	4628      	mov	r0, r5
 8006534:	4631      	mov	r1, r6
 8006536:	f7fa fba7 	bl	8000c88 <__aeabi_uldivmod>
 800653a:	4603      	mov	r3, r0
 800653c:	460c      	mov	r4, r1
 800653e:	461a      	mov	r2, r3
 8006540:	4bb8      	ldr	r3, [pc, #736]	; (8006824 <UART_SetConfig+0x6f4>)
 8006542:	fba3 2302 	umull	r2, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	469b      	mov	fp, r3
 8006550:	f04f 0c00 	mov.w	ip, #0
 8006554:	46d9      	mov	r9, fp
 8006556:	46e2      	mov	sl, ip
 8006558:	eb19 0309 	adds.w	r3, r9, r9
 800655c:	eb4a 040a 	adc.w	r4, sl, sl
 8006560:	4699      	mov	r9, r3
 8006562:	46a2      	mov	sl, r4
 8006564:	eb19 090b 	adds.w	r9, r9, fp
 8006568:	eb4a 0a0c 	adc.w	sl, sl, ip
 800656c:	f04f 0100 	mov.w	r1, #0
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800657c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006580:	4689      	mov	r9, r1
 8006582:	4692      	mov	sl, r2
 8006584:	eb1b 0509 	adds.w	r5, fp, r9
 8006588:	eb4c 060a 	adc.w	r6, ip, sl
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	4619      	mov	r1, r3
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	f04f 0400 	mov.w	r4, #0
 800659e:	0094      	lsls	r4, r2, #2
 80065a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065a4:	008b      	lsls	r3, r1, #2
 80065a6:	461a      	mov	r2, r3
 80065a8:	4623      	mov	r3, r4
 80065aa:	4628      	mov	r0, r5
 80065ac:	4631      	mov	r1, r6
 80065ae:	f7fa fb6b 	bl	8000c88 <__aeabi_uldivmod>
 80065b2:	4603      	mov	r3, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	461a      	mov	r2, r3
 80065b8:	4b9a      	ldr	r3, [pc, #616]	; (8006824 <UART_SetConfig+0x6f4>)
 80065ba:	fba3 1302 	umull	r1, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	2164      	movs	r1, #100	; 0x64
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	3332      	adds	r3, #50	; 0x32
 80065cc:	4a95      	ldr	r2, [pc, #596]	; (8006824 <UART_SetConfig+0x6f4>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065d8:	4498      	add	r8, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	469b      	mov	fp, r3
 80065de:	f04f 0c00 	mov.w	ip, #0
 80065e2:	46d9      	mov	r9, fp
 80065e4:	46e2      	mov	sl, ip
 80065e6:	eb19 0309 	adds.w	r3, r9, r9
 80065ea:	eb4a 040a 	adc.w	r4, sl, sl
 80065ee:	4699      	mov	r9, r3
 80065f0:	46a2      	mov	sl, r4
 80065f2:	eb19 090b 	adds.w	r9, r9, fp
 80065f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065fa:	f04f 0100 	mov.w	r1, #0
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800660a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800660e:	4689      	mov	r9, r1
 8006610:	4692      	mov	sl, r2
 8006612:	eb1b 0509 	adds.w	r5, fp, r9
 8006616:	eb4c 060a 	adc.w	r6, ip, sl
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4619      	mov	r1, r3
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	f04f 0400 	mov.w	r4, #0
 800662c:	0094      	lsls	r4, r2, #2
 800662e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	461a      	mov	r2, r3
 8006636:	4623      	mov	r3, r4
 8006638:	4628      	mov	r0, r5
 800663a:	4631      	mov	r1, r6
 800663c:	f7fa fb24 	bl	8000c88 <__aeabi_uldivmod>
 8006640:	4603      	mov	r3, r0
 8006642:	460c      	mov	r4, r1
 8006644:	461a      	mov	r2, r3
 8006646:	4b77      	ldr	r3, [pc, #476]	; (8006824 <UART_SetConfig+0x6f4>)
 8006648:	fba3 1302 	umull	r1, r3, r3, r2
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	2164      	movs	r1, #100	; 0x64
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	3332      	adds	r3, #50	; 0x32
 800665a:	4a72      	ldr	r2, [pc, #456]	; (8006824 <UART_SetConfig+0x6f4>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f003 020f 	and.w	r2, r3, #15
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4442      	add	r2, r8
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	e0d0      	b.n	8006812 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fd fab4 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8006674:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	469a      	mov	sl, r3
 800667a:	f04f 0b00 	mov.w	fp, #0
 800667e:	46d0      	mov	r8, sl
 8006680:	46d9      	mov	r9, fp
 8006682:	eb18 0308 	adds.w	r3, r8, r8
 8006686:	eb49 0409 	adc.w	r4, r9, r9
 800668a:	4698      	mov	r8, r3
 800668c:	46a1      	mov	r9, r4
 800668e:	eb18 080a 	adds.w	r8, r8, sl
 8006692:	eb49 090b 	adc.w	r9, r9, fp
 8006696:	f04f 0100 	mov.w	r1, #0
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066aa:	4688      	mov	r8, r1
 80066ac:	4691      	mov	r9, r2
 80066ae:	eb1a 0508 	adds.w	r5, sl, r8
 80066b2:	eb4b 0609 	adc.w	r6, fp, r9
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4619      	mov	r1, r3
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	f04f 0400 	mov.w	r4, #0
 80066c8:	0094      	lsls	r4, r2, #2
 80066ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066ce:	008b      	lsls	r3, r1, #2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	4631      	mov	r1, r6
 80066d8:	f7fa fad6 	bl	8000c88 <__aeabi_uldivmod>
 80066dc:	4603      	mov	r3, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b50      	ldr	r3, [pc, #320]	; (8006824 <UART_SetConfig+0x6f4>)
 80066e4:	fba3 2302 	umull	r2, r3, r3, r2
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	469b      	mov	fp, r3
 80066f2:	f04f 0c00 	mov.w	ip, #0
 80066f6:	46d9      	mov	r9, fp
 80066f8:	46e2      	mov	sl, ip
 80066fa:	eb19 0309 	adds.w	r3, r9, r9
 80066fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006702:	4699      	mov	r9, r3
 8006704:	46a2      	mov	sl, r4
 8006706:	eb19 090b 	adds.w	r9, r9, fp
 800670a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800670e:	f04f 0100 	mov.w	r1, #0
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800671a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800671e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006722:	4689      	mov	r9, r1
 8006724:	4692      	mov	sl, r2
 8006726:	eb1b 0509 	adds.w	r5, fp, r9
 800672a:	eb4c 060a 	adc.w	r6, ip, sl
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	f04f 0400 	mov.w	r4, #0
 8006740:	0094      	lsls	r4, r2, #2
 8006742:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006746:	008b      	lsls	r3, r1, #2
 8006748:	461a      	mov	r2, r3
 800674a:	4623      	mov	r3, r4
 800674c:	4628      	mov	r0, r5
 800674e:	4631      	mov	r1, r6
 8006750:	f7fa fa9a 	bl	8000c88 <__aeabi_uldivmod>
 8006754:	4603      	mov	r3, r0
 8006756:	460c      	mov	r4, r1
 8006758:	461a      	mov	r2, r3
 800675a:	4b32      	ldr	r3, [pc, #200]	; (8006824 <UART_SetConfig+0x6f4>)
 800675c:	fba3 1302 	umull	r1, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	2164      	movs	r1, #100	; 0x64
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	3332      	adds	r3, #50	; 0x32
 800676e:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <UART_SetConfig+0x6f4>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800677a:	4498      	add	r8, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	469b      	mov	fp, r3
 8006780:	f04f 0c00 	mov.w	ip, #0
 8006784:	46d9      	mov	r9, fp
 8006786:	46e2      	mov	sl, ip
 8006788:	eb19 0309 	adds.w	r3, r9, r9
 800678c:	eb4a 040a 	adc.w	r4, sl, sl
 8006790:	4699      	mov	r9, r3
 8006792:	46a2      	mov	sl, r4
 8006794:	eb19 090b 	adds.w	r9, r9, fp
 8006798:	eb4a 0a0c 	adc.w	sl, sl, ip
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067b0:	4689      	mov	r9, r1
 80067b2:	4692      	mov	sl, r2
 80067b4:	eb1b 0509 	adds.w	r5, fp, r9
 80067b8:	eb4c 060a 	adc.w	r6, ip, sl
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4619      	mov	r1, r3
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	f04f 0400 	mov.w	r4, #0
 80067ce:	0094      	lsls	r4, r2, #2
 80067d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067d4:	008b      	lsls	r3, r1, #2
 80067d6:	461a      	mov	r2, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	4628      	mov	r0, r5
 80067dc:	4631      	mov	r1, r6
 80067de:	f7fa fa53 	bl	8000c88 <__aeabi_uldivmod>
 80067e2:	4603      	mov	r3, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	461a      	mov	r2, r3
 80067e8:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <UART_SetConfig+0x6f4>)
 80067ea:	fba3 1302 	umull	r1, r3, r3, r2
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2164      	movs	r1, #100	; 0x64
 80067f2:	fb01 f303 	mul.w	r3, r1, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	011b      	lsls	r3, r3, #4
 80067fa:	3332      	adds	r3, #50	; 0x32
 80067fc:	4a09      	ldr	r2, [pc, #36]	; (8006824 <UART_SetConfig+0x6f4>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	f003 020f 	and.w	r2, r3, #15
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4442      	add	r2, r8
 800680e:	609a      	str	r2, [r3, #8]
}
 8006810:	e7ff      	b.n	8006812 <UART_SetConfig+0x6e2>
 8006812:	bf00      	nop
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681c:	40011000 	.word	0x40011000
 8006820:	40011400 	.word	0x40011400
 8006824:	51eb851f 	.word	0x51eb851f

08006828 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006828:	b084      	sub	sp, #16
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	f107 001c 	add.w	r0, r7, #28
 8006836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800683e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006840:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006842:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006846:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800684a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800684e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006852:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	b004      	add	sp, #16
 800687c:	4770      	bx	lr

0800687e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2203      	movs	r2, #3
 80068c6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80068c8:	2002      	movs	r0, #2
 80068ca:	f7fb fe2d 	bl	8002528 <HAL_Delay>
  
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0303 	and.w	r3, r3, #3
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006912:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006918:	431a      	orrs	r2, r3
                       Command->CPSM);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800691e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800692e:	f023 030f 	bic.w	r3, r3, #15
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	b2db      	uxtb	r3, r3
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3314      	adds	r3, #20
 8006970:	461a      	mov	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	4413      	add	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
}  
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80069b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80069ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0

}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80069ee:	2310      	movs	r3, #16
 80069f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a00:	f107 0308 	add.w	r3, r7, #8
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff ff74 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a10:	2110      	movs	r1, #16
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa40 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3720      	adds	r7, #32
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006a32:	2311      	movs	r3, #17
 8006a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a36:	2340      	movs	r3, #64	; 0x40
 8006a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a44:	f107 0308 	add.w	r3, r7, #8
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff52 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a54:	2111      	movs	r1, #17
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa1e 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3720      	adds	r7, #32
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006a76:	2312      	movs	r3, #18
 8006a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff ff30 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a98:	2112      	movs	r1, #18
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9fc 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006aba:	2318      	movs	r3, #24
 8006abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006abe:	2340      	movs	r3, #64	; 0x40
 8006ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006acc:	f107 0308 	add.w	r3, r7, #8
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff ff0e 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	2118      	movs	r1, #24
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9da 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3720      	adds	r7, #32
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006afe:	2319      	movs	r3, #25
 8006b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b10:	f107 0308 	add.w	r3, r7, #8
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff feec 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b20:	2119      	movs	r1, #25
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f9b8 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3720      	adds	r7, #32
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b40:	230c      	movs	r3, #12
 8006b42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff fecb 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006b5e:	4a05      	ldr	r2, [pc, #20]	; (8006b74 <SDMMC_CmdStopTransfer+0x40>)
 8006b60:	210c      	movs	r1, #12
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f998 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	05f5e100 	.word	0x05f5e100

08006b78 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08a      	sub	sp, #40	; 0x28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b88:	2307      	movs	r3, #7
 8006b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b98:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b9a:	f107 0310 	add.w	r3, r7, #16
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fea7 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	2107      	movs	r1, #7
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f973 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006bb2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3728      	adds	r7, #40	; 0x28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b088      	sub	sp, #32
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bdc:	f107 0308 	add.w	r3, r7, #8
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fe86 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f92d 	bl	8006e48 <SDMMC_GetCmdError>
 8006bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b088      	sub	sp, #32
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c08:	2308      	movs	r3, #8
 8006c0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c1a:	f107 0308 	add.w	r3, r7, #8
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fe67 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb16 	bl	8007258 <SDMMC_GetCmdResp7>
 8006c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3720      	adds	r7, #32
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c46:	2337      	movs	r3, #55	; 0x37
 8006c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c4a:	2340      	movs	r3, #64	; 0x40
 8006c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c58:	f107 0308 	add.w	r3, r7, #8
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff fe48 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	2137      	movs	r1, #55	; 0x37
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f914 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c72:	69fb      	ldr	r3, [r7, #28]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006c92:	2329      	movs	r3, #41	; 0x29
 8006c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fe22 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fa23 	bl	80070fc <SDMMC_GetCmdResp3>
 8006cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b088      	sub	sp, #32
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006cd0:	2306      	movs	r3, #6
 8006cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff fe03 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	2106      	movs	r1, #6
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f8cf 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b088      	sub	sp, #32
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d12:	2333      	movs	r3, #51	; 0x33
 8006d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d16:	2340      	movs	r3, #64	; 0x40
 8006d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d24:	f107 0308 	add.w	r3, r7, #8
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fde2 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d34:	2133      	movs	r1, #51	; 0x33
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8ae 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d54:	2302      	movs	r3, #2
 8006d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d58:	23c0      	movs	r3, #192	; 0xc0
 8006d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fdc1 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f97c 	bl	8007070 <SDMMC_GetCmdResp2>
 8006d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d92:	2309      	movs	r3, #9
 8006d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d96:	23c0      	movs	r3, #192	; 0xc0
 8006d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006da2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006da4:	f107 0308 	add.w	r3, r7, #8
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fda2 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f95d 	bl	8007070 <SDMMC_GetCmdResp2>
 8006db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006db8:	69fb      	ldr	r3, [r7, #28]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b088      	sub	sp, #32
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fd83 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	2103      	movs	r1, #3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f9bc 	bl	8007170 <SDMMC_GetCmdResp6>
 8006df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e12:	230d      	movs	r3, #13
 8006e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fd62 	bl	80068f4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e34:	210d      	movs	r1, #13
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f82e 	bl	8006e98 <SDMMC_GetCmdResp1>
 8006e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006e48:	b490      	push	{r4, r7}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <SDMMC_GetCmdError+0x48>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <SDMMC_GetCmdError+0x4c>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	0a5b      	lsrs	r3, r3, #9
 8006e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e64:	4623      	mov	r3, r4
 8006e66:	1e5c      	subs	r4, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e70:	e009      	b.n	8006e86 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f2      	beq.n	8006e64 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	22c5      	movs	r2, #197	; 0xc5
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc90      	pop	{r4, r7}
 8006e8e:	4770      	bx	lr
 8006e90:	20000000 	.word	0x20000000
 8006e94:	10624dd3 	.word	0x10624dd3

08006e98 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e98:	b590      	push	{r4, r7, lr}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ea6:	4b6f      	ldr	r3, [pc, #444]	; (8007064 <SDMMC_GetCmdResp1+0x1cc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a6f      	ldr	r2, [pc, #444]	; (8007068 <SDMMC_GetCmdResp1+0x1d0>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	0a5b      	lsrs	r3, r3, #9
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006eb8:	4623      	mov	r3, r4
 8006eba:	1e5c      	subs	r4, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ec4:	e0c9      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <SDMMC_GetCmdResp1+0x20>
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1eb      	bne.n	8006eb8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2204      	movs	r2, #4
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ef2:	2304      	movs	r3, #4
 8006ef4:	e0b1      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0a6      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	22c5      	movs	r2, #197	; 0xc5
 8006f10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7ff fd18 	bl	8006948 <SDIO_GetCommandResponse>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d001      	beq.n	8006f26 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e099      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f26:	2100      	movs	r1, #0
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff fd1a 	bl	8006962 <SDIO_GetResponse>
 8006f2e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4b4e      	ldr	r3, [pc, #312]	; (800706c <SDMMC_GetCmdResp1+0x1d4>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e08d      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da02      	bge.n	8006f4a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f48:	e087      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	e080      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f62:	2380      	movs	r3, #128	; 0x80
 8006f64:	e079      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f74:	e071      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f84:	e069      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d002      	beq.n	8006f96 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f94:	e061      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fa4:	e059      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fb4:	e051      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fc4:	e049      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006fd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fd4:	e041      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe4:	e039      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ff4:	e031      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007000:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007004:	e029      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007010:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007014:	e021      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007020:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007024:	e019      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007030:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007034:	e011      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007040:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007044:	e009      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007050:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007054:	e001      	b.n	800705a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd90      	pop	{r4, r7, pc}
 8007062:	bf00      	nop
 8007064:	20000000 	.word	0x20000000
 8007068:	10624dd3 	.word	0x10624dd3
 800706c:	fdffe008 	.word	0xfdffe008

08007070 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007070:	b490      	push	{r4, r7}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <SDMMC_GetCmdResp2+0x84>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <SDMMC_GetCmdResp2+0x88>)
 800707e:	fba2 2303 	umull	r2, r3, r2, r3
 8007082:	0a5b      	lsrs	r3, r3, #9
 8007084:	f241 3288 	movw	r2, #5000	; 0x1388
 8007088:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800708c:	4623      	mov	r3, r4
 800708e:	1e5c      	subs	r4, r3, #1
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007098:	e026      	b.n	80070e8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <SDMMC_GetCmdResp2+0x1c>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1eb      	bne.n	800708c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2204      	movs	r2, #4
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070c6:	2304      	movs	r3, #4
 80070c8:	e00e      	b.n	80070e8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070dc:	2301      	movs	r3, #1
 80070de:	e003      	b.n	80070e8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	22c5      	movs	r2, #197	; 0xc5
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc90      	pop	{r4, r7}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000000 	.word	0x20000000
 80070f8:	10624dd3 	.word	0x10624dd3

080070fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80070fc:	b490      	push	{r4, r7}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007104:	4b18      	ldr	r3, [pc, #96]	; (8007168 <SDMMC_GetCmdResp3+0x6c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a18      	ldr	r2, [pc, #96]	; (800716c <SDMMC_GetCmdResp3+0x70>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	0a5b      	lsrs	r3, r3, #9
 8007110:	f241 3288 	movw	r2, #5000	; 0x1388
 8007114:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007118:	4623      	mov	r3, r4
 800711a:	1e5c      	subs	r4, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007124:	e01b      	b.n	800715e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <SDMMC_GetCmdResp3+0x1c>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1eb      	bne.n	8007118 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2204      	movs	r2, #4
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007152:	2304      	movs	r3, #4
 8007154:	e003      	b.n	800715e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	22c5      	movs	r2, #197	; 0xc5
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bc90      	pop	{r4, r7}
 8007166:	4770      	bx	lr
 8007168:	20000000 	.word	0x20000000
 800716c:	10624dd3 	.word	0x10624dd3

08007170 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007170:	b590      	push	{r4, r7, lr}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	460b      	mov	r3, r1
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800717e:	4b34      	ldr	r3, [pc, #208]	; (8007250 <SDMMC_GetCmdResp6+0xe0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a34      	ldr	r2, [pc, #208]	; (8007254 <SDMMC_GetCmdResp6+0xe4>)
 8007184:	fba2 2303 	umull	r2, r3, r2, r3
 8007188:	0a5b      	lsrs	r3, r3, #9
 800718a:	f241 3288 	movw	r2, #5000	; 0x1388
 800718e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007192:	4623      	mov	r3, r4
 8007194:	1e5c      	subs	r4, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800719a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800719e:	e052      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f0      	beq.n	8007192 <SDMMC_GetCmdResp6+0x22>
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1eb      	bne.n	8007192 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2204      	movs	r2, #4
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071cc:	2304      	movs	r3, #4
 80071ce:	e03a      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e02f      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fbae 	bl	8006948 <SDIO_GetCommandResponse>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d001      	beq.n	80071fa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e025      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22c5      	movs	r2, #197	; 0xc5
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007200:	2100      	movs	r1, #0
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fbad 	bl	8006962 <SDIO_GetResponse>
 8007208:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800721e:	2300      	movs	r3, #0
 8007220:	e011      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800722c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007230:	e009      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800723c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007240:	e001      	b.n	8007246 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd90      	pop	{r4, r7, pc}
 800724e:	bf00      	nop
 8007250:	20000000 	.word	0x20000000
 8007254:	10624dd3 	.word	0x10624dd3

08007258 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007258:	b490      	push	{r4, r7}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007260:	4b21      	ldr	r3, [pc, #132]	; (80072e8 <SDMMC_GetCmdResp7+0x90>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a21      	ldr	r2, [pc, #132]	; (80072ec <SDMMC_GetCmdResp7+0x94>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	0a5b      	lsrs	r3, r3, #9
 800726c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007270:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007274:	4623      	mov	r3, r4
 8007276:	1e5c      	subs	r4, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800727c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007280:	e02c      	b.n	80072dc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007286:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <SDMMC_GetCmdResp7+0x1c>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1eb      	bne.n	8007274 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2204      	movs	r2, #4
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072ae:	2304      	movs	r3, #4
 80072b0:	e014      	b.n	80072dc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e009      	b.n	80072dc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2240      	movs	r2, #64	; 0x40
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072da:	2300      	movs	r3, #0
  
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc90      	pop	{r4, r7}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000000 	.word	0x20000000
 80072ec:	10624dd3 	.word	0x10624dd3

080072f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80072f4:	4904      	ldr	r1, [pc, #16]	; (8007308 <MX_FATFS_Init+0x18>)
 80072f6:	4805      	ldr	r0, [pc, #20]	; (800730c <MX_FATFS_Init+0x1c>)
 80072f8:	f006 fe60 	bl	800dfbc <FATFS_LinkDriver>
 80072fc:	4603      	mov	r3, r0
 80072fe:	461a      	mov	r2, r3
 8007300:	4b03      	ldr	r3, [pc, #12]	; (8007310 <MX_FATFS_Init+0x20>)
 8007302:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007304:	bf00      	nop
 8007306:	bd80      	pop	{r7, pc}
 8007308:	200044cc 	.word	0x200044cc
 800730c:	080155a4 	.word	0x080155a4
 8007310:	200044c8 	.word	0x200044c8

08007314 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007318:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800731a:	4618      	mov	r0, r3
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800732e:	f000 f896 	bl	800745e <BSP_SD_IsDetected>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d001      	beq.n	800733c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e012      	b.n	8007362 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800733c:	480b      	ldr	r0, [pc, #44]	; (800736c <BSP_SD_Init+0x48>)
 800733e:	f7fc fcc2 	bl	8003cc6 <HAL_SD_Init>
 8007342:	4603      	mov	r3, r0
 8007344:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d109      	bne.n	8007360 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800734c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007350:	4806      	ldr	r0, [pc, #24]	; (800736c <BSP_SD_Init+0x48>)
 8007352:	f7fd fa83 	bl	800485c <HAL_SD_ConfigWideBusOperation>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007360:	79fb      	ldrb	r3, [r7, #7]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	200042e0 	.word	0x200042e0

08007370 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	68f9      	ldr	r1, [r7, #12]
 8007386:	4806      	ldr	r0, [pc, #24]	; (80073a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007388:	f7fc fd2e 	bl	8003de8 <HAL_SD_ReadBlocks_DMA>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	200042e0 	.word	0x200042e0

080073a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	4806      	ldr	r0, [pc, #24]	; (80073d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80073bc:	f7fc fdfe 	bl	8003fbc <HAL_SD_WriteBlocks_DMA>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	200042e0 	.word	0x200042e0

080073d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80073dc:	4805      	ldr	r0, [pc, #20]	; (80073f4 <BSP_SD_GetCardState+0x1c>)
 80073de:	f7fd fab9 	bl	8004954 <HAL_SD_GetCardState>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	bf14      	ite	ne
 80073e8:	2301      	movne	r3, #1
 80073ea:	2300      	moveq	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200042e0 	.word	0x200042e0

080073f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4803      	ldr	r0, [pc, #12]	; (8007410 <BSP_SD_GetCardInfo+0x18>)
 8007404:	f7fd f9fe 	bl	8004804 <HAL_SD_GetCardInfo>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	200042e0 	.word	0x200042e0

08007414 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800741c:	f000 f818 	bl	8007450 <BSP_SD_AbortCallback>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007430:	f000 f9a8 	bl	8007784 <BSP_SD_WriteCpltCallback>
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007444:	f000 f9ac 	bl	80077a0 <BSP_SD_ReadCpltCallback>
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0

}
 8007454:	bf00      	nop
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007464:	2301      	movs	r3, #1
 8007466:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	b2db      	uxtb	r3, r3
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007480:	f006 fefb 	bl	800e27a <osKernelSysTick>
 8007484:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8007486:	e006      	b.n	8007496 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007488:	f7ff ffa6 	bl	80073d8 <BSP_SD_GetCardState>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007492:	2300      	movs	r3, #0
 8007494:	e009      	b.n	80074aa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8007496:	f006 fef0 	bl	800e27a <osKernelSysTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d8f0      	bhi.n	8007488 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <SD_CheckStatus+0x38>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074c4:	f7ff ff88 	bl	80073d8 <BSP_SD_GetCardState>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d107      	bne.n	80074de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <SD_CheckStatus+0x38>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4b04      	ldr	r3, [pc, #16]	; (80074ec <SD_CheckStatus+0x38>)
 80074dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80074de:	4b03      	ldr	r3, [pc, #12]	; (80074ec <SD_CheckStatus+0x38>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b2db      	uxtb	r3, r3
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20000009 	.word	0x20000009

080074f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80074fa:	4b20      	ldr	r3, [pc, #128]	; (800757c <SD_initialize+0x8c>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007500:	f006 feaf 	bl	800e262 <osKernelRunning>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d030      	beq.n	800756c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800750a:	f7ff ff0b 	bl	8007324 <BSP_SD_Init>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d107      	bne.n	8007524 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff ffcc 	bl	80074b4 <SD_CheckStatus>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	4b16      	ldr	r3, [pc, #88]	; (800757c <SD_initialize+0x8c>)
 8007522:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007524:	4b15      	ldr	r3, [pc, #84]	; (800757c <SD_initialize+0x8c>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d01e      	beq.n	800756c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800752e:	4b14      	ldr	r3, [pc, #80]	; (8007580 <SD_initialize+0x90>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10e      	bne.n	8007554 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <SD_initialize+0x94>)
 8007538:	f107 0408 	add.w	r4, r7, #8
 800753c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800753e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f006 ffd0 	bl	800e4ee <osMessageCreate>
 800754e:	4602      	mov	r2, r0
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <SD_initialize+0x90>)
 8007552:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <SD_initialize+0x90>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <SD_initialize+0x8c>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	4b04      	ldr	r3, [pc, #16]	; (800757c <SD_initialize+0x8c>)
 800756a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <SD_initialize+0x8c>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b2db      	uxtb	r3, r3
}
 8007572:	4618      	mov	r0, r3
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	bd90      	pop	{r4, r7, pc}
 800757a:	bf00      	nop
 800757c:	20000009 	.word	0x20000009
 8007580:	20000458 	.word	0x20000458
 8007584:	08015518 	.word	0x08015518

08007588 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff ff8d 	bl	80074b4 <SD_CheckStatus>
 800759a:	4603      	mov	r3, r0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80075ba:	f247 5030 	movw	r0, #30000	; 0x7530
 80075be:	f7ff ff5b 	bl	8007478 <SD_CheckStatusWithTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	da02      	bge.n	80075ce <SD_read+0x2a>
  {
    return res;
 80075c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075cc:	e032      	b.n	8007634 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	68b8      	ldr	r0, [r7, #8]
 80075d4:	f7ff fecc 	bl	8007370 <BSP_SD_ReadBlocks_DMA>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80075de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d124      	bne.n	8007630 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <SD_read+0x98>)
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	f107 0314 	add.w	r3, r7, #20
 80075ee:	f247 5230 	movw	r2, #30000	; 0x7530
 80075f2:	4618      	mov	r0, r3
 80075f4:	f006 ffe4 	bl	800e5c0 <osMessageGet>

    if (event.status == osEventMessage)
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d118      	bne.n	8007630 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d115      	bne.n	8007630 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007604:	f006 fe39 	bl	800e27a <osKernelSysTick>
 8007608:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800760a:	e008      	b.n	800761e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800760c:	f7ff fee4 	bl	80073d8 <BSP_SD_GetCardState>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <SD_read+0x7a>
              {
                res = RES_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800761c:	e008      	b.n	8007630 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800761e:	f006 fe2c 	bl	800e27a <osKernelSysTick>
 8007622:	4602      	mov	r2, r0
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	f247 522f 	movw	r2, #29999	; 0x752f
 800762c:	4293      	cmp	r3, r2
 800762e:	d9ed      	bls.n	800760c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000458 	.word	0x20000458

08007640 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007656:	f247 5030 	movw	r0, #30000	; 0x7530
 800765a:	f7ff ff0d 	bl	8007478 <SD_CheckStatusWithTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	da02      	bge.n	800766a <SD_write+0x2a>
  {
    return res;
 8007664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007668:	e02e      	b.n	80076c8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	68b8      	ldr	r0, [r7, #8]
 8007670:	f7ff fe98 	bl	80073a4 <BSP_SD_WriteBlocks_DMA>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d124      	bne.n	80076c4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800767a:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <SD_write+0x90>)
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	f107 0314 	add.w	r3, r7, #20
 8007682:	f247 5230 	movw	r2, #30000	; 0x7530
 8007686:	4618      	mov	r0, r3
 8007688:	f006 ff9a 	bl	800e5c0 <osMessageGet>

    if (event.status == osEventMessage)
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b10      	cmp	r3, #16
 8007690:	d118      	bne.n	80076c4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d115      	bne.n	80076c4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007698:	f006 fdef 	bl	800e27a <osKernelSysTick>
 800769c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800769e:	e008      	b.n	80076b2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80076a0:	f7ff fe9a 	bl	80073d8 <BSP_SD_GetCardState>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <SD_write+0x72>
          {
            res = RES_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80076b0:	e008      	b.n	80076c4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80076b2:	f006 fde2 	bl	800e27a <osKernelSysTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d9ed      	bls.n	80076a0 <SD_write+0x60>
    }

  }
#endif

  return res;
 80076c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	; 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000458 	.word	0x20000458

080076d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08c      	sub	sp, #48	; 0x30
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	603a      	str	r2, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
 80076e0:	460b      	mov	r3, r1
 80076e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80076ea:	4b25      	ldr	r3, [pc, #148]	; (8007780 <SD_ioctl+0xac>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <SD_ioctl+0x28>
 80076f8:	2303      	movs	r3, #3
 80076fa:	e03c      	b.n	8007776 <SD_ioctl+0xa2>

  switch (cmd)
 80076fc:	79bb      	ldrb	r3, [r7, #6]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d834      	bhi.n	800776c <SD_ioctl+0x98>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <SD_ioctl+0x34>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	08007719 	.word	0x08007719
 800770c:	08007721 	.word	0x08007721
 8007710:	08007739 	.word	0x08007739
 8007714:	08007753 	.word	0x08007753
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800771e:	e028      	b.n	8007772 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007720:	f107 030c 	add.w	r3, r7, #12
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fe67 	bl	80073f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800772a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007736:	e01c      	b.n	8007772 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fe5b 	bl	80073f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	b29a      	uxth	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007750:	e00f      	b.n	8007772 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fe4e 	bl	80073f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	0a5a      	lsrs	r2, r3, #9
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800776a:	e002      	b.n	8007772 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800776c:	2304      	movs	r3, #4
 800776e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007776:	4618      	mov	r0, r3
 8007778:	3730      	adds	r7, #48	; 0x30
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20000009 	.word	0x20000009

08007784 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007788:	4b04      	ldr	r3, [pc, #16]	; (800779c <BSP_SD_WriteCpltCallback+0x18>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2200      	movs	r2, #0
 800778e:	2102      	movs	r1, #2
 8007790:	4618      	mov	r0, r3
 8007792:	f006 fed5 	bl	800e540 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007796:	bf00      	nop
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000458 	.word	0x20000458

080077a0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <BSP_SD_ReadCpltCallback+0x18>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2200      	movs	r2, #0
 80077aa:	2101      	movs	r1, #1
 80077ac:	4618      	mov	r0, r3
 80077ae:	f006 fec7 	bl	800e540 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000458 	.word	0x20000458

080077bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	4a08      	ldr	r2, [pc, #32]	; (80077ec <disk_status+0x30>)
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	79fa      	ldrb	r2, [r7, #7]
 80077d4:	4905      	ldr	r1, [pc, #20]	; (80077ec <disk_status+0x30>)
 80077d6:	440a      	add	r2, r1
 80077d8:	7a12      	ldrb	r2, [r2, #8]
 80077da:	4610      	mov	r0, r2
 80077dc:	4798      	blx	r3
 80077de:	4603      	mov	r3, r0
 80077e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200004b4 	.word	0x200004b4

080077f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	4a0d      	ldr	r2, [pc, #52]	; (8007838 <disk_initialize+0x48>)
 8007802:	5cd3      	ldrb	r3, [r2, r3]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d111      	bne.n	800782c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	4a0b      	ldr	r2, [pc, #44]	; (8007838 <disk_initialize+0x48>)
 800780c:	2101      	movs	r1, #1
 800780e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	4a09      	ldr	r2, [pc, #36]	; (8007838 <disk_initialize+0x48>)
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	79fa      	ldrb	r2, [r7, #7]
 800781e:	4906      	ldr	r1, [pc, #24]	; (8007838 <disk_initialize+0x48>)
 8007820:	440a      	add	r2, r1
 8007822:	7a12      	ldrb	r2, [r2, #8]
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200004b4 	.word	0x200004b4

0800783c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800783c:	b590      	push	{r4, r7, lr}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <disk_read+0x3c>)
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	689c      	ldr	r4, [r3, #8]
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	4a07      	ldr	r2, [pc, #28]	; (8007878 <disk_read+0x3c>)
 800785c:	4413      	add	r3, r2
 800785e:	7a18      	ldrb	r0, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	47a0      	blx	r4
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
  return res;
 800786c:	7dfb      	ldrb	r3, [r7, #23]
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	bd90      	pop	{r4, r7, pc}
 8007876:	bf00      	nop
 8007878:	200004b4 	.word	0x200004b4

0800787c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800787c:	b590      	push	{r4, r7, lr}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	4a0a      	ldr	r2, [pc, #40]	; (80078b8 <disk_write+0x3c>)
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	68dc      	ldr	r4, [r3, #12]
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <disk_write+0x3c>)
 800789c:	4413      	add	r3, r2
 800789e:	7a18      	ldrb	r0, [r3, #8]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	47a0      	blx	r4
 80078a8:	4603      	mov	r3, r0
 80078aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	371c      	adds	r7, #28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd90      	pop	{r4, r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200004b4 	.word	0x200004b4

080078bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	603a      	str	r2, [r7, #0]
 80078c6:	71fb      	strb	r3, [r7, #7]
 80078c8:	460b      	mov	r3, r1
 80078ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <disk_ioctl+0x38>)
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	79fa      	ldrb	r2, [r7, #7]
 80078da:	4906      	ldr	r1, [pc, #24]	; (80078f4 <disk_ioctl+0x38>)
 80078dc:	440a      	add	r2, r1
 80078de:	7a10      	ldrb	r0, [r2, #8]
 80078e0:	79b9      	ldrb	r1, [r7, #6]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4798      	blx	r3
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	200004b4 	.word	0x200004b4

080078f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3301      	adds	r3, #1
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007908:	89fb      	ldrh	r3, [r7, #14]
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	b21a      	sxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b21b      	sxth	r3, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	b21b      	sxth	r3, r3
 8007918:	81fb      	strh	r3, [r7, #14]
	return rv;
 800791a:	89fb      	ldrh	r3, [r7, #14]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3303      	adds	r3, #3
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	3202      	adds	r2, #2
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	3201      	adds	r2, #1
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800796e:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3307      	adds	r3, #7
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f04f 0400 	mov.w	r4, #0
 8007984:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8007988:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800798c:	f04f 0b00 	mov.w	fp, #0
 8007990:	f04f 0c00 	mov.w	ip, #0
 8007994:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007998:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800799c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	3206      	adds	r2, #6
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	b2d1      	uxtb	r1, r2
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	ea4b 0301 	orr.w	r3, fp, r1
 80079b0:	ea4c 0402 	orr.w	r4, ip, r2
 80079b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 80079b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079bc:	f04f 0b00 	mov.w	fp, #0
 80079c0:	f04f 0c00 	mov.w	ip, #0
 80079c4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80079c8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80079cc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	3205      	adds	r2, #5
 80079d4:	7812      	ldrb	r2, [r2, #0]
 80079d6:	b2d1      	uxtb	r1, r2
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	ea4b 0301 	orr.w	r3, fp, r1
 80079e0:	ea4c 0402 	orr.w	r4, ip, r2
 80079e4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 80079e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80079ec:	f04f 0b00 	mov.w	fp, #0
 80079f0:	f04f 0c00 	mov.w	ip, #0
 80079f4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80079f8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80079fc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	3204      	adds	r2, #4
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	b2d1      	uxtb	r1, r2
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	ea4b 0301 	orr.w	r3, fp, r1
 8007a10:	ea4c 0402 	orr.w	r4, ip, r2
 8007a14:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8007a18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a1c:	f04f 0b00 	mov.w	fp, #0
 8007a20:	f04f 0c00 	mov.w	ip, #0
 8007a24:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007a28:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007a2c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	3203      	adds	r2, #3
 8007a34:	7812      	ldrb	r2, [r2, #0]
 8007a36:	b2d1      	uxtb	r1, r2
 8007a38:	f04f 0200 	mov.w	r2, #0
 8007a3c:	ea4b 0301 	orr.w	r3, fp, r1
 8007a40:	ea4c 0402 	orr.w	r4, ip, r2
 8007a44:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8007a48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a4c:	f04f 0b00 	mov.w	fp, #0
 8007a50:	f04f 0c00 	mov.w	ip, #0
 8007a54:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007a58:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007a5c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	3202      	adds	r2, #2
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	b2d1      	uxtb	r1, r2
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	ea4b 0301 	orr.w	r3, fp, r1
 8007a70:	ea4c 0402 	orr.w	r4, ip, r2
 8007a74:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8007a78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a7c:	f04f 0b00 	mov.w	fp, #0
 8007a80:	f04f 0c00 	mov.w	ip, #0
 8007a84:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007a88:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007a8c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	3201      	adds	r2, #1
 8007a94:	7812      	ldrb	r2, [r2, #0]
 8007a96:	b2d1      	uxtb	r1, r2
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	ea4b 0301 	orr.w	r3, fp, r1
 8007aa0:	ea4c 0402 	orr.w	r4, ip, r2
 8007aa4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8007aa8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007aac:	f04f 0b00 	mov.w	fp, #0
 8007ab0:	f04f 0c00 	mov.w	ip, #0
 8007ab4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007ab8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007abc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	b2d1      	uxtb	r1, r2
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	ea4b 0301 	orr.w	r3, fp, r1
 8007ace:	ea4c 0402 	orr.w	r4, ip, r2
 8007ad2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8007ad6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	4621      	mov	r1, r4
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8007ae6:	4770      	bx	lr

08007ae8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	607a      	str	r2, [r7, #4]
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	887b      	ldrh	r3, [r7, #2]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	887a      	ldrh	r2, [r7, #2]
 8007b0e:	b2d2      	uxtb	r2, r2
 8007b10:	701a      	strb	r2, [r3, #0]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	0a1b      	lsrs	r3, r3, #8
 8007b4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	607a      	str	r2, [r7, #4]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]
}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8007b76:	b490      	push	{r4, r7}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	60fa      	str	r2, [r7, #12]
 8007b88:	783a      	ldrb	r2, [r7, #0]
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	0a0b      	lsrs	r3, r1, #8
 8007b9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007b9e:	0a14      	lsrs	r4, r2, #8
 8007ba0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	60fa      	str	r2, [r7, #12]
 8007baa:	783a      	ldrb	r2, [r7, #0]
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	f04f 0400 	mov.w	r4, #0
 8007bba:	0a0b      	lsrs	r3, r1, #8
 8007bbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007bc0:	0a14      	lsrs	r4, r2, #8
 8007bc2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	60fa      	str	r2, [r7, #12]
 8007bcc:	783a      	ldrb	r2, [r7, #0]
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	f04f 0400 	mov.w	r4, #0
 8007bdc:	0a0b      	lsrs	r3, r1, #8
 8007bde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007be2:	0a14      	lsrs	r4, r2, #8
 8007be4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	60fa      	str	r2, [r7, #12]
 8007bee:	783a      	ldrb	r2, [r7, #0]
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	f04f 0400 	mov.w	r4, #0
 8007bfe:	0a0b      	lsrs	r3, r1, #8
 8007c00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c04:	0a14      	lsrs	r4, r2, #8
 8007c06:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	60fa      	str	r2, [r7, #12]
 8007c10:	783a      	ldrb	r2, [r7, #0]
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	f04f 0400 	mov.w	r4, #0
 8007c20:	0a0b      	lsrs	r3, r1, #8
 8007c22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c26:	0a14      	lsrs	r4, r2, #8
 8007c28:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	60fa      	str	r2, [r7, #12]
 8007c32:	783a      	ldrb	r2, [r7, #0]
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	f04f 0400 	mov.w	r4, #0
 8007c42:	0a0b      	lsrs	r3, r1, #8
 8007c44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c48:	0a14      	lsrs	r4, r2, #8
 8007c4a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	60fa      	str	r2, [r7, #12]
 8007c54:	783a      	ldrb	r2, [r7, #0]
 8007c56:	701a      	strb	r2, [r3, #0]
 8007c58:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	f04f 0400 	mov.w	r4, #0
 8007c64:	0a0b      	lsrs	r3, r1, #8
 8007c66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007c6a:	0a14      	lsrs	r4, r2, #8
 8007c6c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	60fa      	str	r2, [r7, #12]
 8007c76:	783a      	ldrb	r2, [r7, #0]
 8007c78:	701a      	strb	r2, [r3, #0]
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc90      	pop	{r4, r7}
 8007c82:	4770      	bx	lr

08007c84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00d      	beq.n	8007cba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	1c53      	adds	r3, r2, #1
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	6179      	str	r1, [r7, #20]
 8007caa:	7812      	ldrb	r2, [r2, #0]
 8007cac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1f1      	bne.n	8007c9e <mem_cpy+0x1a>
	}
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007cc6:	b480      	push	{r7}
 8007cc8:	b087      	sub	sp, #28
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	60b9      	str	r1, [r7, #8]
 8007cd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	617a      	str	r2, [r7, #20]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f3      	bne.n	8007cd6 <mem_set+0x10>
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007cfa:	b480      	push	{r7}
 8007cfc:	b089      	sub	sp, #36	; 0x24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	61fa      	str	r2, [r7, #28]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	61ba      	str	r2, [r7, #24]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	1acb      	subs	r3, r1, r3
 8007d26:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <mem_cmp+0x40>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0eb      	beq.n	8007d12 <mem_cmp+0x18>

	return r;
 8007d3a:	697b      	ldr	r3, [r7, #20]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3724      	adds	r7, #36	; 0x24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d52:	e002      	b.n	8007d5a <chk_chr+0x12>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3301      	adds	r3, #1
 8007d58:	607b      	str	r3, [r7, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <chk_chr+0x26>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	461a      	mov	r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d1f2      	bne.n	8007d54 <chk_chr+0xc>
	return *str;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	781b      	ldrb	r3, [r3, #0]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d009      	beq.n	8007da0 <lock_fs+0x22>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f006 fa15 	bl	800e1c0 <ff_req_grant>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <lock_fs+0x22>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <lock_fs+0x24>
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00d      	beq.n	8007dd8 <unlock_fs+0x2e>
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	2b0c      	cmp	r3, #12
 8007dc0:	d00a      	beq.n	8007dd8 <unlock_fs+0x2e>
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	2b0b      	cmp	r3, #11
 8007dc6:	d007      	beq.n	8007dd8 <unlock_fs+0x2e>
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	d004      	beq.n	8007dd8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f006 fa09 	bl	800e1ea <ff_rel_grant>
	}
}
 8007dd8:	bf00      	nop
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	e029      	b.n	8007e48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <chk_lock+0xb4>)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	4413      	add	r3, r2
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d01d      	beq.n	8007e3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e02:	4a24      	ldr	r2, [pc, #144]	; (8007e94 <chk_lock+0xb4>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	4413      	add	r3, r2
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d116      	bne.n	8007e42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <chk_lock+0xb4>)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	4413      	add	r3, r2
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d10c      	bne.n	8007e42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e28:	4a1a      	ldr	r2, [pc, #104]	; (8007e94 <chk_lock+0xb4>)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	4413      	add	r3, r2
 8007e30:	3308      	adds	r3, #8
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d102      	bne.n	8007e42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e3c:	e007      	b.n	8007e4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d9d2      	bls.n	8007df4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	d109      	bne.n	8007e68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <chk_lock+0x80>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d101      	bne.n	8007e64 <chk_lock+0x84>
 8007e60:	2300      	movs	r3, #0
 8007e62:	e010      	b.n	8007e86 <chk_lock+0xa6>
 8007e64:	2312      	movs	r3, #18
 8007e66:	e00e      	b.n	8007e86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d108      	bne.n	8007e80 <chk_lock+0xa0>
 8007e6e:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <chk_lock+0xb4>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	4413      	add	r3, r2
 8007e76:	330c      	adds	r3, #12
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7e:	d101      	bne.n	8007e84 <chk_lock+0xa4>
 8007e80:	2310      	movs	r3, #16
 8007e82:	e000      	b.n	8007e86 <chk_lock+0xa6>
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000464 	.word	0x20000464

08007e98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
 8007ea2:	e002      	b.n	8007eaa <enq_lock+0x12>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	607b      	str	r3, [r7, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d806      	bhi.n	8007ebe <enq_lock+0x26>
 8007eb0:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <enq_lock+0x40>)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1f2      	bne.n	8007ea4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b05      	cmp	r3, #5
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	20000464 	.word	0x20000464

08007edc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	e01f      	b.n	8007f2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007eec:	4a41      	ldr	r2, [pc, #260]	; (8007ff4 <inc_lock+0x118>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	4413      	add	r3, r2
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d113      	bne.n	8007f26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007efe:	4a3d      	ldr	r2, [pc, #244]	; (8007ff4 <inc_lock+0x118>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	4413      	add	r3, r2
 8007f06:	3304      	adds	r3, #4
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d109      	bne.n	8007f26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007f12:	4a38      	ldr	r2, [pc, #224]	; (8007ff4 <inc_lock+0x118>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	4413      	add	r3, r2
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d006      	beq.n	8007f34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d9dc      	bls.n	8007eec <inc_lock+0x10>
 8007f32:	e000      	b.n	8007f36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007f34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b05      	cmp	r3, #5
 8007f3a:	d132      	bne.n	8007fa2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e002      	b.n	8007f48 <inc_lock+0x6c>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d806      	bhi.n	8007f5c <inc_lock+0x80>
 8007f4e:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <inc_lock+0x118>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	4413      	add	r3, r2
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f2      	bne.n	8007f42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d101      	bne.n	8007f66 <inc_lock+0x8a>
 8007f62:	2300      	movs	r3, #0
 8007f64:	e040      	b.n	8007fe8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4922      	ldr	r1, [pc, #136]	; (8007ff4 <inc_lock+0x118>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	440b      	add	r3, r1
 8007f72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	491e      	ldr	r1, [pc, #120]	; (8007ff4 <inc_lock+0x118>)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	440b      	add	r3, r1
 8007f80:	3304      	adds	r3, #4
 8007f82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f88:	491a      	ldr	r1, [pc, #104]	; (8007ff4 <inc_lock+0x118>)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	440b      	add	r3, r1
 8007f90:	3308      	adds	r3, #8
 8007f92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007f94:	4a17      	ldr	r2, [pc, #92]	; (8007ff4 <inc_lock+0x118>)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	4413      	add	r3, r2
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d009      	beq.n	8007fbc <inc_lock+0xe0>
 8007fa8:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <inc_lock+0x118>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	4413      	add	r3, r2
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <inc_lock+0xe0>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e015      	b.n	8007fe8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d108      	bne.n	8007fd4 <inc_lock+0xf8>
 8007fc2:	4a0c      	ldr	r2, [pc, #48]	; (8007ff4 <inc_lock+0x118>)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	4413      	add	r3, r2
 8007fca:	330c      	adds	r3, #12
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	e001      	b.n	8007fd8 <inc_lock+0xfc>
 8007fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd8:	4906      	ldr	r1, [pc, #24]	; (8007ff4 <inc_lock+0x118>)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	440b      	add	r3, r1
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000464 	.word	0x20000464

08007ff8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3b01      	subs	r3, #1
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d825      	bhi.n	8008058 <dec_lock+0x60>
		n = Files[i].ctr;
 800800c:	4a17      	ldr	r2, [pc, #92]	; (800806c <dec_lock+0x74>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	011b      	lsls	r3, r3, #4
 8008012:	4413      	add	r3, r2
 8008014:	330c      	adds	r3, #12
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800801a:	89fb      	ldrh	r3, [r7, #14]
 800801c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008020:	d101      	bne.n	8008026 <dec_lock+0x2e>
 8008022:	2300      	movs	r3, #0
 8008024:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008026:	89fb      	ldrh	r3, [r7, #14]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <dec_lock+0x3a>
 800802c:	89fb      	ldrh	r3, [r7, #14]
 800802e:	3b01      	subs	r3, #1
 8008030:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008032:	4a0e      	ldr	r2, [pc, #56]	; (800806c <dec_lock+0x74>)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	4413      	add	r3, r2
 800803a:	330c      	adds	r3, #12
 800803c:	89fa      	ldrh	r2, [r7, #14]
 800803e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008040:	89fb      	ldrh	r3, [r7, #14]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <dec_lock+0x5a>
 8008046:	4a09      	ldr	r2, [pc, #36]	; (800806c <dec_lock+0x74>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4413      	add	r3, r2
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	737b      	strb	r3, [r7, #13]
 8008056:	e001      	b.n	800805c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008058:	2302      	movs	r3, #2
 800805a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800805c:	7b7b      	ldrb	r3, [r7, #13]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000464 	.word	0x20000464

08008070 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e010      	b.n	80080a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800807e:	4a0d      	ldr	r2, [pc, #52]	; (80080b4 <clear_lock+0x44>)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	4413      	add	r3, r2
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	429a      	cmp	r2, r3
 800808c:	d105      	bne.n	800809a <clear_lock+0x2a>
 800808e:	4a09      	ldr	r2, [pc, #36]	; (80080b4 <clear_lock+0x44>)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	4413      	add	r3, r2
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	d9eb      	bls.n	800807e <clear_lock+0xe>
	}
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000464 	.word	0x20000464

080080b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	78db      	ldrb	r3, [r3, #3]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d034      	beq.n	8008136 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7858      	ldrb	r0, [r3, #1]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80080dc:	2301      	movs	r3, #1
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	f7ff fbcc 	bl	800787c <disk_write>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	73fb      	strb	r3, [r7, #15]
 80080ee:	e022      	b.n	8008136 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	1ad2      	subs	r2, r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	429a      	cmp	r2, r3
 8008104:	d217      	bcs.n	8008136 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	789b      	ldrb	r3, [r3, #2]
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	e010      	b.n	8008130 <sync_window+0x78>
					wsect += fs->fsize;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4413      	add	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7858      	ldrb	r0, [r3, #1]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008122:	2301      	movs	r3, #1
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	f7ff fba9 	bl	800787c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	3b01      	subs	r3, #1
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d8eb      	bhi.n	800810e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d01b      	beq.n	8008190 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff ffad 	bl	80080b8 <sync_window>
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d113      	bne.n	8008190 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7858      	ldrb	r0, [r3, #1]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008172:	2301      	movs	r3, #1
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	f7ff fb61 	bl	800783c <disk_read>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008180:	f04f 33ff 	mov.w	r3, #4294967295
 8008184:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff ff87 	bl	80080b8 <sync_window>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d158      	bne.n	8008266 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d148      	bne.n	800824e <sync_fs+0xb2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	791b      	ldrb	r3, [r3, #4]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d144      	bne.n	800824e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	333c      	adds	r3, #60	; 0x3c
 80081c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fd79 	bl	8007cc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	333c      	adds	r3, #60	; 0x3c
 80081d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fc81 	bl	8007ae8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	333c      	adds	r3, #60	; 0x3c
 80081ea:	4921      	ldr	r1, [pc, #132]	; (8008270 <sync_fs+0xd4>)
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fc96 	bl	8007b1e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	333c      	adds	r3, #60	; 0x3c
 80081f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80081fa:	491e      	ldr	r1, [pc, #120]	; (8008274 <sync_fs+0xd8>)
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fc8e 	bl	8007b1e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	333c      	adds	r3, #60	; 0x3c
 8008206:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	4619      	mov	r1, r3
 8008210:	4610      	mov	r0, r2
 8008212:	f7ff fc84 	bl	8007b1e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	333c      	adds	r3, #60	; 0x3c
 800821a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f7ff fc7a 	bl	8007b1e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7858      	ldrb	r0, [r3, #1]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008242:	2301      	movs	r3, #1
 8008244:	f7ff fb1a 	bl	800787c <disk_write>
			fs->fsi_flag = 0;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fb30 	bl	80078bc <disk_ioctl>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <sync_fs+0xca>
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	41615252 	.word	0x41615252
 8008274:	61417272 	.word	0x61417272

08008278 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	3b02      	subs	r3, #2
 8008286:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	3b02      	subs	r3, #2
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d301      	bcc.n	8008298 <clust2sect+0x20>
 8008294:	2300      	movs	r3, #0
 8008296:	e008      	b.n	80082aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	895b      	ldrh	r3, [r3, #10]
 800829c:	461a      	mov	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	fb03 f202 	mul.w	r2, r3, r2
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	4413      	add	r3, r2
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
	...

080082b8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b089      	sub	sp, #36	; 0x24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d904      	bls.n	80082d8 <get_fat+0x20>
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d302      	bcc.n	80082de <get_fat+0x26>
		val = 1;	/* Internal error */
 80082d8:	2301      	movs	r3, #1
 80082da:	61fb      	str	r3, [r7, #28]
 80082dc:	e102      	b.n	80084e4 <get_fat+0x22c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	f200 80ee 	bhi.w	80084cc <get_fat+0x214>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <get_fat+0x40>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	08008309 	.word	0x08008309
 80082fc:	08008391 	.word	0x08008391
 8008300:	080083c7 	.word	0x080083c7
 8008304:	080083ff 	.word	0x080083ff
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	085b      	lsrs	r3, r3, #1
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	0a5b      	lsrs	r3, r3, #9
 800831e:	4413      	add	r3, r2
 8008320:	4619      	mov	r1, r3
 8008322:	69b8      	ldr	r0, [r7, #24]
 8008324:	f7ff ff0c 	bl	8008140 <move_window>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	f040 80d1 	bne.w	80084d2 <get_fat+0x21a>
			wc = fs->win[bc++ % SS(fs)];
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	60fa      	str	r2, [r7, #12]
 8008336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	4413      	add	r3, r2
 800833e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008342:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	0a5b      	lsrs	r3, r3, #9
 800834c:	4413      	add	r3, r2
 800834e:	4619      	mov	r1, r3
 8008350:	69b8      	ldr	r0, [r7, #24]
 8008352:	f7ff fef5 	bl	8008140 <move_window>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	f040 80bc 	bne.w	80084d6 <get_fat+0x21e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	4413      	add	r3, r2
 8008368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	461a      	mov	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4313      	orrs	r3, r2
 8008374:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <get_fat+0xce>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	091b      	lsrs	r3, r3, #4
 8008384:	e002      	b.n	800838c <get_fat+0xd4>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800838c:	61fb      	str	r3, [r7, #28]
			break;
 800838e:	e0a9      	b.n	80084e4 <get_fat+0x22c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	4413      	add	r3, r2
 800839a:	4619      	mov	r1, r3
 800839c:	69b8      	ldr	r0, [r7, #24]
 800839e:	f7ff fecf 	bl	8008140 <move_window>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 8098 	bne.w	80084da <get_fat+0x222>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80083b8:	4413      	add	r3, r2
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff fa9c 	bl	80078f8 <ld_word>
 80083c0:	4603      	mov	r3, r0
 80083c2:	61fb      	str	r3, [r7, #28]
			break;
 80083c4:	e08e      	b.n	80084e4 <get_fat+0x22c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	09db      	lsrs	r3, r3, #7
 80083ce:	4413      	add	r3, r2
 80083d0:	4619      	mov	r1, r3
 80083d2:	69b8      	ldr	r0, [r7, #24]
 80083d4:	f7ff feb4 	bl	8008140 <move_window>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d17f      	bne.n	80084de <get_fat+0x226>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80083ec:	4413      	add	r3, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fa9a 	bl	8007928 <ld_dword>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083fa:	61fb      	str	r3, [r7, #28]
			break;
 80083fc:	e072      	b.n	80084e4 <get_fat+0x22c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008404:	4323      	orrs	r3, r4
 8008406:	d061      	beq.n	80084cc <get_fat+0x214>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008418:	f113 31ff 	adds.w	r1, r3, #4294967295
 800841c:	f144 32ff 	adc.w	r2, r4, #4294967295
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	f04f 0400 	mov.w	r4, #0
 8008428:	0a4b      	lsrs	r3, r1, #9
 800842a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800842e:	0a54      	lsrs	r4, r2, #9
 8008430:	461a      	mov	r2, r3
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	895b      	ldrh	r3, [r3, #10]
 8008436:	fbb2 f3f3 	udiv	r3, r2, r3
 800843a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	79db      	ldrb	r3, [r3, #7]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d10e      	bne.n	8008462 <get_fat+0x1aa>
					if (cofs <= clen) {
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	d80a      	bhi.n	8008462 <get_fat+0x1aa>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	429a      	cmp	r2, r3
 8008452:	d002      	beq.n	800845a <get_fat+0x1a2>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	e001      	b.n	800845e <get_fat+0x1a6>
 800845a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800845e:	61fb      	str	r3, [r7, #28]
						break;
 8008460:	e040      	b.n	80084e4 <get_fat+0x22c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	79db      	ldrb	r3, [r3, #7]
 8008466:	2b03      	cmp	r3, #3
 8008468:	d108      	bne.n	800847c <get_fat+0x1c4>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	429a      	cmp	r2, r3
 8008472:	d203      	bcs.n	800847c <get_fat+0x1c4>
					val = clst + 1; 	/* Generate the value */
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	3301      	adds	r3, #1
 8008478:	61fb      	str	r3, [r7, #28]
					break;
 800847a:	e033      	b.n	80084e4 <get_fat+0x22c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	79db      	ldrb	r3, [r3, #7]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d023      	beq.n	80084cc <get_fat+0x214>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <get_fat+0x1dc>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800848c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008490:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8008492:	e027      	b.n	80084e4 <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	09db      	lsrs	r3, r3, #7
 800849c:	4413      	add	r3, r2
 800849e:	4619      	mov	r1, r3
 80084a0:	69b8      	ldr	r0, [r7, #24]
 80084a2:	f7ff fe4d 	bl	8008140 <move_window>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d11a      	bne.n	80084e2 <get_fat+0x22a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80084ba:	4413      	add	r3, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff fa33 	bl	8007928 <ld_dword>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084c8:	61fb      	str	r3, [r7, #28]
					break;
 80084ca:	e00b      	b.n	80084e4 <get_fat+0x22c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80084cc:	2301      	movs	r3, #1
 80084ce:	61fb      	str	r3, [r7, #28]
 80084d0:	e008      	b.n	80084e4 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084d2:	bf00      	nop
 80084d4:	e006      	b.n	80084e4 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084d6:	bf00      	nop
 80084d8:	e004      	b.n	80084e4 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80084da:	bf00      	nop
 80084dc:	e002      	b.n	80084e4 <get_fat+0x22c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <get_fat+0x22c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80084e2:	bf00      	nop
		}
	}

	return val;
 80084e4:	69fb      	ldr	r3, [r7, #28]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3724      	adds	r7, #36	; 0x24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd90      	pop	{r4, r7, pc}
 80084ee:	bf00      	nop

080084f0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80084f0:	b590      	push	{r4, r7, lr}
 80084f2:	b089      	sub	sp, #36	; 0x24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80084fc:	2302      	movs	r3, #2
 80084fe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b01      	cmp	r3, #1
 8008504:	f240 80e2 	bls.w	80086cc <put_fat+0x1dc>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	f080 80dc 	bcs.w	80086cc <put_fat+0x1dc>
		switch (fs->fs_type) {
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	3b01      	subs	r3, #1
 800851a:	2b03      	cmp	r3, #3
 800851c:	f200 80d6 	bhi.w	80086cc <put_fat+0x1dc>
 8008520:	a201      	add	r2, pc, #4	; (adr r2, 8008528 <put_fat+0x38>)
 8008522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008539 	.word	0x08008539
 800852c:	08008615 	.word	0x08008615
 8008530:	08008655 	.word	0x08008655
 8008534:	08008655 	.word	0x08008655
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	61bb      	str	r3, [r7, #24]
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	085b      	lsrs	r3, r3, #1
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	4413      	add	r3, r2
 8008544:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	0a5b      	lsrs	r3, r3, #9
 800854e:	4413      	add	r3, r2
 8008550:	4619      	mov	r1, r3
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f7ff fdf4 	bl	8008140 <move_window>
 8008558:	4603      	mov	r3, r0
 800855a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800855c:	7ffb      	ldrb	r3, [r7, #31]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 80ad 	bne.w	80086be <put_fat+0x1ce>
			p = fs->win + bc++ % SS(fs);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	1c59      	adds	r1, r3, #1
 800856e:	61b9      	str	r1, [r7, #24]
 8008570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008574:	4413      	add	r3, r2
 8008576:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00d      	beq.n	800859e <put_fat+0xae>
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	b25b      	sxtb	r3, r3
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	b25a      	sxtb	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	011b      	lsls	r3, r3, #4
 8008594:	b25b      	sxtb	r3, r3
 8008596:	4313      	orrs	r3, r2
 8008598:	b25b      	sxtb	r3, r3
 800859a:	b2db      	uxtb	r3, r3
 800859c:	e001      	b.n	80085a2 <put_fat+0xb2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	0a5b      	lsrs	r3, r3, #9
 80085b4:	4413      	add	r3, r2
 80085b6:	4619      	mov	r1, r3
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f7ff fdc1 	bl	8008140 <move_window>
 80085be:	4603      	mov	r3, r0
 80085c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085c2:	7ffb      	ldrb	r3, [r7, #31]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d17c      	bne.n	80086c2 <put_fat+0x1d2>
			p = fs->win + bc % SS(fs);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d4:	4413      	add	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <put_fat+0xfa>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	091b      	lsrs	r3, r3, #4
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e00e      	b.n	8008608 <put_fat+0x118>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b25b      	sxtb	r3, r3
 80085f0:	f023 030f 	bic.w	r3, r3, #15
 80085f4:	b25a      	sxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	0a1b      	lsrs	r3, r3, #8
 80085fa:	b25b      	sxtb	r3, r3
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	b25b      	sxtb	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b25b      	sxtb	r3, r3
 8008606:	b2db      	uxtb	r3, r3
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	70da      	strb	r2, [r3, #3]
			break;
 8008612:	e05b      	b.n	80086cc <put_fat+0x1dc>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	4413      	add	r3, r2
 800861e:	4619      	mov	r1, r3
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff fd8d 	bl	8008140 <move_window>
 8008626:	4603      	mov	r3, r0
 8008628:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800862a:	7ffb      	ldrb	r3, [r7, #31]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d14a      	bne.n	80086c6 <put_fat+0x1d6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800863e:	4413      	add	r3, r2
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	b292      	uxth	r2, r2
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff fa4e 	bl	8007ae8 <st_word>
			fs->wflag = 1;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	70da      	strb	r2, [r3, #3]
			break;
 8008652:	e03b      	b.n	80086cc <put_fat+0x1dc>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	09db      	lsrs	r3, r3, #7
 800865c:	4413      	add	r3, r2
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff fd6d 	bl	8008140 <move_window>
 8008666:	4603      	mov	r3, r0
 8008668:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800866a:	7ffb      	ldrb	r3, [r7, #31]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d12c      	bne.n	80086ca <put_fat+0x1da>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d012      	beq.n	800869e <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800868c:	4413      	add	r3, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff f94a 	bl	8007928 <ld_dword>
 8008694:	4603      	mov	r3, r0
 8008696:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800869a:	4323      	orrs	r3, r4
 800869c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80086ac:	4413      	add	r3, r2
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff fa34 	bl	8007b1e <st_dword>
			fs->wflag = 1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	70da      	strb	r2, [r3, #3]
			break;
 80086bc:	e006      	b.n	80086cc <put_fat+0x1dc>
			if (res != FR_OK) break;
 80086be:	bf00      	nop
 80086c0:	e004      	b.n	80086cc <put_fat+0x1dc>
			if (res != FR_OK) break;
 80086c2:	bf00      	nop
 80086c4:	e002      	b.n	80086cc <put_fat+0x1dc>
			if (res != FR_OK) break;
 80086c6:	bf00      	nop
 80086c8:	e000      	b.n	80086cc <put_fat+0x1dc>
			if (res != FR_OK) break;
 80086ca:	bf00      	nop
		}
	}
	return res;
 80086cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3724      	adds	r7, #36	; 0x24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd90      	pop	{r4, r7, pc}
 80086d6:	bf00      	nop

080086d8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08a      	sub	sp, #40	; 0x28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	3b02      	subs	r3, #2
 80086e8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	3b02      	subs	r3, #2
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d301      	bcc.n	80086fa <find_bitmap+0x22>
 80086f6:	2300      	movs	r3, #0
 80086f8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	0b1b      	lsrs	r3, r3, #12
 800870e:	4413      	add	r3, r2
 8008710:	4619      	mov	r1, r3
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7ff fd14 	bl	8008140 <move_window>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <find_bitmap+0x4c>
 800871e:	f04f 33ff 	mov.w	r3, #4294967295
 8008722:	e051      	b.n	80087c8 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	08db      	lsrs	r3, r3, #3
 8008728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872c:	623b      	str	r3, [r7, #32]
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f003 0307 	and.w	r3, r3, #7
 8008734:	2201      	movs	r2, #1
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	4413      	add	r3, r2
 8008744:	333c      	adds	r3, #60	; 0x3c
 8008746:	781a      	ldrb	r2, [r3, #0]
 8008748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800874c:	4013      	ands	r3, r2
 800874e:	74fb      	strb	r3, [r7, #19]
 8008750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	3301      	adds	r3, #1
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	3b02      	subs	r3, #2
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	429a      	cmp	r2, r3
 800876a:	d307      	bcc.n	800877c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800876c:	2300      	movs	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	2300      	movs	r3, #0
 8008772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800877a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800877c:	7cfb      	ldrb	r3, [r7, #19]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	3301      	adds	r3, #1
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d106      	bne.n	800879e <find_bitmap+0xc6>
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	3302      	adds	r3, #2
 8008794:	e018      	b.n	80087c8 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	61bb      	str	r3, [r7, #24]
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d101      	bne.n	80087aa <find_bitmap+0xd2>
 80087a6:	2300      	movs	r3, #0
 80087a8:	e00e      	b.n	80087c8 <find_bitmap+0xf0>
			} while (bm);
 80087aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1c5      	bne.n	800873e <find_bitmap+0x66>
			bm = 1;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	3301      	adds	r3, #1
 80087bc:	623b      	str	r3, [r7, #32]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c4:	d3bb      	bcc.n	800873e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80087c6:	e79e      	b.n	8008706 <find_bitmap+0x2e>
	}
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3728      	adds	r7, #40	; 0x28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3b02      	subs	r3, #2
 80087e2:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	0b1b      	lsrs	r3, r3, #12
 80087ec:	4413      	add	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f003 0307 	and.w	r3, r3, #7
 8008800:	2201      	movs	r2, #1
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	617a      	str	r2, [r7, #20]
 800880e:	4619      	mov	r1, r3
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f7ff fc95 	bl	8008140 <move_window>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <change_bitmap+0x50>
 800881c:	2301      	movs	r3, #1
 800881e:	e03d      	b.n	800889c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	4413      	add	r3, r2
 8008826:	333c      	adds	r3, #60	; 0x3c
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	7ffb      	ldrb	r3, [r7, #31]
 800882c:	4013      	ands	r3, r2
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	bf14      	ite	ne
 8008834:	2301      	movne	r3, #1
 8008836:	2300      	moveq	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	4293      	cmp	r3, r2
 8008840:	d101      	bne.n	8008846 <change_bitmap+0x76>
 8008842:	2302      	movs	r3, #2
 8008844:	e02a      	b.n	800889c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	4413      	add	r3, r2
 800884c:	333c      	adds	r3, #60	; 0x3c
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	7ffb      	ldrb	r3, [r7, #31]
 8008852:	4053      	eors	r3, r2
 8008854:	b2d9      	uxtb	r1, r3
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	4413      	add	r3, r2
 800885c:	333c      	adds	r3, #60	; 0x3c
 800885e:	460a      	mov	r2, r1
 8008860:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3b01      	subs	r3, #1
 800886c:	607b      	str	r3, [r7, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <change_bitmap+0xa8>
 8008874:	2300      	movs	r3, #0
 8008876:	e011      	b.n	800889c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8008878:	7ffb      	ldrb	r3, [r7, #31]
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	7ffb      	ldrb	r3, [r7, #31]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1cd      	bne.n	8008820 <change_bitmap+0x50>
			bm = 1;
 8008884:	2301      	movs	r3, #1
 8008886:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	3301      	adds	r3, #1
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008894:	d3c4      	bcc.n	8008820 <change_bitmap+0x50>
		i = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800889a:	e7b5      	b.n	8008808 <change_bitmap+0x38>
	}
}
 800889c:	4618      	mov	r0, r3
 800889e:	3720      	adds	r7, #32
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	79db      	ldrb	r3, [r3, #7]
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d121      	bne.n	80088f8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	e014      	b.n	80088ec <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	3301      	adds	r3, #1
 80088ca:	461a      	mov	r2, r3
 80088cc:	6979      	ldr	r1, [r7, #20]
 80088ce:	f7ff fe0f 	bl	80084f0 <put_fat>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <fill_first_frag+0x3c>
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	e00c      	b.n	80088fa <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	3301      	adds	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e7      	bne.n	80088c2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b086      	sub	sp, #24
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800890e:	e020      	b.n	8008952 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	1c59      	adds	r1, r3, #1
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d905      	bls.n	8008932 <fill_last_frag+0x30>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	3302      	adds	r3, #2
 8008930:	e000      	b.n	8008934 <fill_last_frag+0x32>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	461a      	mov	r2, r3
 8008936:	f7ff fddb 	bl	80084f0 <put_fat>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <fill_last_frag+0x46>
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	e009      	b.n	800895c <fill_last_frag+0x5a>
		obj->n_frag--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	1e5a      	subs	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1da      	bne.n	8008910 <fill_last_frag+0xe>
	}
	return FR_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08a      	sub	sp, #40	; 0x28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d904      	bls.n	8008992 <remove_chain+0x2e>
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	429a      	cmp	r2, r3
 8008990:	d301      	bcc.n	8008996 <remove_chain+0x32>
 8008992:	2302      	movs	r3, #2
 8008994:	e096      	b.n	8008ac4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d014      	beq.n	80089c6 <remove_chain+0x62>
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d103      	bne.n	80089ac <remove_chain+0x48>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	79db      	ldrb	r3, [r3, #7]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d00c      	beq.n	80089c6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	69b8      	ldr	r0, [r7, #24]
 80089b4:	f7ff fd9c 	bl	80084f0 <put_fat>
 80089b8:	4603      	mov	r3, r0
 80089ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <remove_chain+0x62>
 80089c2:	7ffb      	ldrb	r3, [r7, #31]
 80089c4:	e07e      	b.n	8008ac4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff fc75 	bl	80082b8 <get_fat>
 80089ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d055      	beq.n	8008a82 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <remove_chain+0x7c>
 80089dc:	2302      	movs	r3, #2
 80089de:	e071      	b.n	8008ac4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d101      	bne.n	80089ec <remove_chain+0x88>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e06b      	b.n	8008ac4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d00b      	beq.n	8008a0c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80089f4:	2200      	movs	r2, #0
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	69b8      	ldr	r0, [r7, #24]
 80089fa:	f7ff fd79 	bl	80084f0 <put_fat>
 80089fe:	4603      	mov	r3, r0
 8008a00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008a02:	7ffb      	ldrb	r3, [r7, #31]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <remove_chain+0xa8>
 8008a08:	7ffb      	ldrb	r3, [r7, #31]
 8008a0a:	e05b      	b.n	8008ac4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	69da      	ldr	r2, [r3, #28]
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	3b02      	subs	r3, #2
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d20b      	bcs.n	8008a32 <remove_chain+0xce>
			fs->free_clst++;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	791b      	ldrb	r3, [r3, #4]
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	3301      	adds	r3, #1
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d102      	bne.n	8008a42 <remove_chain+0xde>
			ecl = nxt;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	623b      	str	r3, [r7, #32]
 8008a40:	e017      	b.n	8008a72 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d10f      	bne.n	8008a6a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8008a4a:	6a3a      	ldr	r2, [r7, #32]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	2300      	movs	r3, #0
 8008a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a56:	69b8      	ldr	r0, [r7, #24]
 8008a58:	f7ff feba 	bl	80087d0 <change_bitmap>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8008a60:	7ffb      	ldrb	r3, [r7, #31]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <remove_chain+0x106>
 8008a66:	7ffb      	ldrb	r3, [r7, #31]
 8008a68:	e02c      	b.n	8008ac4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	623b      	str	r3, [r7, #32]
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d3a2      	bcc.n	80089c6 <remove_chain+0x62>
 8008a80:	e000      	b.n	8008a84 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8008a82:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d11a      	bne.n	8008ac2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d103      	bne.n	8008a9a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	71da      	strb	r2, [r3, #7]
 8008a98:	e013      	b.n	8008ac2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	79db      	ldrb	r3, [r3, #7]
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d10f      	bne.n	8008ac2 <remove_chain+0x15e>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d30a      	bcc.n	8008ac2 <remove_chain+0x15e>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d802      	bhi.n	8008ac2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3728      	adds	r7, #40	; 0x28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10d      	bne.n	8008afe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d004      	beq.n	8008af8 <create_chain+0x2c>
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d31b      	bcc.n	8008b30 <create_chain+0x64>
 8008af8:	2301      	movs	r3, #1
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	e018      	b.n	8008b30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fbd9 	bl	80082b8 <get_fat>
 8008b06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d801      	bhi.n	8008b12 <create_chain+0x46>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e0d9      	b.n	8008cc6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b18:	d101      	bne.n	8008b1e <create_chain+0x52>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	e0d3      	b.n	8008cc6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d201      	bcs.n	8008b2c <create_chain+0x60>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	e0cc      	b.n	8008cc6 <create_chain+0x1fa>
		scl = clst;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d164      	bne.n	8008c02 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008b38:	2201      	movs	r2, #1
 8008b3a:	69b9      	ldr	r1, [r7, #24]
 8008b3c:	6938      	ldr	r0, [r7, #16]
 8008b3e:	f7ff fdcb 	bl	80086d8 <find_bitmap>
 8008b42:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <create_chain+0x86>
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d101      	bne.n	8008b56 <create_chain+0x8a>
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	e0b7      	b.n	8008cc6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8008b56:	2301      	movs	r3, #1
 8008b58:	2201      	movs	r2, #1
 8008b5a:	69f9      	ldr	r1, [r7, #28]
 8008b5c:	6938      	ldr	r0, [r7, #16]
 8008b5e:	f7ff fe37 	bl	80087d0 <change_bitmap>
 8008b62:	4603      	mov	r3, r0
 8008b64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d101      	bne.n	8008b70 <create_chain+0xa4>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e0aa      	b.n	8008cc6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d102      	bne.n	8008b7c <create_chain+0xb0>
 8008b76:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7a:	e0a4      	b.n	8008cc6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	71da      	strb	r2, [r3, #7]
 8008b88:	e011      	b.n	8008bae <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	79db      	ldrb	r3, [r3, #7]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d10d      	bne.n	8008bae <create_chain+0xe2>
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	3301      	adds	r3, #1
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d008      	beq.n	8008bae <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2203      	movs	r2, #3
 8008bac:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	79db      	ldrb	r3, [r3, #7]
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d064      	beq.n	8008c80 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d10b      	bne.n	8008bd8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <create_chain+0x104>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	e000      	b.n	8008bd2 <create_chain+0x106>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	61d3      	str	r3, [r2, #28]
 8008bd6:	e053      	b.n	8008c80 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <create_chain+0x11a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff fe89 	bl	8008902 <fill_last_frag>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d142      	bne.n	8008c80 <create_chain+0x1b4>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	61da      	str	r2, [r3, #28]
 8008c00:	e03e      	b.n	8008c80 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d307      	bcc.n	8008c26 <create_chain+0x15a>
				ncl = 2;
 8008c16:	2302      	movs	r3, #2
 8008c18:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d901      	bls.n	8008c26 <create_chain+0x15a>
 8008c22:	2300      	movs	r3, #0
 8008c24:	e04f      	b.n	8008cc6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c26:	69f9      	ldr	r1, [r7, #28]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fb45 	bl	80082b8 <get_fat>
 8008c2e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00e      	beq.n	8008c54 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d003      	beq.n	8008c44 <create_chain+0x178>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c42:	d101      	bne.n	8008c48 <create_chain+0x17c>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	e03e      	b.n	8008cc6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d1da      	bne.n	8008c06 <create_chain+0x13a>
 8008c50:	2300      	movs	r3, #0
 8008c52:	e038      	b.n	8008cc6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8008c54:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5a:	69f9      	ldr	r1, [r7, #28]
 8008c5c:	6938      	ldr	r0, [r7, #16]
 8008c5e:	f7ff fc47 	bl	80084f0 <put_fat>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d109      	bne.n	8008c80 <create_chain+0x1b4>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6938      	ldr	r0, [r7, #16]
 8008c78:	f7ff fc3a 	bl	80084f0 <put_fat>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d116      	bne.n	8008cb4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	69da      	ldr	r2, [r3, #28]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	3b02      	subs	r3, #2
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d804      	bhi.n	8008ca4 <create_chain+0x1d8>
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	1e5a      	subs	r2, r3, #1
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	711a      	strb	r2, [r3, #4]
 8008cb2:	e007      	b.n	8008cc4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d102      	bne.n	8008cc0 <create_chain+0x1f4>
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbe:	e000      	b.n	8008cc2 <create_chain+0x1f6>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008cc4:	69fb      	ldr	r3, [r7, #28]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008cce:	b590      	push	{r4, r7, lr}
 8008cd0:	b089      	sub	sp, #36	; 0x24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008ce8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008cec:	f04f 0000 	mov.w	r0, #0
 8008cf0:	f04f 0100 	mov.w	r1, #0
 8008cf4:	0a58      	lsrs	r0, r3, #9
 8008cf6:	ea40 50c4 	orr.w	r0, r0, r4, lsl #23
 8008cfa:	0a61      	lsrs	r1, r4, #9
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	895b      	ldrh	r3, [r3, #10]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f04f 0400 	mov.w	r4, #0
 8008d06:	461a      	mov	r2, r3
 8008d08:	4623      	mov	r3, r4
 8008d0a:	f7f7 ffbd 	bl	8000c88 <__aeabi_uldivmod>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	61ba      	str	r2, [r7, #24]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <clmt_clust+0x5a>
 8008d24:	2300      	movs	r3, #0
 8008d26:	e010      	b.n	8008d4a <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d307      	bcc.n	8008d40 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d3e:	e7e9      	b.n	8008d14 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8008d40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3724      	adds	r7, #36	; 0x24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd90      	pop	{r4, r7, pc}

08008d52 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b086      	sub	sp, #24
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d102      	bne.n	8008d70 <dir_sdi+0x1e>
 8008d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d6e:	e001      	b.n	8008d74 <dir_sdi+0x22>
 8008d70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d904      	bls.n	8008d84 <dir_sdi+0x32>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f003 031f 	and.w	r3, r3, #31
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008d84:	2302      	movs	r3, #2
 8008d86:	e066      	b.n	8008e56 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d109      	bne.n	8008dae <dir_sdi+0x5c>
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d905      	bls.n	8008dae <dir_sdi+0x5c>
		clst = fs->dirbase;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10c      	bne.n	8008dce <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	8912      	ldrh	r2, [r2, #8]
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d301      	bcc.n	8008dc4 <dir_sdi+0x72>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e048      	b.n	8008e56 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
 8008dcc:	e029      	b.n	8008e22 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	895b      	ldrh	r3, [r3, #10]
 8008dd2:	025b      	lsls	r3, r3, #9
 8008dd4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dd6:	e019      	b.n	8008e0c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6979      	ldr	r1, [r7, #20]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff fa6b 	bl	80082b8 <get_fat>
 8008de2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d101      	bne.n	8008df0 <dir_sdi+0x9e>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e032      	b.n	8008e56 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d904      	bls.n	8008e00 <dir_sdi+0xae>
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d301      	bcc.n	8008e04 <dir_sdi+0xb2>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e028      	b.n	8008e56 <dir_sdi+0x104>
			ofs -= csz;
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d2e1      	bcs.n	8008dd8 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8008e14:	6979      	ldr	r1, [r7, #20]
 8008e16:	6938      	ldr	r0, [r7, #16]
 8008e18:	f7ff fa2e 	bl	8008278 <clust2sect>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <dir_sdi+0xe2>
 8008e30:	2302      	movs	r3, #2
 8008e32:	e010      	b.n	8008e56 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	0a5b      	lsrs	r3, r3, #9
 8008e3c:	441a      	add	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e72:	3320      	adds	r3, #32
 8008e74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00b      	beq.n	8008e96 <dir_next+0x38>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d102      	bne.n	8008e8c <dir_next+0x2e>
 8008e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8a:	e001      	b.n	8008e90 <dir_next+0x32>
 8008e8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d801      	bhi.n	8008e9a <dir_next+0x3c>
 8008e96:	2304      	movs	r3, #4
 8008e98:	e0b2      	b.n	8009000 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f040 80a0 	bne.w	8008fe6 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	8912      	ldrh	r2, [r2, #8]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	f0c0 8090 	bcc.w	8008fe6 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
 8008ecc:	2304      	movs	r3, #4
 8008ece:	e097      	b.n	8009000 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	0a5b      	lsrs	r3, r3, #9
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	8952      	ldrh	r2, [r2, #10]
 8008ed8:	3a01      	subs	r2, #1
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 8082 	bne.w	8008fe6 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7ff f9e4 	bl	80082b8 <get_fat>
 8008ef0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d801      	bhi.n	8008efc <dir_next+0x9e>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e081      	b.n	8009000 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d101      	bne.n	8008f08 <dir_next+0xaa>
 8008f04:	2301      	movs	r3, #1
 8008f06:	e07b      	b.n	8009000 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d35f      	bcc.n	8008fd2 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f1e:	2304      	movs	r3, #4
 8008f20:	e06e      	b.n	8009000 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7ff fdce 	bl	8008acc <create_chain>
 8008f30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <dir_next+0xde>
 8008f38:	2307      	movs	r3, #7
 8008f3a:	e061      	b.n	8009000 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <dir_next+0xe8>
 8008f42:	2302      	movs	r3, #2
 8008f44:	e05c      	b.n	8009000 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d101      	bne.n	8008f52 <dir_next+0xf4>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e056      	b.n	8009000 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	79db      	ldrb	r3, [r3, #7]
 8008f56:	f043 0304 	orr.w	r3, r3, #4
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff f8a9 	bl	80080b8 <sync_window>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <dir_next+0x112>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e047      	b.n	8009000 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	333c      	adds	r3, #60	; 0x3c
 8008f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fea3 	bl	8007cc6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]
 8008f84:	6979      	ldr	r1, [r7, #20]
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff f976 	bl	8008278 <clust2sect>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
 8008f92:	e012      	b.n	8008fba <dir_next+0x15c>
						fs->wflag = 1;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff f88c 	bl	80080b8 <sync_window>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <dir_next+0x14c>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e02a      	b.n	8009000 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	3301      	adds	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	895b      	ldrh	r3, [r3, #10]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d3e6      	bcc.n	8008f94 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad2      	subs	r2, r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8008fd8:	6979      	ldr	r1, [r7, #20]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff f94c 	bl	8008278 <clust2sect>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	441a      	add	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009018:	2100      	movs	r1, #0
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fe99 	bl	8008d52 <dir_sdi>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d140      	bne.n	80090ac <dir_alloc+0xa4>
		n = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	4619      	mov	r1, r3
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f7ff f883 	bl	8008140 <move_window>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d132      	bne.n	80090aa <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b04      	cmp	r3, #4
 800904a:	d108      	bne.n	800905e <dir_alloc+0x56>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	b25b      	sxtb	r3, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	b2db      	uxtb	r3, r3
 8009058:	09db      	lsrs	r3, r3, #7
 800905a:	b2db      	uxtb	r3, r3
 800905c:	e00f      	b.n	800907e <dir_alloc+0x76>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2be5      	cmp	r3, #229	; 0xe5
 8009066:	d004      	beq.n	8009072 <dir_alloc+0x6a>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <dir_alloc+0x6e>
 8009072:	2301      	movs	r3, #1
 8009074:	e000      	b.n	8009078 <dir_alloc+0x70>
 8009076:	2300      	movs	r3, #0
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d007      	beq.n	8009092 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3301      	adds	r3, #1
 8009086:	613b      	str	r3, [r7, #16]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d102      	bne.n	8009096 <dir_alloc+0x8e>
 8009090:	e00c      	b.n	80090ac <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009092:	2300      	movs	r3, #0
 8009094:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009096:	2101      	movs	r1, #1
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fee0 	bl	8008e5e <dir_next>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d0c2      	beq.n	800902e <dir_alloc+0x26>
 80090a8:	e000      	b.n	80090ac <dir_alloc+0xa4>
			if (res != FR_OK) break;
 80090aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d101      	bne.n	80090b6 <dir_alloc+0xae>
 80090b2:	2307      	movs	r3, #7
 80090b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	331a      	adds	r3, #26
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fc12 	bl	80078f8 <ld_word>
 80090d4:	4603      	mov	r3, r0
 80090d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d109      	bne.n	80090f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	3314      	adds	r3, #20
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe fc07 	bl	80078f8 <ld_word>
 80090ea:	4603      	mov	r3, r0
 80090ec:	041b      	lsls	r3, r3, #16
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090f4:	68fb      	ldr	r3, [r7, #12]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	331a      	adds	r3, #26
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	b292      	uxth	r2, r2
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fce7 	bl	8007ae8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b03      	cmp	r3, #3
 8009120:	d109      	bne.n	8009136 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f103 0214 	add.w	r2, r3, #20
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0c1b      	lsrs	r3, r3, #16
 800912c:	b29b      	uxth	r3, r3
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7fe fcd9 	bl	8007ae8 <st_word>
	}
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	331a      	adds	r3, #26
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fbd2 	bl	80078f8 <ld_word>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <cmp_lfn+0x1e>
 800915a:	2300      	movs	r3, #0
 800915c:	e059      	b.n	8009212 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009166:	1e5a      	subs	r2, r3, #1
 8009168:	4613      	mov	r3, r2
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009174:	2301      	movs	r3, #1
 8009176:	81fb      	strh	r3, [r7, #14]
 8009178:	2300      	movs	r3, #0
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	e033      	b.n	80091e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800917e:	4a27      	ldr	r2, [pc, #156]	; (800921c <cmp_lfn+0xdc>)
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	4413      	add	r3, r2
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	4413      	add	r3, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fbb3 	bl	80078f8 <ld_word>
 8009192:	4603      	mov	r3, r0
 8009194:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009196:	89fb      	ldrh	r3, [r7, #14]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01a      	beq.n	80091d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2bfe      	cmp	r3, #254	; 0xfe
 80091a0:	d812      	bhi.n	80091c8 <cmp_lfn+0x88>
 80091a2:	89bb      	ldrh	r3, [r7, #12]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f004 ff55 	bl	800e054 <ff_wtoupper>
 80091aa:	4603      	mov	r3, r0
 80091ac:	461c      	mov	r4, r3
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	617a      	str	r2, [r7, #20]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	f004 ff49 	bl	800e054 <ff_wtoupper>
 80091c2:	4603      	mov	r3, r0
 80091c4:	429c      	cmp	r4, r3
 80091c6:	d001      	beq.n	80091cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80091c8:	2300      	movs	r3, #0
 80091ca:	e022      	b.n	8009212 <cmp_lfn+0xd2>
			}
			wc = uc;
 80091cc:	89bb      	ldrh	r3, [r7, #12]
 80091ce:	81fb      	strh	r3, [r7, #14]
 80091d0:	e006      	b.n	80091e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80091d2:	89bb      	ldrh	r3, [r7, #12]
 80091d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091d8:	4293      	cmp	r3, r2
 80091da:	d001      	beq.n	80091e0 <cmp_lfn+0xa0>
 80091dc:	2300      	movs	r3, #0
 80091de:	e018      	b.n	8009212 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	3301      	adds	r3, #1
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b0c      	cmp	r3, #12
 80091ea:	d9c8      	bls.n	800917e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <cmp_lfn+0xd0>
 80091f8:	89fb      	ldrh	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d008      	beq.n	8009210 <cmp_lfn+0xd0>
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	4413      	add	r3, r2
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <cmp_lfn+0xd0>
 800920c:	2300      	movs	r3, #0
 800920e:	e000      	b.n	8009212 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009210:	2301      	movs	r3, #1
}
 8009212:	4618      	mov	r0, r3
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	bd90      	pop	{r4, r7, pc}
 800921a:	bf00      	nop
 800921c:	08015638 	.word	0x08015638

08009220 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	331a      	adds	r3, #26
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fb62 	bl	80078f8 <ld_word>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <pick_lfn+0x1e>
 800923a:	2300      	movs	r3, #0
 800923c:	e04d      	b.n	80092da <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009246:	1e5a      	subs	r2, r3, #1
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009254:	2301      	movs	r3, #1
 8009256:	81fb      	strh	r3, [r7, #14]
 8009258:	2300      	movs	r3, #0
 800925a:	613b      	str	r3, [r7, #16]
 800925c:	e028      	b.n	80092b0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800925e:	4a21      	ldr	r2, [pc, #132]	; (80092e4 <pick_lfn+0xc4>)
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	4413      	add	r3, r2
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	4413      	add	r3, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fb43 	bl	80078f8 <ld_word>
 8009272:	4603      	mov	r3, r0
 8009274:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00f      	beq.n	800929c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2bfe      	cmp	r3, #254	; 0xfe
 8009280:	d901      	bls.n	8009286 <pick_lfn+0x66>
 8009282:	2300      	movs	r3, #0
 8009284:	e029      	b.n	80092da <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009286:	89bb      	ldrh	r3, [r7, #12]
 8009288:	81fb      	strh	r3, [r7, #14]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	617a      	str	r2, [r7, #20]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	89fa      	ldrh	r2, [r7, #14]
 8009298:	801a      	strh	r2, [r3, #0]
 800929a:	e006      	b.n	80092aa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800929c:	89bb      	ldrh	r3, [r7, #12]
 800929e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d001      	beq.n	80092aa <pick_lfn+0x8a>
 80092a6:	2300      	movs	r3, #0
 80092a8:	e017      	b.n	80092da <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	3301      	adds	r3, #1
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b0c      	cmp	r3, #12
 80092b4:	d9d3      	bls.n	800925e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2bfe      	cmp	r3, #254	; 0xfe
 80092c6:	d901      	bls.n	80092cc <pick_lfn+0xac>
 80092c8:	2300      	movs	r3, #0
 80092ca:	e006      	b.n	80092da <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	2200      	movs	r2, #0
 80092d6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80092d8:	2301      	movs	r3, #1
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	08015638 	.word	0x08015638

080092e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4611      	mov	r1, r2
 80092f4:	461a      	mov	r2, r3
 80092f6:	460b      	mov	r3, r1
 80092f8:	71fb      	strb	r3, [r7, #7]
 80092fa:	4613      	mov	r3, r2
 80092fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	330d      	adds	r3, #13
 8009302:	79ba      	ldrb	r2, [r7, #6]
 8009304:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	330b      	adds	r3, #11
 800930a:	220f      	movs	r2, #15
 800930c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	330c      	adds	r3, #12
 8009312:	2200      	movs	r2, #0
 8009314:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	331a      	adds	r3, #26
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fbe3 	bl	8007ae8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	1e5a      	subs	r2, r3, #1
 8009326:	4613      	mov	r3, r2
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	82fb      	strh	r3, [r7, #22]
 8009336:	2300      	movs	r3, #0
 8009338:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800933a:	8afb      	ldrh	r3, [r7, #22]
 800933c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009340:	4293      	cmp	r3, r2
 8009342:	d007      	beq.n	8009354 <put_lfn+0x6c>
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	61fa      	str	r2, [r7, #28]
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009354:	4a17      	ldr	r2, [pc, #92]	; (80093b4 <put_lfn+0xcc>)
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	4413      	add	r3, r2
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	8afa      	ldrh	r2, [r7, #22]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fbbe 	bl	8007ae8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800936c:	8afb      	ldrh	r3, [r7, #22]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <put_lfn+0x90>
 8009372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009376:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	3301      	adds	r3, #1
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	2b0c      	cmp	r3, #12
 8009382:	d9da      	bls.n	800933a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009384:	8afb      	ldrh	r3, [r7, #22]
 8009386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800938a:	4293      	cmp	r3, r2
 800938c:	d006      	beq.n	800939c <put_lfn+0xb4>
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	005b      	lsls	r3, r3, #1
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d103      	bne.n	80093a4 <put_lfn+0xbc>
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	79fa      	ldrb	r2, [r7, #7]
 80093a8:	701a      	strb	r2, [r3, #0]
}
 80093aa:	bf00      	nop
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	08015638 	.word	0x08015638

080093b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08c      	sub	sp, #48	; 0x30
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
 80093c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80093c6:	220b      	movs	r2, #11
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7fe fc5a 	bl	8007c84 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d92b      	bls.n	800942e <gen_numname+0x76>
		sr = seq;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80093da:	e022      	b.n	8009422 <gen_numname+0x6a>
			wc = *lfn++;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	1c9a      	adds	r2, r3, #2
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80093e6:	2300      	movs	r3, #0
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ea:	e017      	b.n	800941c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	005a      	lsls	r2, r3, #1
 80093f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	4413      	add	r3, r2
 80093f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80093fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093fc:	085b      	lsrs	r3, r3, #1
 80093fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <gen_numname+0x5e>
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009410:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009414:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	3301      	adds	r3, #1
 800941a:	62bb      	str	r3, [r7, #40]	; 0x28
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b0f      	cmp	r3, #15
 8009420:	d9e4      	bls.n	80093ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	881b      	ldrh	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1d8      	bne.n	80093dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800942e:	2307      	movs	r3, #7
 8009430:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	b2db      	uxtb	r3, r3
 800943c:	3330      	adds	r3, #48	; 0x30
 800943e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009446:	2b39      	cmp	r3, #57	; 0x39
 8009448:	d904      	bls.n	8009454 <gen_numname+0x9c>
 800944a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800944e:	3307      	adds	r3, #7
 8009450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009456:	1e5a      	subs	r2, r3, #1
 8009458:	62ba      	str	r2, [r7, #40]	; 0x28
 800945a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800945e:	4413      	add	r3, r2
 8009460:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009464:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	091b      	lsrs	r3, r3, #4
 800946c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1de      	bne.n	8009432 <gen_numname+0x7a>
	ns[i] = '~';
 8009474:	f107 0214 	add.w	r2, r7, #20
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	4413      	add	r3, r2
 800947c:	227e      	movs	r2, #126	; 0x7e
 800947e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009480:	2300      	movs	r3, #0
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
 8009484:	e002      	b.n	800948c <gen_numname+0xd4>
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	3301      	adds	r3, #1
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
 800948c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	429a      	cmp	r2, r3
 8009492:	d205      	bcs.n	80094a0 <gen_numname+0xe8>
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	4413      	add	r3, r2
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b20      	cmp	r3, #32
 800949e:	d1f2      	bne.n	8009486 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	d808      	bhi.n	80094b8 <gen_numname+0x100>
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80094ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80094b0:	4413      	add	r3, r2
 80094b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80094b6:	e000      	b.n	80094ba <gen_numname+0x102>
 80094b8:	2120      	movs	r1, #32
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	627a      	str	r2, [r7, #36]	; 0x24
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4413      	add	r3, r2
 80094c4:	460a      	mov	r2, r1
 80094c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80094c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ca:	2b07      	cmp	r3, #7
 80094cc:	d9e8      	bls.n	80094a0 <gen_numname+0xe8>
}
 80094ce:	bf00      	nop
 80094d0:	3730      	adds	r7, #48	; 0x30
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80094e2:	230b      	movs	r3, #11
 80094e4:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	0852      	lsrs	r2, r2, #1
 80094ec:	01db      	lsls	r3, r3, #7
 80094ee:	4313      	orrs	r3, r2
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	1c59      	adds	r1, r3, #1
 80094f6:	6079      	str	r1, [r7, #4]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	4413      	add	r3, r2
 80094fc:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	3b01      	subs	r3, #1
 8009502:	60bb      	str	r3, [r7, #8]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1ed      	bne.n	80094e6 <sum_sfn+0x10>
	return sum;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8009518:	b480      	push	{r7}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3301      	adds	r3, #1
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	3301      	adds	r3, #1
 8009528:	015b      	lsls	r3, r3, #5
 800952a:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800952c:	2300      	movs	r3, #0
 800952e:	827b      	strh	r3, [r7, #18]
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e018      	b.n	8009568 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d103      	bne.n	8009544 <xdir_sum+0x2c>
			i++;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	3301      	adds	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
 8009542:	e00e      	b.n	8009562 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8009544:	8a7b      	ldrh	r3, [r7, #18]
 8009546:	03db      	lsls	r3, r3, #15
 8009548:	b29a      	uxth	r2, r3
 800954a:	8a7b      	ldrh	r3, [r7, #18]
 800954c:	085b      	lsrs	r3, r3, #1
 800954e:	b29b      	uxth	r3, r3
 8009550:	4413      	add	r3, r2
 8009552:	b29a      	uxth	r2, r3
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	440b      	add	r3, r1
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	b29b      	uxth	r3, r3
 800955e:	4413      	add	r3, r2
 8009560:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	3301      	adds	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	429a      	cmp	r2, r3
 800956e:	d3e2      	bcc.n	8009536 <xdir_sum+0x1e>
		}
	}
	return sum;
 8009570:	8a7b      	ldrh	r3, [r7, #18]
}
 8009572:	4618      	mov	r0, r3
 8009574:	371c      	adds	r7, #28
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800958a:	e01f      	b.n	80095cc <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800958c:	89bb      	ldrh	r3, [r7, #12]
 800958e:	4618      	mov	r0, r3
 8009590:	f004 fd60 	bl	800e054 <ff_wtoupper>
 8009594:	4603      	mov	r3, r0
 8009596:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009598:	89fb      	ldrh	r3, [r7, #14]
 800959a:	03db      	lsls	r3, r3, #15
 800959c:	b29a      	uxth	r2, r3
 800959e:	89fb      	ldrh	r3, [r7, #14]
 80095a0:	085b      	lsrs	r3, r3, #1
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	89bb      	ldrh	r3, [r7, #12]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80095b2:	89fb      	ldrh	r3, [r7, #14]
 80095b4:	03db      	lsls	r3, r3, #15
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	89fb      	ldrh	r3, [r7, #14]
 80095ba:	085b      	lsrs	r3, r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	4413      	add	r3, r2
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	89bb      	ldrh	r3, [r7, #12]
 80095c4:	0a1b      	lsrs	r3, r3, #8
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	4413      	add	r3, r2
 80095ca:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	1c9a      	adds	r2, r3, #2
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	81bb      	strh	r3, [r7, #12]
 80095d6:	89bb      	ldrh	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1d7      	bne.n	800958c <xname_sum+0xe>
	}
	return sum;
 80095dc:	89fb      	ldrh	r3, [r7, #14]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <xsum32>:
static
DWORD xsum32 (
	BYTE  dat,	/* Data to be sumed */
	DWORD sum	/* Previous value */
)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	4603      	mov	r3, r0
 80095ee:	6039      	str	r1, [r7, #0]
 80095f0:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	ea4f 0273 	mov.w	r2, r3, ror #1
 80095f8:	79fb      	ldrb	r3, [r7, #7]
 80095fa:	4413      	add	r3, r2
 80095fc:	603b      	str	r3, [r7, #0]
	return sum;
 80095fe:	683b      	ldr	r3, [r7, #0]
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800960c:	b590      	push	{r4, r7, lr}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800961a:	2340      	movs	r3, #64	; 0x40
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	2300      	movs	r3, #0
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	e02c      	b.n	800967e <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f003 031f 	and.w	r3, r3, #31
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <get_xdir_info+0x28>
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3302      	adds	r3, #2
 8009632:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	4413      	add	r3, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe f95c 	bl	80078f8 <ld_word>
 8009640:	4603      	mov	r3, r0
 8009642:	2100      	movs	r1, #0
 8009644:	4618      	mov	r0, r3
 8009646:	f004 fcc9 	bl	800dfdc <ff_convert>
 800964a:	4603      	mov	r3, r0
 800964c:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800964e:	897b      	ldrh	r3, [r7, #10]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <get_xdir_info+0x4e>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2bfe      	cmp	r3, #254	; 0xfe
 8009658:	d902      	bls.n	8009660 <get_xdir_info+0x54>
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e015      	b.n	800968c <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	617a      	str	r2, [r7, #20]
 8009666:	897a      	ldrh	r2, [r7, #10]
 8009668:	b2d1      	uxtb	r1, r2
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	4413      	add	r3, r2
 800966e:	460a      	mov	r2, r1
 8009670:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3302      	adds	r3, #2
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3301      	adds	r3, #1
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3323      	adds	r3, #35	; 0x23
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4293      	cmp	r3, r2
 800968a:	d3cb      	bcc.n	8009624 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <get_xdir_info+0x94>
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	617a      	str	r2, [r7, #20]
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	4413      	add	r3, r2
 800969c:	223f      	movs	r2, #63	; 0x3f
 800969e:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	4413      	add	r3, r2
 80096a6:	331a      	adds	r3, #26
 80096a8:	2200      	movs	r2, #0
 80096aa:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2200      	movs	r2, #0
 80096b0:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	791a      	ldrb	r2, [r3, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	7b1b      	ldrb	r3, [r3, #12]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d107      	bne.n	80096d6 <get_xdir_info+0xca>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3338      	adds	r3, #56	; 0x38
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe f94f 	bl	800796e <ld_qword>
 80096d0:	4603      	mov	r3, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	e003      	b.n	80096de <get_xdir_info+0xd2>
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	f04f 0400 	mov.w	r4, #0
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	330c      	adds	r3, #12
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe f905 	bl	80078f8 <ld_word>
 80096ee:	4603      	mov	r3, r0
 80096f0:	461a      	mov	r2, r3
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	330e      	adds	r3, #14
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe f8fc 	bl	80078f8 <ld_word>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	811a      	strh	r2, [r3, #8]
}
 8009708:	bf00      	nop
 800970a:	371c      	adds	r7, #28
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8009710:	b590      	push	{r4, r7, lr}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009728:	4619      	mov	r1, r3
 800972a:	4610      	mov	r0, r2
 800972c:	f7fe fd08 	bl	8008140 <move_window>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <load_xdir+0x2e>
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	e09f      	b.n	800987e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b85      	cmp	r3, #133	; 0x85
 8009746:	d001      	beq.n	800974c <load_xdir+0x3c>
 8009748:	2302      	movs	r3, #2
 800974a:	e098      	b.n	800987e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009750:	2220      	movs	r2, #32
 8009752:	4619      	mov	r1, r3
 8009754:	6938      	ldr	r0, [r7, #16]
 8009756:	f7fe fa95 	bl	8007c84 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	3301      	adds	r3, #1
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	015b      	lsls	r3, r3, #5
 8009764:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b5f      	cmp	r3, #95	; 0x5f
 800976a:	d903      	bls.n	8009774 <load_xdir+0x64>
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009772:	d901      	bls.n	8009778 <load_xdir+0x68>
 8009774:	2302      	movs	r3, #2
 8009776:	e082      	b.n	800987e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8009778:	2100      	movs	r1, #0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fb6f 	bl	8008e5e <dir_next>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <load_xdir+0x7e>
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	e077      	b.n	800987e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f7fe fcd1 	bl	8008140 <move_window>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <load_xdir+0x9c>
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	e068      	b.n	800987e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2bc0      	cmp	r3, #192	; 0xc0
 80097b4:	d001      	beq.n	80097ba <load_xdir+0xaa>
 80097b6:	2302      	movs	r3, #2
 80097b8:	e061      	b.n	800987e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f103 0020 	add.w	r0, r3, #32
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c4:	2220      	movs	r2, #32
 80097c6:	4619      	mov	r1, r3
 80097c8:	f7fe fa5c 	bl	8007c84 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	3323      	adds	r3, #35	; 0x23
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	332c      	adds	r3, #44	; 0x2c
 80097d4:	4a2c      	ldr	r2, [pc, #176]	; (8009888 <load_xdir+0x178>)
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	015b      	lsls	r3, r3, #5
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d201      	bcs.n	80097e8 <load_xdir+0xd8>
 80097e4:	2302      	movs	r3, #2
 80097e6:	e04a      	b.n	800987e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80097e8:	2340      	movs	r3, #64	; 0x40
 80097ea:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80097ec:	2100      	movs	r1, #0
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fb35 	bl	8008e5e <dir_next>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <load_xdir+0xf2>
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	e03d      	b.n	800987e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980a:	4619      	mov	r1, r3
 800980c:	4610      	mov	r0, r2
 800980e:	f7fe fc97 	bl	8008140 <move_window>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <load_xdir+0x110>
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	e02e      	b.n	800987e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2bc1      	cmp	r3, #193	; 0xc1
 8009828:	d001      	beq.n	800982e <load_xdir+0x11e>
 800982a:	2302      	movs	r3, #2
 800982c:	e027      	b.n	800987e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009834:	d208      	bcs.n	8009848 <load_xdir+0x138>
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	18d0      	adds	r0, r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009840:	2220      	movs	r2, #32
 8009842:	4619      	mov	r1, r3
 8009844:	f7fe fa1e 	bl	8007c84 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	3320      	adds	r3, #32
 800984c:	617b      	str	r3, [r7, #20]
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d3ca      	bcc.n	80097ec <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800985c:	d80e      	bhi.n	800987c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800985e:	6938      	ldr	r0, [r7, #16]
 8009860:	f7ff fe5a 	bl	8009518 <xdir_sum>
 8009864:	4603      	mov	r3, r0
 8009866:	461c      	mov	r4, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3302      	adds	r3, #2
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe f843 	bl	80078f8 <ld_word>
 8009872:	4603      	mov	r3, r0
 8009874:	429c      	cmp	r4, r3
 8009876:	d001      	beq.n	800987c <load_xdir+0x16c>
 8009878:	2302      	movs	r3, #2
 800987a:	e000      	b.n	800987e <load_xdir+0x16e>
	}
	return FR_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	bd90      	pop	{r4, r7, pc}
 8009886:	bf00      	nop
 8009888:	88888889 	.word	0x88888889

0800988c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800988c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	6a1a      	ldr	r2, [r3, #32]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	469b      	mov	fp, r3
 80098b8:	f04f 0c00 	mov.w	ip, #0
 80098bc:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	ea0b 0301 	and.w	r3, fp, r1
 80098c8:	ea0c 0402 	and.w	r4, ip, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fa36 	bl	8008d52 <dir_sdi>
 80098e6:	4603      	mov	r3, r0
 80098e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff ff0d 	bl	8009710 <load_xdir>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009906 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009906:	b590      	push	{r4, r7, lr}
 8009908:	b087      	sub	sp, #28
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	1c9c      	adds	r4, r3, #2
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fdfc 	bl	8009518 <xdir_sum>
 8009920:	4603      	mov	r3, r0
 8009922:	4619      	mov	r1, r3
 8009924:	4620      	mov	r0, r4
 8009926:	f7fe f8df 	bl	8007ae8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	3301      	adds	r3, #1
 8009932:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7ff fa09 	bl	8008d52 <dir_sdi>
 8009940:	4603      	mov	r3, r0
 8009942:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009944:	e026      	b.n	8009994 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7fe fbf5 	bl	8008140 <move_window>
 8009956:	4603      	mov	r3, r0
 8009958:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d11d      	bne.n	800999c <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009964:	2220      	movs	r2, #32
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe f98b 	bl	8007c84 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2201      	movs	r2, #1
 8009974:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3b01      	subs	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <store_xdir+0x9a>
		dirb += SZDIRE;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3320      	adds	r3, #32
 8009986:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8009988:	2100      	movs	r1, #0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fa67 	bl	8008e5e <dir_next>
 8009990:	4603      	mov	r3, r0
 8009992:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0d5      	beq.n	8009946 <store_xdir+0x40>
 800999a:	e002      	b.n	80099a2 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800999c:	bf00      	nop
 800999e:	e000      	b.n	80099a2 <store_xdir+0x9c>
		if (--nent == 0) break;
 80099a0:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <store_xdir+0xa8>
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d101      	bne.n	80099b2 <store_xdir+0xac>
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	e000      	b.n	80099b4 <store_xdir+0xae>
 80099b2:	2302      	movs	r3, #2
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd90      	pop	{r4, r7, pc}

080099bc <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80099bc:	b590      	push	{r4, r7, lr}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 80099c6:	2240      	movs	r2, #64	; 0x40
 80099c8:	2100      	movs	r1, #0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fe f97b 	bl	8007cc6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2285      	movs	r2, #133	; 0x85
 80099d4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3320      	adds	r3, #32
 80099da:	22c0      	movs	r2, #192	; 0xc0
 80099dc:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80099de:	2300      	movs	r3, #0
 80099e0:	72bb      	strb	r3, [r7, #10]
 80099e2:	2301      	movs	r3, #1
 80099e4:	72fb      	strb	r3, [r7, #11]
 80099e6:	2301      	movs	r3, #1
 80099e8:	813b      	strh	r3, [r7, #8]
 80099ea:	2340      	movs	r3, #64	; 0x40
 80099ec:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	60fa      	str	r2, [r7, #12]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	4413      	add	r3, r2
 80099f8:	22c1      	movs	r2, #193	; 0xc1
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	60fa      	str	r2, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4413      	add	r3, r2
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009a0a:	893b      	ldrh	r3, [r7, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <create_xdir+0x6c>
 8009a10:	7abb      	ldrb	r3, [r7, #10]
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	4413      	add	r3, r2
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	813b      	strh	r3, [r7, #8]
 8009a1c:	893b      	ldrh	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <create_xdir+0x6c>
 8009a22:	7abb      	ldrb	r3, [r7, #10]
 8009a24:	3301      	adds	r3, #1
 8009a26:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	893a      	ldrh	r2, [r7, #8]
 8009a30:	4611      	mov	r1, r2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe f858 	bl	8007ae8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f003 031f 	and.w	r3, r3, #31
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e0      	bne.n	8009a0a <create_xdir+0x4e>
		nb++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009a4e:	7abb      	ldrb	r3, [r7, #10]
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4413      	add	r3, r2
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1c8      	bne.n	80099ee <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3323      	adds	r3, #35	; 0x23
 8009a60:	7aba      	ldrb	r2, [r7, #10]
 8009a62:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3301      	adds	r3, #1
 8009a68:	7afa      	ldrb	r2, [r7, #11]
 8009a6a:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8009a72:	6838      	ldr	r0, [r7, #0]
 8009a74:	f7ff fd83 	bl	800957e <xname_sum>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7fe f833 	bl	8007ae8 <st_word>
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd90      	pop	{r4, r7, pc}

08009a8a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b086      	sub	sp, #24
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009a94:	2304      	movs	r3, #4
 8009a96:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009a9e:	23ff      	movs	r3, #255	; 0xff
 8009aa0:	757b      	strb	r3, [r7, #21]
 8009aa2:	23ff      	movs	r3, #255	; 0xff
 8009aa4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009aa6:	e09f      	b.n	8009be8 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	4619      	mov	r1, r3
 8009aae:	6938      	ldr	r0, [r7, #16]
 8009ab0:	f7fe fb46 	bl	8008140 <move_window>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 809a 	bne.w	8009bf4 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009ac8:	7dbb      	ldrb	r3, [r7, #22]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009ace:	2304      	movs	r3, #4
 8009ad0:	75fb      	strb	r3, [r7, #23]
 8009ad2:	e096      	b.n	8009c02 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d118      	bne.n	8009b0e <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8009adc:	7dbb      	ldrb	r3, [r7, #22]
 8009ade:	2b85      	cmp	r3, #133	; 0x85
 8009ae0:	d179      	bne.n	8009bd6 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fe10 	bl	8009710 <load_xdir>
 8009af0:	4603      	mov	r3, r0
 8009af2:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d17e      	bne.n	8009bf8 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	3304      	adds	r3, #4
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	719a      	strb	r2, [r3, #6]
					}
					break;
 8009b0c:	e074      	b.n	8009bf8 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b12:	330b      	adds	r3, #11
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b1a:	73fb      	strb	r3, [r7, #15]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	7bfa      	ldrb	r2, [r7, #15]
 8009b20:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009b22:	7dbb      	ldrb	r3, [r7, #22]
 8009b24:	2be5      	cmp	r3, #229	; 0xe5
 8009b26:	d00e      	beq.n	8009b46 <dir_read+0xbc>
 8009b28:	7dbb      	ldrb	r3, [r7, #22]
 8009b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b2c:	d00b      	beq.n	8009b46 <dir_read+0xbc>
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	f023 0320 	bic.w	r3, r3, #32
 8009b34:	2b08      	cmp	r3, #8
 8009b36:	bf0c      	ite	eq
 8009b38:	2301      	moveq	r3, #1
 8009b3a:	2300      	movne	r3, #0
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d002      	beq.n	8009b4c <dir_read+0xc2>
				ord = 0xFF;
 8009b46:	23ff      	movs	r3, #255	; 0xff
 8009b48:	757b      	strb	r3, [r7, #21]
 8009b4a:	e044      	b.n	8009bd6 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d12f      	bne.n	8009bb2 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009b52:	7dbb      	ldrb	r3, [r7, #22]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00d      	beq.n	8009b78 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b60:	7b5b      	ldrb	r3, [r3, #13]
 8009b62:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009b64:	7dbb      	ldrb	r3, [r7, #22]
 8009b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b6a:	75bb      	strb	r3, [r7, #22]
 8009b6c:	7dbb      	ldrb	r3, [r7, #22]
 8009b6e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009b78:	7dba      	ldrb	r2, [r7, #22]
 8009b7a:	7d7b      	ldrb	r3, [r7, #21]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d115      	bne.n	8009bac <dir_read+0x122>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b84:	330d      	adds	r3, #13
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	7d3a      	ldrb	r2, [r7, #20]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d10e      	bne.n	8009bac <dir_read+0x122>
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b96:	4619      	mov	r1, r3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	f7ff fb41 	bl	8009220 <pick_lfn>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <dir_read+0x122>
 8009ba4:	7d7b      	ldrb	r3, [r7, #21]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	e000      	b.n	8009bae <dir_read+0x124>
 8009bac:	23ff      	movs	r3, #255	; 0xff
 8009bae:	757b      	strb	r3, [r7, #21]
 8009bb0:	e011      	b.n	8009bd6 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8009bb2:	7d7b      	ldrb	r3, [r7, #21]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <dir_read+0x142>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fc8a 	bl	80094d6 <sum_sfn>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	7d3b      	ldrb	r3, [r7, #20]
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d017      	beq.n	8009bfc <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8009bd4:	e012      	b.n	8009bfc <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7ff f940 	bl	8008e5e <dir_next>
 8009bde:	4603      	mov	r3, r0
 8009be0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10b      	bne.n	8009c00 <dir_read+0x176>
	while (dp->sect) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f47f af5b 	bne.w	8009aa8 <dir_read+0x1e>
 8009bf2:	e006      	b.n	8009c02 <dir_read+0x178>
		if (res != FR_OK) break;
 8009bf4:	bf00      	nop
 8009bf6:	e004      	b.n	8009c02 <dir_read+0x178>
					break;
 8009bf8:	bf00      	nop
 8009bfa:	e002      	b.n	8009c02 <dir_read+0x178>
					break;
 8009bfc:	bf00      	nop
 8009bfe:	e000      	b.n	8009c02 <dir_read+0x178>
		if (res != FR_OK) break;
 8009c00:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <dir_read+0x184>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b089      	sub	sp, #36	; 0x24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c26:	2100      	movs	r1, #0
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff f892 	bl	8008d52 <dir_sdi>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009c32:	7ffb      	ldrb	r3, [r7, #31]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <dir_find+0x24>
 8009c38:	7ffb      	ldrb	r3, [r7, #31]
 8009c3a:	e112      	b.n	8009e62 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d164      	bne.n	8009d0e <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7ff fc98 	bl	800957e <xname_sum>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009c52:	e04f      	b.n	8009cf4 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	3324      	adds	r3, #36	; 0x24
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fd fe4c 	bl	80078f8 <ld_word>
 8009c60:	4603      	mov	r3, r0
 8009c62:	461a      	mov	r2, r3
 8009c64:	893b      	ldrh	r3, [r7, #8]
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d000      	beq.n	8009c6c <dir_find+0x54>
 8009c6a:	e043      	b.n	8009cf4 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009c74:	76fb      	strb	r3, [r7, #27]
 8009c76:	2340      	movs	r3, #64	; 0x40
 8009c78:	617b      	str	r3, [r7, #20]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	e029      	b.n	8009cd4 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f003 031f 	and.w	r3, r3, #31
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <dir_find+0x78>
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	691a      	ldr	r2, [r3, #16]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	4413      	add	r3, r2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fd fe2d 	bl	80078f8 <ld_word>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f004 f9d7 	bl	800e054 <ff_wtoupper>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461c      	mov	r4, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4413      	add	r3, r2
 8009cb4:	881b      	ldrh	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f004 f9cc 	bl	800e054 <ff_wtoupper>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	429c      	cmp	r4, r3
 8009cc0:	d10c      	bne.n	8009cdc <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009cc2:	7efb      	ldrb	r3, [r7, #27]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	76fb      	strb	r3, [r7, #27]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	3302      	adds	r3, #2
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	7efb      	ldrb	r3, [r7, #27]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1d2      	bne.n	8009c80 <dir_find+0x68>
 8009cda:	e000      	b.n	8009cde <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009cdc:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009cde:	7efb      	ldrb	r3, [r7, #27]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d107      	bne.n	8009cf4 <dir_find+0xdc>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d009      	beq.n	8009d08 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff fec7 	bl	8009a8a <dir_read>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	7ffb      	ldrb	r3, [r7, #31]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0a6      	beq.n	8009c54 <dir_find+0x3c>
 8009d06:	e000      	b.n	8009d0a <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009d08:	bf00      	nop
		}
		return res;
 8009d0a:	7ffb      	ldrb	r3, [r7, #31]
 8009d0c:	e0a9      	b.n	8009e62 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d0e:	23ff      	movs	r3, #255	; 0xff
 8009d10:	773b      	strb	r3, [r7, #28]
 8009d12:	7f3b      	ldrb	r3, [r7, #28]
 8009d14:	777b      	strb	r3, [r7, #29]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d22:	4619      	mov	r1, r3
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7fe fa0b 	bl	8008140 <move_window>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8009d2e:	7ffb      	ldrb	r3, [r7, #31]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f040 8090 	bne.w	8009e56 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d3e:	7fbb      	ldrb	r3, [r7, #30]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <dir_find+0x132>
 8009d44:	2304      	movs	r3, #4
 8009d46:	77fb      	strb	r3, [r7, #31]
 8009d48:	e08a      	b.n	8009e60 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4e:	330b      	adds	r3, #11
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d56:	72fb      	strb	r3, [r7, #11]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7afa      	ldrb	r2, [r7, #11]
 8009d5c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009d5e:	7fbb      	ldrb	r3, [r7, #30]
 8009d60:	2be5      	cmp	r3, #229	; 0xe5
 8009d62:	d007      	beq.n	8009d74 <dir_find+0x15c>
 8009d64:	7afb      	ldrb	r3, [r7, #11]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <dir_find+0x16a>
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	2b0f      	cmp	r3, #15
 8009d72:	d006      	beq.n	8009d82 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d74:	23ff      	movs	r3, #255	; 0xff
 8009d76:	777b      	strb	r3, [r7, #29]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009d80:	e05e      	b.n	8009e40 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009d82:	7afb      	ldrb	r3, [r7, #11]
 8009d84:	2b0f      	cmp	r3, #15
 8009d86:	d136      	bne.n	8009df6 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d154      	bne.n	8009e40 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009d96:	7fbb      	ldrb	r3, [r7, #30]
 8009d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00d      	beq.n	8009dbc <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da4:	7b5b      	ldrb	r3, [r3, #13]
 8009da6:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009da8:	7fbb      	ldrb	r3, [r7, #30]
 8009daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dae:	77bb      	strb	r3, [r7, #30]
 8009db0:	7fbb      	ldrb	r3, [r7, #30]
 8009db2:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009dbc:	7fba      	ldrb	r2, [r7, #30]
 8009dbe:	7f7b      	ldrb	r3, [r7, #29]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d115      	bne.n	8009df0 <dir_find+0x1d8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc8:	330d      	adds	r3, #13
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	7f3a      	ldrb	r2, [r7, #28]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d10e      	bne.n	8009df0 <dir_find+0x1d8>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7ff f9af 	bl	8009140 <cmp_lfn>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d003      	beq.n	8009df0 <dir_find+0x1d8>
 8009de8:	7f7b      	ldrb	r3, [r7, #29]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	e000      	b.n	8009df2 <dir_find+0x1da>
 8009df0:	23ff      	movs	r3, #255	; 0xff
 8009df2:	777b      	strb	r3, [r7, #29]
 8009df4:	e024      	b.n	8009e40 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009df6:	7f7b      	ldrb	r3, [r7, #29]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d109      	bne.n	8009e10 <dir_find+0x1f8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff fb68 	bl	80094d6 <sum_sfn>
 8009e06:	4603      	mov	r3, r0
 8009e08:	461a      	mov	r2, r3
 8009e0a:	7f3b      	ldrb	r3, [r7, #28]
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d024      	beq.n	8009e5a <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10a      	bne.n	8009e34 <dir_find+0x21c>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3340      	adds	r3, #64	; 0x40
 8009e26:	220b      	movs	r2, #11
 8009e28:	4619      	mov	r1, r3
 8009e2a:	f7fd ff66 	bl	8007cfa <mem_cmp>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d014      	beq.n	8009e5e <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009e34:	23ff      	movs	r3, #255	; 0xff
 8009e36:	777b      	strb	r3, [r7, #29]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff f80b 	bl	8008e5e <dir_next>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8009e4c:	7ffb      	ldrb	r3, [r7, #31]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f43f af65 	beq.w	8009d1e <dir_find+0x106>
 8009e54:	e004      	b.n	8009e60 <dir_find+0x248>
		if (res != FR_OK) break;
 8009e56:	bf00      	nop
 8009e58:	e002      	b.n	8009e60 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009e5a:	bf00      	nop
 8009e5c:	e000      	b.n	8009e60 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e5e:	bf00      	nop

	return res;
 8009e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3724      	adds	r7, #36	; 0x24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd90      	pop	{r4, r7, pc}
	...

08009e6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009e6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009e70:	b0a0      	sub	sp, #128	; 0x80
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009e82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <dir_register+0x22>
 8009e8a:	2306      	movs	r3, #6
 8009e8c:	e194      	b.n	800a1b8 <dir_register+0x34c>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009e8e:	2300      	movs	r3, #0
 8009e90:	677b      	str	r3, [r7, #116]	; 0x74
 8009e92:	e002      	b.n	8009e9a <dir_register+0x2e>
 8009e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e96:	3301      	adds	r3, #1
 8009e98:	677b      	str	r3, [r7, #116]	; 0x74
 8009e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e9c:	68da      	ldr	r2, [r3, #12]
 8009e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	4413      	add	r3, r2
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f4      	bne.n	8009e94 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	f040 80a5 	bne.w	8009ffe <dir_register+0x192>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8009eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009eb6:	330e      	adds	r3, #14
 8009eb8:	4aa5      	ldr	r2, [pc, #660]	; (800a150 <dir_register+0x2e4>)
 8009eba:	fba2 2303 	umull	r2, r3, r2, r3
 8009ebe:	08db      	lsrs	r3, r3, #3
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8009ec4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff f89e 	bl	8009008 <dir_alloc>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8009ed2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <dir_register+0x74>
 8009eda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009ede:	e16b      	b.n	800a1b8 <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ee6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8009eea:	3b01      	subs	r3, #1
 8009eec:	015b      	lsls	r3, r3, #5
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d076      	beq.n	8009fea <dir_register+0x17e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	79db      	ldrb	r3, [r3, #7]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d070      	beq.n	8009fea <dir_register+0x17e>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8009f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f10:	895b      	ldrh	r3, [r3, #10]
 8009f12:	025b      	lsls	r3, r3, #9
 8009f14:	469b      	mov	fp, r3
 8009f16:	f04f 0c00 	mov.w	ip, #0
 8009f1a:	eb1b 0301 	adds.w	r3, fp, r1
 8009f1e:	eb4c 0402 	adc.w	r4, ip, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fcba 	bl	80088a4 <fill_first_frag>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009f36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <dir_register+0xd8>
 8009f3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f42:	e139      	b.n	800a1b8 <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4e:	4619      	mov	r1, r3
 8009f50:	f7fe fcd7 	bl	8008902 <fill_last_frag>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009f5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <dir_register+0xfc>
 8009f62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f66:	e127      	b.n	800a1b8 <dir_register+0x34c>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	f107 0308 	add.w	r3, r7, #8
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff fc8b 	bl	800988c <load_obj_dir>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009f7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <dir_register+0x11e>
 8009f84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009f88:	e116      	b.n	800a1b8 <dir_register+0x34c>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4623      	mov	r3, r4
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	f7fd fdea 	bl	8007b76 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4623      	mov	r3, r4
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	f7fd fdde 	bl	8007b76 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	79da      	ldrb	r2, [r3, #7]
 8009fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	3321      	adds	r3, #33	; 0x21
 8009fc4:	f042 0201 	orr.w	r2, r2, #1
 8009fc8:	b2d2      	uxtb	r2, r2
 8009fca:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8009fcc:	f107 0308 	add.w	r3, r7, #8
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff fc98 	bl	8009906 <store_xdir>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8009fdc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <dir_register+0x17e>
 8009fe4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8009fe8:	e0e6      	b.n	800a1b8 <dir_register+0x34c>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fec:	691a      	ldr	r2, [r3, #16]
 8009fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	f7ff fce1 	bl	80099bc <create_xdir>
		return FR_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e0dc      	b.n	800a1b8 <dir_register+0x34c>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a004:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a008:	220c      	movs	r2, #12
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fd fe3a 	bl	8007c84 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a010:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d033      	beq.n	800a084 <dir_register+0x218>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2240      	movs	r2, #64	; 0x40
 800a020:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800a024:	2301      	movs	r3, #1
 800a026:	67bb      	str	r3, [r7, #120]	; 0x78
 800a028:	e016      	b.n	800a058 <dir_register+0x1ec>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a03a:	f7ff f9bd 	bl	80093b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7ff fdea 	bl	8009c18 <dir_find>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800a04a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <dir_register+0x1f4>
		for (n = 1; n < 100; n++) {
 800a052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a054:	3301      	adds	r3, #1
 800a056:	67bb      	str	r3, [r7, #120]	; 0x78
 800a058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a05a:	2b63      	cmp	r3, #99	; 0x63
 800a05c:	d9e5      	bls.n	800a02a <dir_register+0x1be>
 800a05e:	e000      	b.n	800a062 <dir_register+0x1f6>
			if (res != FR_OK) break;
 800a060:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a064:	2b64      	cmp	r3, #100	; 0x64
 800a066:	d101      	bne.n	800a06c <dir_register+0x200>
 800a068:	2307      	movs	r3, #7
 800a06a:	e0a5      	b.n	800a1b8 <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a06c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a070:	2b04      	cmp	r3, #4
 800a072:	d002      	beq.n	800a07a <dir_register+0x20e>
 800a074:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a078:	e09e      	b.n	800a1b8 <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a07a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a084:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <dir_register+0x234>
 800a090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a092:	330c      	adds	r3, #12
 800a094:	4a2f      	ldr	r2, [pc, #188]	; (800a154 <dir_register+0x2e8>)
 800a096:	fba2 2303 	umull	r2, r3, r2, r3
 800a09a:	089b      	lsrs	r3, r3, #2
 800a09c:	3301      	adds	r3, #1
 800a09e:	e000      	b.n	800a0a2 <dir_register+0x236>
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a0a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7fe ffae 	bl	8009008 <dir_alloc>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a0b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d14f      	bne.n	800a15a <dir_register+0x2ee>
 800a0ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	673b      	str	r3, [r7, #112]	; 0x70
 800a0c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d049      	beq.n	800a15a <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0cc:	015b      	lsls	r3, r3, #5
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7fe fe3d 	bl	8008d52 <dir_sdi>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a0de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d139      	bne.n	800a15a <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	3340      	adds	r3, #64	; 0x40
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff f9f3 	bl	80094d6 <sum_sfn>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a0fe:	f7fe f81f 	bl	8008140 <move_window>
 800a102:	4603      	mov	r3, r0
 800a104:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800a108:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d123      	bne.n	800a158 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a112:	68d8      	ldr	r0, [r3, #12]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a120:	f7ff f8e2 	bl	80092e8 <put_lfn>
				fs->wflag = 1;
 800a124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a126:	2201      	movs	r2, #1
 800a128:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a12a:	2100      	movs	r1, #0
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7fe fe96 	bl	8008e5e <dir_next>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800a138:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10c      	bne.n	800a15a <dir_register+0x2ee>
 800a140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a142:	3b01      	subs	r3, #1
 800a144:	673b      	str	r3, [r7, #112]	; 0x70
 800a146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1d4      	bne.n	800a0f6 <dir_register+0x28a>
 800a14c:	e005      	b.n	800a15a <dir_register+0x2ee>
 800a14e:	bf00      	nop
 800a150:	88888889 	.word	0x88888889
 800a154:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800a158:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a15a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d128      	bne.n	800a1b4 <dir_register+0x348>
		res = move_window(fs, dp->sect);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	4619      	mov	r1, r3
 800a168:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a16a:	f7fd ffe9 	bl	8008140 <move_window>
 800a16e:	4603      	mov	r3, r0
 800a170:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a174:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d11b      	bne.n	800a1b4 <dir_register+0x348>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a180:	2220      	movs	r2, #32
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f7fd fd9e 	bl	8007cc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	3340      	adds	r3, #64	; 0x40
 800a192:	220b      	movs	r2, #11
 800a194:	4619      	mov	r1, r3
 800a196:	f7fd fd75 	bl	8007c84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1a4:	330c      	adds	r3, #12
 800a1a6:	f002 0218 	and.w	r2, r2, #24
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a1ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a1b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3780      	adds	r7, #128	; 0x80
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a1c2:	bf00      	nop

0800a1c4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e0:	d007      	beq.n	800a1f2 <dir_remove+0x2e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7fe fdb2 	bl	8008d52 <dir_sdi>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	e000      	b.n	800a1f4 <dir_remove+0x30>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d136      	bne.n	800a26a <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a200:	4619      	mov	r1, r3
 800a202:	6938      	ldr	r0, [r7, #16]
 800a204:	f7fd ff9c 	bl	8008140 <move_window>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d123      	bne.n	800a25a <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	2b04      	cmp	r3, #4
 800a218:	d109      	bne.n	800a22e <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	781a      	ldrb	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a228:	b2d2      	uxtb	r2, r2
 800a22a:	701a      	strb	r2, [r3, #0]
 800a22c:	e003      	b.n	800a236 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a232:	22e5      	movs	r2, #229	; 0xe5
 800a234:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2201      	movs	r2, #1
 800a23a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	429a      	cmp	r2, r3
 800a244:	d90b      	bls.n	800a25e <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800a246:	2100      	movs	r1, #0
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7fe fe08 	bl	8008e5e <dir_next>
 800a24e:	4603      	mov	r3, r0
 800a250:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d0d1      	beq.n	800a1fc <dir_remove+0x38>
 800a258:	e002      	b.n	800a260 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800a25e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b04      	cmp	r3, #4
 800a264:	d101      	bne.n	800a26a <dir_remove+0xa6>
 800a266:	2302      	movs	r3, #2
 800a268:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a274:	b590      	push	{r4, r7, lr}
 800a276:	b089      	sub	sp, #36	; 0x24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2200      	movs	r2, #0
 800a288:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80d7 	beq.w	800a442 <get_fileinfo+0x1ce>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b04      	cmp	r3, #4
 800a29a:	d106      	bne.n	800a2aa <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff f9b2 	bl	800960c <get_xdir_info>
		return;
 800a2a8:	e0cc      	b.n	800a444 <get_fileinfo+0x1d0>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b2:	d032      	beq.n	800a31a <get_fileinfo+0xa6>
			i = j = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	61bb      	str	r3, [r7, #24]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a2bc:	e01b      	b.n	800a2f6 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a2be:	89fb      	ldrh	r3, [r7, #14]
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f003 fe8a 	bl	800dfdc <ff_convert>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a2cc:	89fb      	ldrh	r3, [r7, #14]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <get_fileinfo+0x64>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61fb      	str	r3, [r7, #28]
 800a2d6:	e01a      	b.n	800a30e <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	2bfe      	cmp	r3, #254	; 0xfe
 800a2dc:	d902      	bls.n	800a2e4 <get_fileinfo+0x70>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	61fb      	str	r3, [r7, #28]
 800a2e2:	e014      	b.n	800a30e <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	61fa      	str	r2, [r7, #28]
 800a2ea:	89fa      	ldrh	r2, [r7, #14]
 800a2ec:	b2d1      	uxtb	r1, r2
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	460a      	mov	r2, r1
 800a2f4:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	1c59      	adds	r1, r3, #1
 800a2fe:	61b9      	str	r1, [r7, #24]
 800a300:	005b      	lsls	r3, r3, #1
 800a302:	4413      	add	r3, r2
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	81fb      	strh	r3, [r7, #14]
 800a308:	89fb      	ldrh	r3, [r7, #14]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1d7      	bne.n	800a2be <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4413      	add	r3, r2
 800a314:	331a      	adds	r3, #26
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	61bb      	str	r3, [r7, #24]
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	4413      	add	r3, r2
 800a328:	331a      	adds	r3, #26
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a32e:	e04c      	b.n	800a3ca <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	1c59      	adds	r1, r3, #1
 800a338:	61f9      	str	r1, [r7, #28]
 800a33a:	4413      	add	r3, r2
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a340:	7dfb      	ldrb	r3, [r7, #23]
 800a342:	2b20      	cmp	r3, #32
 800a344:	d100      	bne.n	800a348 <get_fileinfo+0xd4>
 800a346:	e040      	b.n	800a3ca <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d101      	bne.n	800a352 <get_fileinfo+0xde>
 800a34e:	23e5      	movs	r3, #229	; 0xe5
 800a350:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	2b09      	cmp	r3, #9
 800a356:	d10f      	bne.n	800a378 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800a358:	89bb      	ldrh	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d105      	bne.n	800a36a <get_fileinfo+0xf6>
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	4413      	add	r3, r2
 800a364:	331a      	adds	r3, #26
 800a366:	222e      	movs	r2, #46	; 0x2e
 800a368:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	61ba      	str	r2, [r7, #24]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	4413      	add	r3, r2
 800a374:	222e      	movs	r2, #46	; 0x2e
 800a376:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	4413      	add	r3, r2
 800a37e:	330d      	adds	r3, #13
 800a380:	7dfa      	ldrb	r2, [r7, #23]
 800a382:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a384:	89bb      	ldrh	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d11c      	bne.n	800a3c4 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	2b40      	cmp	r3, #64	; 0x40
 800a38e:	d913      	bls.n	800a3b8 <get_fileinfo+0x144>
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	2b5a      	cmp	r3, #90	; 0x5a
 800a394:	d810      	bhi.n	800a3b8 <get_fileinfo+0x144>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	330c      	adds	r3, #12
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	d901      	bls.n	800a3aa <get_fileinfo+0x136>
 800a3a6:	2310      	movs	r3, #16
 800a3a8:	e000      	b.n	800a3ac <get_fileinfo+0x138>
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	3320      	adds	r3, #32
 800a3b6:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	4413      	add	r3, r2
 800a3be:	331a      	adds	r3, #26
 800a3c0:	7dfa      	ldrb	r2, [r7, #23]
 800a3c2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	2b0a      	cmp	r3, #10
 800a3ce:	d9af      	bls.n	800a330 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800a3d0:	89bb      	ldrh	r3, [r7, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10d      	bne.n	800a3f2 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	4413      	add	r3, r2
 800a3dc:	331a      	adds	r3, #26
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e6:	330c      	adds	r3, #12
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <get_fileinfo+0x17e>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	330d      	adds	r3, #13
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a402:	7ada      	ldrb	r2, [r3, #11]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40c:	331c      	adds	r3, #28
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fd fa8a 	bl	8007928 <ld_dword>
 800a414:	4603      	mov	r3, r0
 800a416:	f04f 0400 	mov.w	r4, #0
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	e9c2 3400 	strd	r3, r4, [r2]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a424:	3316      	adds	r3, #22
 800a426:	4618      	mov	r0, r3
 800a428:	f7fd fa7e 	bl	8007928 <ld_dword>
 800a42c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	b29a      	uxth	r2, r3
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	815a      	strh	r2, [r3, #10]
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	0c1b      	lsrs	r3, r3, #16
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	811a      	strh	r2, [r3, #8]
 800a440:	e000      	b.n	800a444 <get_fileinfo+0x1d0>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a442:	bf00      	nop
}
 800a444:	3724      	adds	r7, #36	; 0x24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd90      	pop	{r4, r7, pc}
	...

0800a44c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	; 0x28
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	61ba      	str	r2, [r7, #24]
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4413      	add	r3, r2
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a47a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a47c:	2b1f      	cmp	r3, #31
 800a47e:	d940      	bls.n	800a502 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a482:	2b2f      	cmp	r3, #47	; 0x2f
 800a484:	d006      	beq.n	800a494 <create_name+0x48>
 800a486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a488:	2b5c      	cmp	r3, #92	; 0x5c
 800a48a:	d110      	bne.n	800a4ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a48c:	e002      	b.n	800a494 <create_name+0x48>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	3301      	adds	r3, #1
 800a492:	61bb      	str	r3, [r7, #24]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	4413      	add	r3, r2
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b2f      	cmp	r3, #47	; 0x2f
 800a49e:	d0f6      	beq.n	800a48e <create_name+0x42>
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b5c      	cmp	r3, #92	; 0x5c
 800a4aa:	d0f0      	beq.n	800a48e <create_name+0x42>
			break;
 800a4ac:	e02a      	b.n	800a504 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2bfe      	cmp	r3, #254	; 0xfe
 800a4b2:	d901      	bls.n	800a4b8 <create_name+0x6c>
 800a4b4:	2306      	movs	r3, #6
 800a4b6:	e177      	b.n	800a7a8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a4b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a4be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f003 fd8a 	bl	800dfdc <ff_convert>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a4cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <create_name+0x8a>
 800a4d2:	2306      	movs	r3, #6
 800a4d4:	e168      	b.n	800a7a8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4d8:	2b7f      	cmp	r3, #127	; 0x7f
 800a4da:	d809      	bhi.n	800a4f0 <create_name+0xa4>
 800a4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4de:	4619      	mov	r1, r3
 800a4e0:	48b3      	ldr	r0, [pc, #716]	; (800a7b0 <create_name+0x364>)
 800a4e2:	f7fd fc31 	bl	8007d48 <chk_chr>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <create_name+0xa4>
 800a4ec:	2306      	movs	r3, #6
 800a4ee:	e15b      	b.n	800a7a8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	617a      	str	r2, [r7, #20]
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a500:	e7b4      	b.n	800a46c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a502:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	441a      	add	r2, r3
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a50e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a510:	2b1f      	cmp	r3, #31
 800a512:	d801      	bhi.n	800a518 <create_name+0xcc>
 800a514:	2304      	movs	r3, #4
 800a516:	e000      	b.n	800a51a <create_name+0xce>
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a51e:	e011      	b.n	800a544 <create_name+0xf8>
		w = lfn[di - 1];
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a526:	3b01      	subs	r3, #1
 800a528:	005b      	lsls	r3, r3, #1
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a534:	2b20      	cmp	r3, #32
 800a536:	d002      	beq.n	800a53e <create_name+0xf2>
 800a538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a53a:	2b2e      	cmp	r3, #46	; 0x2e
 800a53c:	d106      	bne.n	800a54c <create_name+0x100>
		di--;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	3b01      	subs	r3, #1
 800a542:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1ea      	bne.n	800a520 <create_name+0xd4>
 800a54a:	e000      	b.n	800a54e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a54c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	4413      	add	r3, r2
 800a556:	2200      	movs	r2, #0
 800a558:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <create_name+0x118>
 800a560:	2306      	movs	r3, #6
 800a562:	e121      	b.n	800a7a8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3340      	adds	r3, #64	; 0x40
 800a568:	220b      	movs	r2, #11
 800a56a:	2120      	movs	r1, #32
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fd fbaa 	bl	8007cc6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a572:	2300      	movs	r3, #0
 800a574:	61bb      	str	r3, [r7, #24]
 800a576:	e002      	b.n	800a57e <create_name+0x132>
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	3301      	adds	r3, #1
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4413      	add	r3, r2
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d0f5      	beq.n	800a578 <create_name+0x12c>
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	005b      	lsls	r3, r3, #1
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	2b2e      	cmp	r3, #46	; 0x2e
 800a598:	d0ee      	beq.n	800a578 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <create_name+0x168>
 800a5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5a4:	f043 0303 	orr.w	r3, r3, #3
 800a5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a5ac:	e002      	b.n	800a5b4 <create_name+0x168>
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d009      	beq.n	800a5ce <create_name+0x182>
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a5cc:	d1ef      	bne.n	800a5ae <create_name+0x162>

	i = b = 0; ni = 8;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	623b      	str	r3, [r7, #32]
 800a5d8:	2308      	movs	r3, #8
 800a5da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	61ba      	str	r2, [r7, #24]
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a5ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 8090 	beq.w	800a714 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a5f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5f6:	2b20      	cmp	r3, #32
 800a5f8:	d006      	beq.n	800a608 <create_name+0x1bc>
 800a5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a5fe:	d10a      	bne.n	800a616 <create_name+0x1ca>
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	429a      	cmp	r2, r3
 800a606:	d006      	beq.n	800a616 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a60c:	f043 0303 	orr.w	r3, r3, #3
 800a610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a614:	e07d      	b.n	800a712 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a616:	6a3a      	ldr	r2, [r7, #32]
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d203      	bcs.n	800a626 <create_name+0x1da>
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	429a      	cmp	r2, r3
 800a624:	d123      	bne.n	800a66e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	2b0b      	cmp	r3, #11
 800a62a:	d106      	bne.n	800a63a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a630:	f043 0303 	orr.w	r3, r3, #3
 800a634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a638:	e06f      	b.n	800a71a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a63a:	69ba      	ldr	r2, [r7, #24]
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d005      	beq.n	800a64e <create_name+0x202>
 800a642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a646:	f043 0303 	orr.w	r3, r3, #3
 800a64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	429a      	cmp	r2, r3
 800a654:	d860      	bhi.n	800a718 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	2308      	movs	r3, #8
 800a65c:	623b      	str	r3, [r7, #32]
 800a65e:	230b      	movs	r3, #11
 800a660:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a66c:	e051      	b.n	800a712 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a66e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a670:	2b7f      	cmp	r3, #127	; 0x7f
 800a672:	d914      	bls.n	800a69e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a676:	2100      	movs	r1, #0
 800a678:	4618      	mov	r0, r3
 800a67a:	f003 fcaf 	bl	800dfdc <ff_convert>
 800a67e:	4603      	mov	r3, r0
 800a680:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <create_name+0x246>
 800a688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a68a:	3b80      	subs	r3, #128	; 0x80
 800a68c:	4a49      	ldr	r2, [pc, #292]	; (800a7b4 <create_name+0x368>)
 800a68e:	5cd3      	ldrb	r3, [r2, r3]
 800a690:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a696:	f043 0302 	orr.w	r3, r3, #2
 800a69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d007      	beq.n	800a6b4 <create_name+0x268>
 800a6a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4843      	ldr	r0, [pc, #268]	; (800a7b8 <create_name+0x36c>)
 800a6aa:	f7fd fb4d 	bl	8007d48 <chk_chr>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d008      	beq.n	800a6c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a6b4:	235f      	movs	r3, #95	; 0x5f
 800a6b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6bc:	f043 0303 	orr.w	r3, r3, #3
 800a6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a6c4:	e01b      	b.n	800a6fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a6c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6c8:	2b40      	cmp	r3, #64	; 0x40
 800a6ca:	d909      	bls.n	800a6e0 <create_name+0x294>
 800a6cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6ce:	2b5a      	cmp	r3, #90	; 0x5a
 800a6d0:	d806      	bhi.n	800a6e0 <create_name+0x294>
					b |= 2;
 800a6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6d6:	f043 0302 	orr.w	r3, r3, #2
 800a6da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6de:	e00e      	b.n	800a6fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a6e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6e2:	2b60      	cmp	r3, #96	; 0x60
 800a6e4:	d90b      	bls.n	800a6fe <create_name+0x2b2>
 800a6e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6e8:	2b7a      	cmp	r3, #122	; 0x7a
 800a6ea:	d808      	bhi.n	800a6fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a6ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6f0:	f043 0301 	orr.w	r3, r3, #1
 800a6f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6fa:	3b20      	subs	r3, #32
 800a6fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	1c5a      	adds	r2, r3, #1
 800a702:	623a      	str	r2, [r7, #32]
 800a704:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a706:	b2d1      	uxtb	r1, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	4413      	add	r3, r2
 800a70c:	460a      	mov	r2, r1
 800a70e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a712:	e763      	b.n	800a5dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a714:	bf00      	nop
 800a716:	e000      	b.n	800a71a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800a718:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a720:	2be5      	cmp	r3, #229	; 0xe5
 800a722:	d103      	bne.n	800a72c <create_name+0x2e0>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2205      	movs	r2, #5
 800a728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	2b08      	cmp	r3, #8
 800a730:	d104      	bne.n	800a73c <create_name+0x2f0>
 800a732:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a73c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a740:	f003 030c 	and.w	r3, r3, #12
 800a744:	2b0c      	cmp	r3, #12
 800a746:	d005      	beq.n	800a754 <create_name+0x308>
 800a748:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	2b03      	cmp	r3, #3
 800a752:	d105      	bne.n	800a760 <create_name+0x314>
 800a754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a758:	f043 0302 	orr.w	r3, r3, #2
 800a75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d117      	bne.n	800a79c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a76c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	2b01      	cmp	r3, #1
 800a776:	d105      	bne.n	800a784 <create_name+0x338>
 800a778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a77c:	f043 0310 	orr.w	r3, r3, #16
 800a780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a784:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a788:	f003 030c 	and.w	r3, r3, #12
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d105      	bne.n	800a79c <create_name+0x350>
 800a790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a794:	f043 0308 	orr.w	r3, r3, #8
 800a798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a7a2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800a7a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3728      	adds	r7, #40	; 0x28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	08015528 	.word	0x08015528
 800a7b4:	080155b8 	.word	0x080155b8
 800a7b8:	08015534 	.word	0x08015534

0800a7bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a7bc:	b590      	push	{r4, r7, lr}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a7d0:	e002      	b.n	800a7d8 <follow_path+0x1c>
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b2f      	cmp	r3, #47	; 0x2f
 800a7de:	d0f8      	beq.n	800a7d2 <follow_path+0x16>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b5c      	cmp	r3, #92	; 0x5c
 800a7e6:	d0f4      	beq.n	800a7d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b1f      	cmp	r3, #31
 800a7fa:	d80a      	bhi.n	800a812 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2280      	movs	r2, #128	; 0x80
 800a800:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800a804:	2100      	movs	r1, #0
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7fe faa3 	bl	8008d52 <dir_sdi>
 800a80c:	4603      	mov	r3, r0
 800a80e:	75fb      	strb	r3, [r7, #23]
 800a810:	e077      	b.n	800a902 <follow_path+0x146>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a812:	463b      	mov	r3, r7
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff fe18 	bl	800a44c <create_name>
 800a81c:	4603      	mov	r3, r0
 800a81e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d168      	bne.n	800a8f8 <follow_path+0x13c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff f9f6 	bl	8009c18 <dir_find>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a836:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a838:	7dfb      	ldrb	r3, [r7, #23]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00a      	beq.n	800a854 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	2b04      	cmp	r3, #4
 800a842:	d15b      	bne.n	800a8fc <follow_path+0x140>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d156      	bne.n	800a8fc <follow_path+0x140>
 800a84e:	2305      	movs	r3, #5
 800a850:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a852:	e053      	b.n	800a8fc <follow_path+0x140>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	f003 0304 	and.w	r3, r3, #4
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d150      	bne.n	800a900 <follow_path+0x144>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	799b      	ldrb	r3, [r3, #6]
 800a862:	f003 0310 	and.w	r3, r3, #16
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a86a:	2305      	movs	r3, #5
 800a86c:	75fb      	strb	r3, [r7, #23]
 800a86e:	e048      	b.n	800a902 <follow_path+0x146>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b04      	cmp	r3, #4
 800a876:	d12f      	bne.n	800a8d8 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	79d2      	ldrb	r2, [r2, #7]
 800a88e:	431a      	orrs	r2, r3
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	3334      	adds	r3, #52	; 0x34
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd f840 	bl	8007928 <ld_dword>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	3321      	adds	r3, #33	; 0x21
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	3338      	adds	r3, #56	; 0x38
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fd f851 	bl	800796e <ld_qword>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800a8d6:	e79c      	b.n	800a812 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e6:	4413      	add	r3, r2
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7fe fbe8 	bl	80090c0 <ld_clust>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8f6:	e78c      	b.n	800a812 <follow_path+0x56>
			if (res != FR_OK) break;
 800a8f8:	bf00      	nop
 800a8fa:	e002      	b.n	800a902 <follow_path+0x146>
				break;
 800a8fc:	bf00      	nop
 800a8fe:	e000      	b.n	800a902 <follow_path+0x146>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a900:	bf00      	nop
			}
		}
	}

	return res;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
}
 800a904:	4618      	mov	r0, r3
 800a906:	371c      	adds	r7, #28
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd90      	pop	{r4, r7, pc}

0800a90c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
 800a918:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d031      	beq.n	800a986 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	e002      	b.n	800a930 <get_ldnumber+0x24>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3301      	adds	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	2b1f      	cmp	r3, #31
 800a936:	d903      	bls.n	800a940 <get_ldnumber+0x34>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b3a      	cmp	r3, #58	; 0x3a
 800a93e:	d1f4      	bne.n	800a92a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b3a      	cmp	r3, #58	; 0x3a
 800a946:	d11c      	bne.n	800a982 <get_ldnumber+0x76>
			tp = *path;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	60fa      	str	r2, [r7, #12]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	3b30      	subs	r3, #48	; 0x30
 800a958:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b09      	cmp	r3, #9
 800a95e:	d80e      	bhi.n	800a97e <get_ldnumber+0x72>
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	429a      	cmp	r2, r3
 800a966:	d10a      	bne.n	800a97e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d107      	bne.n	800a97e <get_ldnumber+0x72>
					vol = (int)i;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	3301      	adds	r3, #1
 800a976:	617b      	str	r3, [r7, #20]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	e002      	b.n	800a988 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a982:	2300      	movs	r3, #0
 800a984:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a986:	693b      	ldr	r3, [r7, #16]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	70da      	strb	r2, [r3, #3]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7fd fbc6 	bl	8008140 <move_window>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <check_fs+0x2a>
 800a9ba:	2304      	movs	r3, #4
 800a9bc:	e044      	b.n	800aa48 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	333c      	adds	r3, #60	; 0x3c
 800a9c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fc ff96 	bl	80078f8 <ld_word>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d001      	beq.n	800a9dc <check_fs+0x48>
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e035      	b.n	800aa48 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e2:	2be9      	cmp	r3, #233	; 0xe9
 800a9e4:	d009      	beq.n	800a9fa <check_fs+0x66>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ec:	2beb      	cmp	r3, #235	; 0xeb
 800a9ee:	d11e      	bne.n	800aa2e <check_fs+0x9a>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9f6:	2b90      	cmp	r3, #144	; 0x90
 800a9f8:	d119      	bne.n	800aa2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	333c      	adds	r3, #60	; 0x3c
 800a9fe:	3336      	adds	r3, #54	; 0x36
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fc ff91 	bl	8007928 <ld_dword>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa0c:	4a10      	ldr	r2, [pc, #64]	; (800aa50 <check_fs+0xbc>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d101      	bne.n	800aa16 <check_fs+0x82>
 800aa12:	2300      	movs	r3, #0
 800aa14:	e018      	b.n	800aa48 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	333c      	adds	r3, #60	; 0x3c
 800aa1a:	3352      	adds	r3, #82	; 0x52
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fc ff83 	bl	8007928 <ld_dword>
 800aa22:	4602      	mov	r2, r0
 800aa24:	4b0b      	ldr	r3, [pc, #44]	; (800aa54 <check_fs+0xc0>)
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d101      	bne.n	800aa2e <check_fs+0x9a>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e00c      	b.n	800aa48 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	333c      	adds	r3, #60	; 0x3c
 800aa32:	220b      	movs	r2, #11
 800aa34:	4908      	ldr	r1, [pc, #32]	; (800aa58 <check_fs+0xc4>)
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fd f95f 	bl	8007cfa <mem_cmp>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <check_fs+0xb2>
 800aa42:	2301      	movs	r3, #1
 800aa44:	e000      	b.n	800aa48 <check_fs+0xb4>
#endif
	return 2;
 800aa46:	2302      	movs	r3, #2
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	00544146 	.word	0x00544146
 800aa54:	33544146 	.word	0x33544146
 800aa58:	0801553c 	.word	0x0801553c

0800aa5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aa5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800aa60:	b098      	sub	sp, #96	; 0x60
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7ff ff4a 	bl	800a90c <get_ldnumber>
 800aa78:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	da01      	bge.n	800aa84 <find_volume+0x28>
 800aa80:	230b      	movs	r3, #11
 800aa82:	e330      	b.n	800b0e6 <find_volume+0x68a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aa84:	4a9a      	ldr	r2, [pc, #616]	; (800acf0 <find_volume+0x294>)
 800aa86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa8c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d101      	bne.n	800aa98 <find_volume+0x3c>
 800aa94:	230c      	movs	r3, #12
 800aa96:	e326      	b.n	800b0e6 <find_volume+0x68a>

	ENTER_FF(fs);						/* Lock the volume */
 800aa98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aa9a:	f7fd f970 	bl	8007d7e <lock_fs>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <find_volume+0x4c>
 800aaa4:	230f      	movs	r3, #15
 800aaa6:	e31e      	b.n	800b0e6 <find_volume+0x68a>
	*rfs = fs;							/* Return pointer to the file system object */
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaac:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d01a      	beq.n	800aaf4 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800aabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fc fe7a 	bl	80077bc <disk_status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10c      	bne.n	800aaf4 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <find_volume+0x94>
 800aae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800aaec:	230a      	movs	r3, #10
 800aaee:	e2fa      	b.n	800b0e6 <find_volume+0x68a>
			}
			return FR_OK;				/* The file system object is valid */
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	e2f8      	b.n	800b0e6 <find_volume+0x68a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aaf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab00:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ab02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab04:	785b      	ldrb	r3, [r3, #1]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fc fe72 	bl	80077f0 <disk_initialize>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ab12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e2e1      	b.n	800b0e6 <find_volume+0x68a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d007      	beq.n	800ab38 <find_volume+0xdc>
 800ab28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800ab34:	230a      	movs	r3, #10
 800ab36:	e2d6      	b.n	800b0e6 <find_volume+0x68a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ab3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ab40:	f7ff ff28 	bl	800a994 <check_fs>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ab4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d14b      	bne.n	800abea <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab52:	2300      	movs	r3, #0
 800ab54:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab56:	e01f      	b.n	800ab98 <find_volume+0x13c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ab58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab5a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ab5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab60:	011b      	lsls	r3, r3, #4
 800ab62:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab66:	4413      	add	r3, r2
 800ab68:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d006      	beq.n	800ab82 <find_volume+0x126>
 800ab74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab76:	3308      	adds	r3, #8
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7fc fed5 	bl	8007928 <ld_dword>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	e000      	b.n	800ab84 <find_volume+0x128>
 800ab82:	2200      	movs	r2, #0
 800ab84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800ab8c:	440b      	add	r3, r1
 800ab8e:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab94:	3301      	adds	r3, #1
 800ab96:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d9dc      	bls.n	800ab58 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ab9e:	2300      	movs	r3, #0
 800aba0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800aba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <find_volume+0x152>
 800aba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abaa:	3b01      	subs	r3, #1
 800abac:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800abae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800abb6:	4413      	add	r3, r2
 800abb8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800abbc:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800abbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <find_volume+0x174>
 800abc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800abc8:	f7ff fee4 	bl	800a994 <check_fs>
 800abcc:	4603      	mov	r3, r0
 800abce:	e000      	b.n	800abd2 <find_volume+0x176>
 800abd0:	2303      	movs	r3, #3
 800abd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800abd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d905      	bls.n	800abea <find_volume+0x18e>
 800abde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe0:	3301      	adds	r3, #1
 800abe2:	64bb      	str	r3, [r7, #72]	; 0x48
 800abe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d9e1      	bls.n	800abae <find_volume+0x152>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800abea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d101      	bne.n	800abf6 <find_volume+0x19a>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e277      	b.n	800b0e6 <find_volume+0x68a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800abf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d901      	bls.n	800ac02 <find_volume+0x1a6>
 800abfe:	230d      	movs	r3, #13
 800ac00:	e271      	b.n	800b0e6 <find_volume+0x68a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800ac02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	f040 80f7 	bne.w	800adfa <find_volume+0x39e>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800ac0c:	230b      	movs	r3, #11
 800ac0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac10:	e002      	b.n	800ac18 <find_volume+0x1bc>
 800ac12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac14:	3301      	adds	r3, #1
 800ac16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac1a:	2b3f      	cmp	r3, #63	; 0x3f
 800ac1c:	d806      	bhi.n	800ac2c <find_volume+0x1d0>
 800ac1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac22:	4413      	add	r3, r2
 800ac24:	333c      	adds	r3, #60	; 0x3c
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0f2      	beq.n	800ac12 <find_volume+0x1b6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ac2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac2e:	2b3f      	cmp	r3, #63	; 0x3f
 800ac30:	d801      	bhi.n	800ac36 <find_volume+0x1da>
 800ac32:	230d      	movs	r3, #13
 800ac34:	e257      	b.n	800b0e6 <find_volume+0x68a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ac36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac38:	333c      	adds	r3, #60	; 0x3c
 800ac3a:	3368      	adds	r3, #104	; 0x68
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7fc fe5b 	bl	80078f8 <ld_word>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac48:	d001      	beq.n	800ac4e <find_volume+0x1f2>
 800ac4a:	230d      	movs	r3, #13
 800ac4c:	e24b      	b.n	800b0e6 <find_volume+0x68a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ac4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac50:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800ac54:	2b09      	cmp	r3, #9
 800ac56:	d001      	beq.n	800ac5c <find_volume+0x200>
			return FR_NO_FILESYSTEM;
 800ac58:	230d      	movs	r3, #13
 800ac5a:	e244      	b.n	800b0e6 <find_volume+0x68a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ac5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5e:	333c      	adds	r3, #60	; 0x3c
 800ac60:	3348      	adds	r3, #72	; 0x48
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fc fe83 	bl	800796e <ld_qword>
 800ac68:	460a      	mov	r2, r1
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac6e:	469b      	mov	fp, r3
 800ac70:	f04f 0c00 	mov.w	ip, #0
 800ac74:	eb1b 0301 	adds.w	r3, fp, r1
 800ac78:	eb4c 0402 	adc.w	r4, ip, r2
 800ac7c:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ac80:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ac84:	2c01      	cmp	r4, #1
 800ac86:	bf08      	it	eq
 800ac88:	2b00      	cmpeq	r3, #0
 800ac8a:	d301      	bcc.n	800ac90 <find_volume+0x234>
 800ac8c:	230d      	movs	r3, #13
 800ac8e:	e22a      	b.n	800b0e6 <find_volume+0x68a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ac90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac92:	333c      	adds	r3, #60	; 0x3c
 800ac94:	3354      	adds	r3, #84	; 0x54
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7fc fe46 	bl	8007928 <ld_dword>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca0:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800aca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aca4:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800aca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acaa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800acac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acae:	789b      	ldrb	r3, [r3, #2]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d001      	beq.n	800acb8 <find_volume+0x25c>
 800acb4:	230d      	movs	r3, #13
 800acb6:	e216      	b.n	800b0e6 <find_volume+0x68a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800acb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acba:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800acbe:	461a      	mov	r2, r3
 800acc0:	2301      	movs	r3, #1
 800acc2:	4093      	lsls	r3, r2
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800acca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800accc:	895b      	ldrh	r3, [r3, #10]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <find_volume+0x27a>
 800acd2:	230d      	movs	r3, #13
 800acd4:	e207      	b.n	800b0e6 <find_volume+0x68a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800acd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd8:	333c      	adds	r3, #60	; 0x3c
 800acda:	335c      	adds	r3, #92	; 0x5c
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fc fe23 	bl	8007928 <ld_dword>
 800ace2:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800ace4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace6:	4a03      	ldr	r2, [pc, #12]	; (800acf4 <find_volume+0x298>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d905      	bls.n	800acf8 <find_volume+0x29c>
 800acec:	230d      	movs	r3, #13
 800acee:	e1fa      	b.n	800b0e6 <find_volume+0x68a>
 800acf0:	2000045c 	.word	0x2000045c
 800acf4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	1c9a      	adds	r2, r3, #2
 800acfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acfe:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800ad00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad04:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800ad06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad08:	333c      	adds	r3, #60	; 0x3c
 800ad0a:	3358      	adds	r3, #88	; 0x58
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fc fe0b 	bl	8007928 <ld_dword>
 800ad12:	4602      	mov	r2, r0
 800ad14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad16:	441a      	add	r2, r3
 800ad18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad1a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800ad1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad1e:	333c      	adds	r3, #60	; 0x3c
 800ad20:	3350      	adds	r3, #80	; 0x50
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fc fe00 	bl	8007928 <ld_dword>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad2c:	441a      	add	r2, r3
 800ad2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad30:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800ad32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad36:	4619      	mov	r1, r3
 800ad38:	f04f 0200 	mov.w	r2, #0
 800ad3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad3e:	895b      	ldrh	r3, [r3, #10]
 800ad40:	4618      	mov	r0, r3
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	fb03 f300 	mul.w	r3, r3, r0
 800ad48:	469b      	mov	fp, r3
 800ad4a:	f04f 0c00 	mov.w	ip, #0
 800ad4e:	eb1b 0301 	adds.w	r3, fp, r1
 800ad52:	eb4c 0402 	adc.w	r4, ip, r2
 800ad56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ad5a:	42a2      	cmp	r2, r4
 800ad5c:	bf08      	it	eq
 800ad5e:	4299      	cmpeq	r1, r3
 800ad60:	d201      	bcs.n	800ad66 <find_volume+0x30a>
 800ad62:	230d      	movs	r3, #13
 800ad64:	e1bf      	b.n	800b0e6 <find_volume+0x68a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800ad66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad68:	333c      	adds	r3, #60	; 0x3c
 800ad6a:	3360      	adds	r3, #96	; 0x60
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fc fddb 	bl	8007928 <ld_dword>
 800ad72:	4602      	mov	r2, r0
 800ad74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800ad78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ad80:	f7fd fa7a 	bl	8008278 <clust2sect>
 800ad84:	4603      	mov	r3, r0
 800ad86:	4619      	mov	r1, r3
 800ad88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ad8a:	f7fd f9d9 	bl	8008140 <move_window>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <find_volume+0x33c>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e1a6      	b.n	800b0e6 <find_volume+0x68a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800ad98:	2300      	movs	r3, #0
 800ad9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad9c:	e015      	b.n	800adca <find_volume+0x36e>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ad9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ada0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ada2:	4413      	add	r3, r2
 800ada4:	333c      	adds	r3, #60	; 0x3c
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b81      	cmp	r3, #129	; 0x81
 800adaa:	d10b      	bne.n	800adc4 <find_volume+0x368>
 800adac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adae:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800adb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adb4:	3314      	adds	r3, #20
 800adb6:	4413      	add	r3, r2
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fc fdb5 	bl	8007928 <ld_dword>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d007      	beq.n	800add4 <find_volume+0x378>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800adc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc6:	3320      	adds	r3, #32
 800adc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800add0:	d3e5      	bcc.n	800ad9e <find_volume+0x342>
 800add2:	e000      	b.n	800add6 <find_volume+0x37a>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800add4:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800add6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800addc:	d101      	bne.n	800ade2 <find_volume+0x386>
 800adde:	230d      	movs	r3, #13
 800ade0:	e181      	b.n	800b0e6 <find_volume+0x68a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ade2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295
 800ade8:	61da      	str	r2, [r3, #28]
 800adea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adec:	69da      	ldr	r2, [r3, #28]
 800adee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf0:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800adf2:	2304      	movs	r3, #4
 800adf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800adf8:	e163      	b.n	800b0c2 <find_volume+0x666>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800adfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adfc:	333c      	adds	r3, #60	; 0x3c
 800adfe:	330b      	adds	r3, #11
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7fc fd79 	bl	80078f8 <ld_word>
 800ae06:	4603      	mov	r3, r0
 800ae08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae0c:	d001      	beq.n	800ae12 <find_volume+0x3b6>
 800ae0e:	230d      	movs	r3, #13
 800ae10:	e169      	b.n	800b0e6 <find_volume+0x68a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae14:	333c      	adds	r3, #60	; 0x3c
 800ae16:	3316      	adds	r3, #22
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fc fd6d 	bl	80078f8 <ld_word>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <find_volume+0x3da>
 800ae28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae2a:	333c      	adds	r3, #60	; 0x3c
 800ae2c:	3324      	adds	r3, #36	; 0x24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fc fd7a 	bl	8007928 <ld_dword>
 800ae34:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800ae36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae3a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae3e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800ae42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae44:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae48:	789b      	ldrb	r3, [r3, #2]
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d005      	beq.n	800ae5a <find_volume+0x3fe>
 800ae4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae50:	789b      	ldrb	r3, [r3, #2]
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d001      	beq.n	800ae5a <find_volume+0x3fe>
 800ae56:	230d      	movs	r3, #13
 800ae58:	e145      	b.n	800b0e6 <find_volume+0x68a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5c:	789b      	ldrb	r3, [r3, #2]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae62:	fb02 f303 	mul.w	r3, r2, r3
 800ae66:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae72:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae76:	895b      	ldrh	r3, [r3, #10]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d008      	beq.n	800ae8e <find_volume+0x432>
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	895b      	ldrh	r3, [r3, #10]
 800ae80:	461a      	mov	r2, r3
 800ae82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae84:	895b      	ldrh	r3, [r3, #10]
 800ae86:	3b01      	subs	r3, #1
 800ae88:	4013      	ands	r3, r2
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <find_volume+0x436>
 800ae8e:	230d      	movs	r3, #13
 800ae90:	e129      	b.n	800b0e6 <find_volume+0x68a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae94:	333c      	adds	r3, #60	; 0x3c
 800ae96:	3311      	adds	r3, #17
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fc fd2d 	bl	80078f8 <ld_word>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	461a      	mov	r2, r3
 800aea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea8:	891b      	ldrh	r3, [r3, #8]
 800aeaa:	f003 030f 	and.w	r3, r3, #15
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <find_volume+0x45c>
 800aeb4:	230d      	movs	r3, #13
 800aeb6:	e116      	b.n	800b0e6 <find_volume+0x68a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aeb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeba:	333c      	adds	r3, #60	; 0x3c
 800aebc:	3313      	adds	r3, #19
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fc fd1a 	bl	80078f8 <ld_word>
 800aec4:	4603      	mov	r3, r0
 800aec6:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <find_volume+0x480>
 800aece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed0:	333c      	adds	r3, #60	; 0x3c
 800aed2:	3320      	adds	r3, #32
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fc fd27 	bl	8007928 <ld_dword>
 800aeda:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aede:	333c      	adds	r3, #60	; 0x3c
 800aee0:	330e      	adds	r3, #14
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fc fd08 	bl	80078f8 <ld_word>
 800aee8:	4603      	mov	r3, r0
 800aeea:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aeec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <find_volume+0x49a>
 800aef2:	230d      	movs	r3, #13
 800aef4:	e0f7      	b.n	800b0e6 <find_volume+0x68a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aef6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aefa:	4413      	add	r3, r2
 800aefc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aefe:	8912      	ldrh	r2, [r2, #8]
 800af00:	0912      	lsrs	r2, r2, #4
 800af02:	b292      	uxth	r2, r2
 800af04:	4413      	add	r3, r2
 800af06:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800af08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d201      	bcs.n	800af14 <find_volume+0x4b8>
 800af10:	230d      	movs	r3, #13
 800af12:	e0e8      	b.n	800b0e6 <find_volume+0x68a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af1c:	8952      	ldrh	r2, [r2, #10]
 800af1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <find_volume+0x4d2>
 800af2a:	230d      	movs	r3, #13
 800af2c:	e0db      	b.n	800b0e6 <find_volume+0x68a>
		fmt = FS_FAT32;
 800af2e:	2303      	movs	r3, #3
 800af30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d802      	bhi.n	800af44 <find_volume+0x4e8>
 800af3e:	2302      	movs	r3, #2
 800af40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	f640 72f5 	movw	r2, #4085	; 0xff5
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d802      	bhi.n	800af54 <find_volume+0x4f8>
 800af4e:	2301      	movs	r3, #1
 800af50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800af54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af56:	1c9a      	adds	r2, r3, #2
 800af58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800af5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af60:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800af62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af66:	441a      	add	r2, r3
 800af68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800af6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	441a      	add	r2, r3
 800af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af74:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800af76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af7a:	2b03      	cmp	r3, #3
 800af7c:	d11e      	bne.n	800afbc <find_volume+0x560>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800af7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af80:	333c      	adds	r3, #60	; 0x3c
 800af82:	332a      	adds	r3, #42	; 0x2a
 800af84:	4618      	mov	r0, r3
 800af86:	f7fc fcb7 	bl	80078f8 <ld_word>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <find_volume+0x538>
 800af90:	230d      	movs	r3, #13
 800af92:	e0a8      	b.n	800b0e6 <find_volume+0x68a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800af94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af96:	891b      	ldrh	r3, [r3, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <find_volume+0x544>
 800af9c:	230d      	movs	r3, #13
 800af9e:	e0a2      	b.n	800b0e6 <find_volume+0x68a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800afa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa2:	333c      	adds	r3, #60	; 0x3c
 800afa4:	332c      	adds	r3, #44	; 0x2c
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fc fcbe 	bl	8007928 <ld_dword>
 800afac:	4602      	mov	r2, r0
 800afae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800afb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afba:	e01f      	b.n	800affc <find_volume+0x5a0>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800afbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbe:	891b      	ldrh	r3, [r3, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <find_volume+0x56c>
 800afc4:	230d      	movs	r3, #13
 800afc6:	e08e      	b.n	800b0e6 <find_volume+0x68a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800afc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afce:	441a      	add	r2, r3
 800afd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800afd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d103      	bne.n	800afe4 <find_volume+0x588>
 800afdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	e00a      	b.n	800affa <find_volume+0x59e>
 800afe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afe6:	6a1a      	ldr	r2, [r3, #32]
 800afe8:	4613      	mov	r3, r2
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	4413      	add	r3, r2
 800afee:	085a      	lsrs	r2, r3, #1
 800aff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800affa:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800affc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800affe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b002:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b006:	0a5b      	lsrs	r3, r3, #9
 800b008:	429a      	cmp	r2, r3
 800b00a:	d201      	bcs.n	800b010 <find_volume+0x5b4>
 800b00c:	230d      	movs	r3, #13
 800b00e:	e06a      	b.n	800b0e6 <find_volume+0x68a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b012:	f04f 32ff 	mov.w	r2, #4294967295
 800b016:	61da      	str	r2, [r3, #28]
 800b018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01a:	69da      	ldr	r2, [r3, #28]
 800b01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800b020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b022:	2280      	movs	r2, #128	; 0x80
 800b024:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d149      	bne.n	800b0c2 <find_volume+0x666>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b030:	333c      	adds	r3, #60	; 0x3c
 800b032:	3330      	adds	r3, #48	; 0x30
 800b034:	4618      	mov	r0, r3
 800b036:	f7fc fc5f 	bl	80078f8 <ld_word>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d140      	bne.n	800b0c2 <find_volume+0x666>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b042:	3301      	adds	r3, #1
 800b044:	4619      	mov	r1, r3
 800b046:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b048:	f7fd f87a 	bl	8008140 <move_window>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d137      	bne.n	800b0c2 <find_volume+0x666>
		{
			fs->fsi_flag = 0;
 800b052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b054:	2200      	movs	r2, #0
 800b056:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b05a:	333c      	adds	r3, #60	; 0x3c
 800b05c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b060:	4618      	mov	r0, r3
 800b062:	f7fc fc49 	bl	80078f8 <ld_word>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b06e:	429a      	cmp	r2, r3
 800b070:	d127      	bne.n	800b0c2 <find_volume+0x666>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b074:	333c      	adds	r3, #60	; 0x3c
 800b076:	4618      	mov	r0, r3
 800b078:	f7fc fc56 	bl	8007928 <ld_dword>
 800b07c:	4602      	mov	r2, r0
 800b07e:	4b1c      	ldr	r3, [pc, #112]	; (800b0f0 <find_volume+0x694>)
 800b080:	429a      	cmp	r2, r3
 800b082:	d11e      	bne.n	800b0c2 <find_volume+0x666>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b086:	333c      	adds	r3, #60	; 0x3c
 800b088:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fc fc4b 	bl	8007928 <ld_dword>
 800b092:	4602      	mov	r2, r0
 800b094:	4b17      	ldr	r3, [pc, #92]	; (800b0f4 <find_volume+0x698>)
 800b096:	429a      	cmp	r2, r3
 800b098:	d113      	bne.n	800b0c2 <find_volume+0x666>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09c:	333c      	adds	r3, #60	; 0x3c
 800b09e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fc fc40 	bl	8007928 <ld_dword>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ac:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b0:	333c      	adds	r3, #60	; 0x3c
 800b0b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fc fc36 	bl	8007928 <ld_dword>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b0c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b0c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <find_volume+0x69c>)
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <find_volume+0x69c>)
 800b0d4:	801a      	strh	r2, [r3, #0]
 800b0d6:	4b08      	ldr	r3, [pc, #32]	; (800b0f8 <find_volume+0x69c>)
 800b0d8:	881a      	ldrh	r2, [r3, #0]
 800b0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b0de:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b0e0:	f7fc ffc6 	bl	8008070 <clear_lock>
#endif
	return FR_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3760      	adds	r7, #96	; 0x60
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b0f0:	41615252 	.word	0x41615252
 800b0f4:	61417272 	.word	0x61417272
 800b0f8:	20000460 	.word	0x20000460

0800b0fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b106:	2309      	movs	r3, #9
 800b108:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d02e      	beq.n	800b16e <validate+0x72>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d02a      	beq.n	800b16e <validate+0x72>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d025      	beq.n	800b16e <validate+0x72>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	889a      	ldrh	r2, [r3, #4]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	88db      	ldrh	r3, [r3, #6]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d11e      	bne.n	800b16e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f7fc fe22 	bl	8007d7e <lock_fs>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d014      	beq.n	800b16a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	785b      	ldrb	r3, [r3, #1]
 800b146:	4618      	mov	r0, r3
 800b148:	f7fc fb38 	bl	80077bc <disk_status>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d102      	bne.n	800b15c <validate+0x60>
				res = FR_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
 800b15a:	e008      	b.n	800b16e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2100      	movs	r1, #0
 800b162:	4618      	mov	r0, r3
 800b164:	f7fc fe21 	bl	8007daa <unlock_fs>
 800b168:	e001      	b.n	800b16e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b16a:	230f      	movs	r3, #15
 800b16c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <validate+0x7e>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	e000      	b.n	800b17c <validate+0x80>
 800b17a:	2300      	movs	r3, #0
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	6013      	str	r3, [r2, #0]
	return res;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b088      	sub	sp, #32
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b19e:	f107 0310 	add.w	r3, r7, #16
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff fbb2 	bl	800a90c <get_ldnumber>
 800b1a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	da01      	bge.n	800b1b4 <f_mount+0x28>
 800b1b0:	230b      	movs	r3, #11
 800b1b2:	e048      	b.n	800b246 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b1b4:	4a26      	ldr	r2, [pc, #152]	; (800b250 <f_mount+0xc4>)
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00f      	beq.n	800b1e4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b1c4:	69b8      	ldr	r0, [r7, #24]
 800b1c6:	f7fc ff53 	bl	8008070 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f002 ffea 	bl	800e1a8 <ff_del_syncobj>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <f_mount+0x52>
 800b1da:	2302      	movs	r3, #2
 800b1dc:	e033      	b.n	800b246 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00f      	beq.n	800b20a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3314      	adds	r3, #20
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	f002 ffb4 	bl	800e168 <ff_cre_syncobj>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <f_mount+0x7e>
 800b206:	2302      	movs	r3, #2
 800b208:	e01d      	b.n	800b246 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4910      	ldr	r1, [pc, #64]	; (800b250 <f_mount+0xc4>)
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <f_mount+0x94>
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d001      	beq.n	800b224 <f_mount+0x98>
 800b220:	2300      	movs	r3, #0
 800b222:	e010      	b.n	800b246 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b224:	f107 010c 	add.w	r1, r7, #12
 800b228:	f107 0308 	add.w	r3, r7, #8
 800b22c:	2200      	movs	r2, #0
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff fc14 	bl	800aa5c <find_volume>
 800b234:	4603      	mov	r3, r0
 800b236:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	7dfa      	ldrb	r2, [r7, #23]
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fc fdb3 	bl	8007daa <unlock_fs>
 800b244:	7dfb      	ldrb	r3, [r7, #23]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3720      	adds	r7, #32
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	2000045c 	.word	0x2000045c

0800b254 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b254:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b258:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	f107 030c 	add.w	r3, r7, #12
 800b262:	6018      	str	r0, [r3, #0]
 800b264:	f107 0308 	add.w	r3, r7, #8
 800b268:	6019      	str	r1, [r3, #0]
 800b26a:	1dfb      	adds	r3, r7, #7
 800b26c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b26e:	f107 030c 	add.w	r3, r7, #12
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <f_open+0x28>
 800b278:	2309      	movs	r3, #9
 800b27a:	e365      	b.n	800b948 <f_open+0x6f4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b27c:	1dfb      	adds	r3, r7, #7
 800b27e:	1dfa      	adds	r2, r7, #7
 800b280:	7812      	ldrb	r2, [r2, #0]
 800b282:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b286:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800b288:	1dfb      	adds	r3, r7, #7
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	f207 4174 	addw	r1, r7, #1140	; 0x474
 800b290:	f107 0308 	add.w	r3, r7, #8
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fbe1 	bl	800aa5c <find_volume>
 800b29a:	4603      	mov	r3, r0
 800b29c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res == FR_OK) {
 800b2a0:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f040 833c 	bne.w	800b922 <f_open+0x6ce>
		dj.obj.fs = fs;
 800b2aa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b2ae:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		INIT_NAMBUF(fs);
 800b2b2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b2b6:	f507 721d 	add.w	r2, r7, #628	; 0x274
 800b2ba:	60da      	str	r2, [r3, #12]
 800b2bc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b2c0:	f107 0214 	add.w	r2, r7, #20
 800b2c4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b2c6:	f107 0308 	add.w	r3, r7, #8
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7ff fa72 	bl	800a7bc <follow_path>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b2de:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d11b      	bne.n	800b31e <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b2e6:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 800b2ea:	b25b      	sxtb	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	da03      	bge.n	800b2f8 <f_open+0xa4>
				res = FR_INVALID_NAME;
 800b2f0:	2306      	movs	r3, #6
 800b2f2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800b2f6:	e012      	b.n	800b31e <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b2f8:	1dfb      	adds	r3, r7, #7
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	f023 0301 	bic.w	r3, r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	bf14      	ite	ne
 800b304:	2301      	movne	r3, #1
 800b306:	2300      	moveq	r3, #0
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	461a      	mov	r2, r3
 800b30c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7fc fd64 	bl	8007de0 <chk_lock>
 800b318:	4603      	mov	r3, r0
 800b31a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b31e:	1dfb      	adds	r3, r7, #7
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	f003 031c 	and.w	r3, r3, #28
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 8148 	beq.w	800b5bc <f_open+0x368>
			if (res != FR_OK) {					/* No file, create new */
 800b32c:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b330:	2b00      	cmp	r3, #0
 800b332:	d019      	beq.n	800b368 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b334:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b338:	2b04      	cmp	r3, #4
 800b33a:	d10e      	bne.n	800b35a <f_open+0x106>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b33c:	f7fc fdac 	bl	8007e98 <enq_lock>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d006      	beq.n	800b354 <f_open+0x100>
 800b346:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fd8e 	bl	8009e6c <dir_register>
 800b350:	4603      	mov	r3, r0
 800b352:	e000      	b.n	800b356 <f_open+0x102>
 800b354:	2312      	movs	r3, #18
 800b356:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b35a:	1dfb      	adds	r3, r7, #7
 800b35c:	1dfa      	adds	r2, r7, #7
 800b35e:	7812      	ldrb	r2, [r2, #0]
 800b360:	f042 0208 	orr.w	r2, r2, #8
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	e012      	b.n	800b38e <f_open+0x13a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b368:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800b36c:	f003 0311 	and.w	r3, r3, #17
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <f_open+0x128>
					res = FR_DENIED;
 800b374:	2307      	movs	r3, #7
 800b376:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800b37a:	e008      	b.n	800b38e <f_open+0x13a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b37c:	1dfb      	adds	r3, r7, #7
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <f_open+0x13a>
 800b388:	2308      	movs	r3, #8
 800b38a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b38e:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b392:	2b00      	cmp	r3, #0
 800b394:	f040 812f 	bne.w	800b5f6 <f_open+0x3a2>
 800b398:	1dfb      	adds	r3, r7, #7
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 0308 	and.w	r3, r3, #8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 8128 	beq.w	800b5f6 <f_open+0x3a2>
				dw = GET_FATTIME();
 800b3a6:	f7fb ffb5 	bl	8007314 <get_fattime>
 800b3aa:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800b3ae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	f040 80a6 	bne.w	800b506 <f_open+0x2b2>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800b3ba:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800b3be:	f107 030c 	add.w	r3, r7, #12
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800b3c6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	3334      	adds	r3, #52	; 0x34
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fc faaa 	bl	8007928 <ld_dword>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f107 030c 	add.w	r3, r7, #12
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b3de:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	3338      	adds	r3, #56	; 0x38
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fc fac1 	bl	800796e <ld_qword>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	f107 020c 	add.w	r2, r7, #12
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b3fa:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	3321      	adds	r3, #33	; 0x21
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 0302 	and.w	r3, r3, #2
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	f107 030c 	add.w	r3, r7, #12
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800b412:	f107 030c 	add.w	r3, r7, #12
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2200      	movs	r2, #0
 800b41a:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800b41c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	3308      	adds	r3, #8
 800b424:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fc fb78 	bl	8007b1e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800b42e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	3314      	adds	r3, #20
 800b436:	2200      	movs	r2, #0
 800b438:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800b43a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	330c      	adds	r3, #12
 800b442:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800b446:	4618      	mov	r0, r3
 800b448:	f7fc fb69 	bl	8007b1e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800b44c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	3315      	adds	r3, #21
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800b458:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	3304      	adds	r3, #4
 800b460:	2220      	movs	r2, #32
 800b462:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800b464:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	3334      	adds	r3, #52	; 0x34
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fc fb55 	bl	8007b1e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800b474:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b47e:	f04f 0200 	mov.w	r2, #0
 800b482:	f04f 0300 	mov.w	r3, #0
 800b486:	4608      	mov	r0, r1
 800b488:	f7fc fb75 	bl	8007b76 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800b48c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b496:	f04f 0200 	mov.w	r2, #0
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	4608      	mov	r0, r1
 800b4a0:	f7fc fb69 	bl	8007b76 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800b4a4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	3321      	adds	r3, #33	; 0x21
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800b4b0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fa26 	bl	8009906 <store_xdir>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800b4c0:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 8096 	bne.w	800b5f6 <f_open+0x3a2>
 800b4ca:	f107 030c 	add.w	r3, r7, #12
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 808f 	beq.w	800b5f6 <f_open+0x3a2>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800b4d8:	f107 030c 	add.w	r3, r7, #12
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	f107 030c 	add.w	r3, r7, #12
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f7fd fa3b 	bl	8008964 <remove_chain>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800b4f4:	f107 030c 	add.w	r3, r7, #12
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	689a      	ldr	r2, [r3, #8]
 800b4fc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b500:	3a01      	subs	r2, #1
 800b502:	619a      	str	r2, [r3, #24]
 800b504:	e077      	b.n	800b5f6 <f_open+0x3a2>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b506:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800b50a:	330e      	adds	r3, #14
 800b50c:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800b510:	4618      	mov	r0, r3
 800b512:	f7fc fb04 	bl	8007b1e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b516:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800b51a:	3316      	adds	r3, #22
 800b51c:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800b520:	4618      	mov	r0, r3
 800b522:	f7fc fafc 	bl	8007b1e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b526:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800b52a:	330b      	adds	r3, #11
 800b52c:	2220      	movs	r2, #32
 800b52e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b530:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b534:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fd fdc0 	bl	80090c0 <ld_clust>
 800b540:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b544:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b548:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	; 0x4b4
 800b54c:	2200      	movs	r2, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fd fdd5 	bl	80090fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b554:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800b558:	331c      	adds	r3, #28
 800b55a:	2100      	movs	r1, #0
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fc fade 	bl	8007b1e <st_dword>
					fs->wflag = 1;
 800b562:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b566:	2201      	movs	r2, #1
 800b568:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b56a:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d041      	beq.n	800b5f6 <f_open+0x3a2>
						dw = fs->winsect;
 800b572:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b578:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
						res = remove_chain(&dj.obj, cl, 0);
 800b57c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b580:	2200      	movs	r2, #0
 800b582:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 800b586:	4618      	mov	r0, r3
 800b588:	f7fd f9ec 	bl	8008964 <remove_chain>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						if (res == FR_OK) {
 800b592:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b596:	2b00      	cmp	r3, #0
 800b598:	d12d      	bne.n	800b5f6 <f_open+0x3a2>
							res = move_window(fs, dw);
 800b59a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b59e:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fc fdcc 	bl	8008140 <move_window>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5ae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b5b2:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 800b5b6:	3a01      	subs	r2, #1
 800b5b8:	619a      	str	r2, [r3, #24]
 800b5ba:	e01c      	b.n	800b5f6 <f_open+0x3a2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5bc:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d118      	bne.n	800b5f6 <f_open+0x3a2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5c4:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800b5c8:	f003 0310 	and.w	r3, r3, #16
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <f_open+0x384>
					res = FR_NO_FILE;
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800b5d6:	e00e      	b.n	800b5f6 <f_open+0x3a2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5d8:	1dfb      	adds	r3, r7, #7
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d008      	beq.n	800b5f6 <f_open+0x3a2>
 800b5e4:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800b5e8:	f003 0301 	and.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <f_open+0x3a2>
						res = FR_DENIED;
 800b5f0:	2307      	movs	r3, #7
 800b5f2:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5f6:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d136      	bne.n	800b66c <f_open+0x418>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5fe:	1dfb      	adds	r3, r7, #7
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	f003 0308 	and.w	r3, r3, #8
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <f_open+0x3c2>
				mode |= FA_MODIFIED;
 800b60a:	1dfb      	adds	r3, r7, #7
 800b60c:	1dfa      	adds	r2, r7, #7
 800b60e:	7812      	ldrb	r2, [r2, #0]
 800b610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b614:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b616:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b61a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b61c:	f107 030c 	add.w	r3, r7, #12
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800b624:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800b628:	f107 030c 	add.w	r3, r7, #12
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b630:	1dfb      	adds	r3, r7, #7
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	f023 0301 	bic.w	r3, r3, #1
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bf14      	ite	ne
 800b63c:	2301      	movne	r3, #1
 800b63e:	2300      	moveq	r3, #0
 800b640:	b2db      	uxtb	r3, r3
 800b642:	461a      	mov	r2, r3
 800b644:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b648:	4611      	mov	r1, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fc fc46 	bl	8007edc <inc_lock>
 800b650:	4602      	mov	r2, r0
 800b652:	f107 030c 	add.w	r3, r7, #12
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b65a:	f107 030c 	add.w	r3, r7, #12
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d102      	bne.n	800b66c <f_open+0x418>
 800b666:	2302      	movs	r3, #2
 800b668:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b66c:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 8156 	bne.w	800b922 <f_open+0x6ce>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b676:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	2b04      	cmp	r3, #4
 800b67e:	d13f      	bne.n	800b700 <f_open+0x4ac>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b680:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800b684:	f107 030c 	add.w	r3, r7, #12
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b68c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800b690:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b694:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b698:	f897 247f 	ldrb.w	r2, [r7, #1151]	; 0x47f
 800b69c:	431a      	orrs	r2, r3
 800b69e:	f107 030c 	add.w	r3, r7, #12
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b6a6:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 800b6aa:	f107 030c 	add.w	r3, r7, #12
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b6b2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	3334      	adds	r3, #52	; 0x34
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fc f934 	bl	8007928 <ld_dword>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	f107 030c 	add.w	r3, r7, #12
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b6ca:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	3338      	adds	r3, #56	; 0x38
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fc f94b 	bl	800796e <ld_qword>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	f107 020c 	add.w	r2, r7, #12
 800b6e0:	6812      	ldr	r2, [r2, #0]
 800b6e2:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b6e6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	3321      	adds	r3, #33	; 0x21
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	f107 030c 	add.w	r3, r7, #12
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	71da      	strb	r2, [r3, #7]
 800b6fe:	e01a      	b.n	800b736 <f_open+0x4e2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b700:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b704:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800b708:	4611      	mov	r1, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fd fcd8 	bl	80090c0 <ld_clust>
 800b710:	4602      	mov	r2, r0
 800b712:	f107 030c 	add.w	r3, r7, #12
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b71a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800b71e:	331c      	adds	r3, #28
 800b720:	4618      	mov	r0, r3
 800b722:	f7fc f901 	bl	8007928 <ld_dword>
 800b726:	4603      	mov	r3, r0
 800b728:	f04f 0400 	mov.w	r4, #0
 800b72c:	f107 020c 	add.w	r2, r7, #12
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b736:	f107 030c 	add.w	r3, r7, #12
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2200      	movs	r2, #0
 800b73e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b740:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800b744:	f107 030c 	add.w	r3, r7, #12
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b74c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b750:	88da      	ldrh	r2, [r3, #6]
 800b752:	f107 030c 	add.w	r3, r7, #12
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	1dfa      	adds	r2, r7, #7
 800b762:	7812      	ldrb	r2, [r2, #0]
 800b764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800b768:	f107 030c 	add.w	r3, r7, #12
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2200      	movs	r2, #0
 800b77c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b77e:	f107 030c 	add.w	r3, r7, #12
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	f04f 0300 	mov.w	r3, #0
 800b788:	f04f 0400 	mov.w	r4, #0
 800b78c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b790:	f107 030c 	add.w	r3, r7, #12
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3354      	adds	r3, #84	; 0x54
 800b798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b79c:	2100      	movs	r1, #0
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fc fa91 	bl	8007cc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7a4:	1dfb      	adds	r3, r7, #7
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	f003 0320 	and.w	r3, r3, #32
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 80b8 	beq.w	800b922 <f_open+0x6ce>
 800b7b2:	f107 030c 	add.w	r3, r7, #12
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b7bc:	4323      	orrs	r3, r4
 800b7be:	f000 80b0 	beq.w	800b922 <f_open+0x6ce>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b7c2:	f107 030c 	add.w	r3, r7, #12
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b7cc:	f107 020c 	add.w	r2, r7, #12
 800b7d0:	6812      	ldr	r2, [r2, #0]
 800b7d2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b7d6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b7da:	895b      	ldrh	r3, [r3, #10]
 800b7dc:	025b      	lsls	r3, r3, #9
 800b7de:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b7e2:	f107 030c 	add.w	r3, r7, #12
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b7ee:	f107 030c 	add.w	r3, r7, #12
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800b7f8:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800b7fc:	e9c2 3400 	strd	r3, r4, [r2]
 800b800:	e02b      	b.n	800b85a <f_open+0x606>
					clst = get_fat(&fp->obj, clst);
 800b802:	f107 030c 	add.w	r3, r7, #12
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fc fd53 	bl	80082b8 <get_fat>
 800b812:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
					if (clst <= 1) res = FR_INT_ERR;
 800b816:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d802      	bhi.n	800b824 <f_open+0x5d0>
 800b81e:	2302      	movs	r3, #2
 800b820:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b824:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82c:	d102      	bne.n	800b834 <f_open+0x5e0>
 800b82e:	2301      	movs	r3, #1
 800b830:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b834:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800b838:	469b      	mov	fp, r3
 800b83a:	f04f 0c00 	mov.w	ip, #0
 800b83e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b842:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b846:	460b      	mov	r3, r1
 800b848:	4614      	mov	r4, r2
 800b84a:	ebb3 030b 	subs.w	r3, r3, fp
 800b84e:	eb64 040c 	sbc.w	r4, r4, ip
 800b852:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 800b856:	e9c2 3400 	strd	r3, r4, [r2]
 800b85a:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10c      	bne.n	800b87c <f_open+0x628>
 800b862:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800b866:	4619      	mov	r1, r3
 800b868:	f04f 0200 	mov.w	r2, #0
 800b86c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b870:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b874:	42a2      	cmp	r2, r4
 800b876:	bf08      	it	eq
 800b878:	4299      	cmpeq	r1, r3
 800b87a:	d3c2      	bcc.n	800b802 <f_open+0x5ae>
				}
				fp->clust = clst;
 800b87c:	f107 030c 	add.w	r3, r7, #12
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 800b886:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b888:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d148      	bne.n	800b922 <f_open+0x6ce>
 800b890:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b894:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b898:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	ea03 0b01 	and.w	fp, r3, r1
 800b8a4:	ea04 0c02 	and.w	ip, r4, r2
 800b8a8:	ea5b 030c 	orrs.w	r3, fp, ip
 800b8ac:	d039      	beq.n	800b922 <f_open+0x6ce>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b8ae:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b8b2:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fc fcde 	bl	8008278 <clust2sect>
 800b8bc:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 800b8c0:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <f_open+0x67c>
						res = FR_INT_ERR;
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800b8ce:	e028      	b.n	800b922 <f_open+0x6ce>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8d0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b8d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	f04f 0400 	mov.w	r4, #0
 800b8e0:	0a4b      	lsrs	r3, r1, #9
 800b8e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b8e6:	0a54      	lsrs	r4, r2, #9
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800b8ee:	441a      	add	r2, r3
 800b8f0:	f107 030c 	add.w	r3, r7, #12
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8f8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b8fc:	7858      	ldrb	r0, [r3, #1]
 800b8fe:	f107 030c 	add.w	r3, r7, #12
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b908:	f107 030c 	add.w	r3, r7, #12
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b910:	2301      	movs	r3, #1
 800b912:	f7fb ff93 	bl	800783c <disk_read>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <f_open+0x6ce>
 800b91c:	2301      	movs	r3, #1
 800b91e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b922:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <f_open+0x6e0>
 800b92a:	f107 030c 	add.w	r3, r7, #12
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b934:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800b938:	f897 24e7 	ldrb.w	r2, [r7, #1255]	; 0x4e7
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fc fa33 	bl	8007daa <unlock_fs>
 800b944:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
}
 800b948:	4618      	mov	r0, r3
 800b94a:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 800b94e:	46bd      	mov	sp, r7
 800b950:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b954 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b954:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b958:	b08c      	sub	sp, #48	; 0x30
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	60f8      	str	r0, [r7, #12]
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	607a      	str	r2, [r7, #4]
 800b962:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f107 0210 	add.w	r2, r7, #16
 800b974:	4611      	mov	r1, r2
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff fbc0 	bl	800b0fc <validate>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b982:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b986:	2b00      	cmp	r3, #0
 800b988:	d108      	bne.n	800b99c <f_write+0x48>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d009      	beq.n	800b9b0 <f_write+0x5c>
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fc fa00 	bl	8007daa <unlock_fs>
 800b9aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9ae:	e1b3      	b.n	800bd18 <f_write+0x3c4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <f_write+0x78>
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	2107      	movs	r1, #7
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fc f9f1 	bl	8007daa <unlock_fs>
 800b9c8:	2307      	movs	r3, #7
 800b9ca:	e1a5      	b.n	800bd18 <f_write+0x3c4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	f000 818c 	beq.w	800bcee <f_write+0x39a>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800b9dc:	461a      	mov	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	441a      	add	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	f080 8180 	bcs.w	800bcee <f_write+0x39a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800b9f4:	43db      	mvns	r3, r3
 800b9f6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b9f8:	e179      	b.n	800bcee <f_write+0x39a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 800ba00:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ba04:	f04f 0200 	mov.w	r2, #0
 800ba08:	ea0b 0301 	and.w	r3, fp, r1
 800ba0c:	ea0c 0402 	and.w	r4, ip, r2
 800ba10:	4323      	orrs	r3, r4
 800ba12:	f040 811c 	bne.w	800bc4e <f_write+0x2fa>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800ba1c:	f04f 0300 	mov.w	r3, #0
 800ba20:	f04f 0400 	mov.w	r4, #0
 800ba24:	0a4b      	lsrs	r3, r1, #9
 800ba26:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ba2a:	0a54      	lsrs	r4, r2, #9
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	895b      	ldrh	r3, [r3, #10]
 800ba32:	3b01      	subs	r3, #1
 800ba34:	4013      	ands	r3, r2
 800ba36:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba38:	69bb      	ldr	r3, [r7, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d152      	bne.n	800bae4 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800ba44:	4323      	orrs	r3, r4
 800ba46:	d10c      	bne.n	800ba62 <f_write+0x10e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11c      	bne.n	800ba8e <f_write+0x13a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fd f837 	bl	8008acc <create_chain>
 800ba5e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba60:	e015      	b.n	800ba8e <f_write+0x13a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <f_write+0x12a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800ba70:	461a      	mov	r2, r3
 800ba72:	4623      	mov	r3, r4
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7fd f92a 	bl	8008cce <clmt_clust>
 800ba7a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ba7c:	e007      	b.n	800ba8e <f_write+0x13a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba84:	4619      	mov	r1, r3
 800ba86:	4610      	mov	r0, r2
 800ba88:	f7fd f820 	bl	8008acc <create_chain>
 800ba8c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 8131 	beq.w	800bcf8 <f_write+0x3a4>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d10a      	bne.n	800bab2 <f_write+0x15e>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2102      	movs	r1, #2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fc f97e 	bl	8007daa <unlock_fs>
 800baae:	2302      	movs	r3, #2
 800bab0:	e132      	b.n	800bd18 <f_write+0x3c4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab8:	d10a      	bne.n	800bad0 <f_write+0x17c>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2101      	movs	r1, #1
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fc f96f 	bl	8007daa <unlock_fs>
 800bacc:	2301      	movs	r3, #1
 800bace:	e123      	b.n	800bd18 <f_write+0x3c4>
				fp->clust = clst;			/* Update current cluster */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bad4:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d102      	bne.n	800bae4 <f_write+0x190>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baea:	b25b      	sxtb	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	da20      	bge.n	800bb32 <f_write+0x1de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	7858      	ldrb	r0, [r3, #1]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bafe:	2301      	movs	r3, #1
 800bb00:	f7fb febc 	bl	800787c <disk_write>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <f_write+0x1cc>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2101      	movs	r1, #1
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fc f947 	bl	8007daa <unlock_fs>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e0fb      	b.n	800bd18 <f_write+0x3c4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb38:	4619      	mov	r1, r3
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	f7fc fb9c 	bl	8008278 <clust2sect>
 800bb40:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10a      	bne.n	800bb5e <f_write+0x20a>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2102      	movs	r1, #2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fc f928 	bl	8007daa <unlock_fs>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e0dc      	b.n	800bd18 <f_write+0x3c4>
			sect += csect;
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	4413      	add	r3, r2
 800bb64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	0a5b      	lsrs	r3, r3, #9
 800bb6a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d044      	beq.n	800bbfc <f_write+0x2a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	4413      	add	r3, r2
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	8952      	ldrh	r2, [r2, #10]
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d905      	bls.n	800bb8c <f_write+0x238>
					cc = fs->csize - csect;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	895b      	ldrh	r3, [r3, #10]
 800bb84:	461a      	mov	r2, r3
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	7858      	ldrb	r0, [r3, #1]
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	69f9      	ldr	r1, [r7, #28]
 800bb96:	f7fb fe71 	bl	800787c <disk_write>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00a      	beq.n	800bbb6 <f_write+0x262>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fc f8fc 	bl	8007daa <unlock_fs>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e0b0      	b.n	800bd18 <f_write+0x3c4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	6a3a      	ldr	r2, [r7, #32]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d917      	bls.n	800bbf4 <f_write+0x2a0>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	025b      	lsls	r3, r3, #9
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbdc:	4619      	mov	r1, r3
 800bbde:	f7fc f851 	bl	8007c84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	025b      	lsls	r3, r3, #9
 800bbf8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bbfa:	e04d      	b.n	800bc98 <f_write+0x344>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d020      	beq.n	800bc48 <f_write+0x2f4>
				fp->fptr < fp->obj.objsize &&
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc12:	42a2      	cmp	r2, r4
 800bc14:	bf08      	it	eq
 800bc16:	4299      	cmpeq	r1, r3
 800bc18:	d216      	bcs.n	800bc48 <f_write+0x2f4>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	7858      	ldrb	r0, [r3, #1]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bc24:	2301      	movs	r3, #1
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	f7fb fe08 	bl	800783c <disk_read>
 800bc2c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00a      	beq.n	800bc48 <f_write+0x2f4>
					ABORT(fs, FR_DISK_ERR);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fc f8b3 	bl	8007daa <unlock_fs>
 800bc44:	2301      	movs	r3, #1
 800bc46:	e067      	b.n	800bd18 <f_write+0x3c4>
			}
#endif
			fp->sect = sect;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d901      	bls.n	800bc6a <f_write+0x316>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc7a:	4413      	add	r3, r2
 800bc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7e:	69f9      	ldr	r1, [r7, #28]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fb ffff 	bl	8007c84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc98:	69fa      	ldr	r2, [r7, #28]
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9c:	4413      	add	r3, r2
 800bc9e:	61fb      	str	r3, [r7, #28]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	469b      	mov	fp, r3
 800bcaa:	f04f 0c00 	mov.w	ip, #0
 800bcae:	eb1b 0301 	adds.w	r3, fp, r1
 800bcb2:	eb4c 0402 	adc.w	r4, ip, r2
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 800bcc8:	4294      	cmp	r4, r2
 800bcca:	bf08      	it	eq
 800bccc:	428b      	cmpeq	r3, r1
 800bcce:	d201      	bcs.n	800bcd4 <f_write+0x380>
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	441a      	add	r2, r3
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f47f ae82 	bne.w	800b9fa <f_write+0xa6>
 800bcf6:	e000      	b.n	800bcfa <f_write+0x3a6>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcf8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2100      	movs	r1, #0
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fc f84a 	bl	8007daa <unlock_fs>
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3730      	adds	r7, #48	; 0x30
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bd22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd22:	b590      	push	{r4, r7, lr}
 800bd24:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	1d3b      	adds	r3, r7, #4
 800bd2c:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bd2e:	1d3b      	adds	r3, r7, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800bd36:	4611      	mov	r1, r2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff f9df 	bl	800b0fc <validate>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
	if (res == FR_OK) {
 800bd44:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f040 8149 	bne.w	800bfe0 <f_sync+0x2be>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bd4e:	1d3b      	adds	r3, r7, #4
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f000 8140 	beq.w	800bfe0 <f_sync+0x2be>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd60:	1d3b      	adds	r3, r7, #4
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd68:	b25b      	sxtb	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da22      	bge.n	800bdb4 <f_sync+0x92>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd6e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bd72:	7858      	ldrb	r0, [r3, #1]
 800bd74:	1d3b      	adds	r3, r7, #4
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800bd7c:	1d3b      	adds	r3, r7, #4
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd82:	2301      	movs	r3, #1
 800bd84:	f7fb fd7a 	bl	800787c <disk_write>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d007      	beq.n	800bd9e <f_sync+0x7c>
 800bd8e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bd92:	2101      	movs	r1, #1
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fc f808 	bl	8007daa <unlock_fs>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e12a      	b.n	800bff4 <f_sync+0x2d2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd9e:	1d3b      	adds	r3, r7, #4
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bda6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	1d3b      	adds	r3, r7, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bdb4:	f7fb faae 	bl	8007314 <get_fattime>
 800bdb8:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bdbc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	f040 80af 	bne.w	800bf26 <f_sync+0x204>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800bdc8:	1d3b      	adds	r3, r7, #4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fc fd69 	bl	80088a4 <fill_first_frag>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 800bdd8:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10c      	bne.n	800bdfa <f_sync+0xd8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bde0:	1d3b      	adds	r3, r7, #4
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	1d3b      	adds	r3, r7, #4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdea:	f04f 32ff 	mov.w	r2, #4294967295
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f7fc fd87 	bl	8008902 <fill_last_frag>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				}
				if (res == FR_OK) {
 800bdfa:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f040 80ee 	bne.w	800bfe0 <f_sync+0x2be>
					INIT_NAMBUF(fs);
 800be04:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be08:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800be0c:	60da      	str	r2, [r3, #12]
 800be0e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be12:	f107 0208 	add.w	r2, r7, #8
 800be16:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800be18:	1d3b      	adds	r3, r7, #4
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800be20:	4611      	mov	r1, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f7fd fd32 	bl	800988c <load_obj_dir>
 800be28:	4603      	mov	r3, r0
 800be2a:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					if (res == FR_OK) {
 800be2e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800be32:	2b00      	cmp	r3, #0
 800be34:	f040 80d4 	bne.w	800bfe0 <f_sync+0x2be>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800be38:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	3304      	adds	r3, #4
 800be40:	781a      	ldrb	r2, [r3, #0]
 800be42:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	3304      	adds	r3, #4
 800be4a:	f042 0220 	orr.w	r2, r2, #32
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800be52:	1d3b      	adds	r3, r7, #4
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	79da      	ldrb	r2, [r3, #7]
 800be58:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	3321      	adds	r3, #33	; 0x21
 800be60:	f042 0201 	orr.w	r2, r2, #1
 800be64:	b2d2      	uxtb	r2, r2
 800be66:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800be68:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be72:	1d3b      	adds	r3, r7, #4
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	4619      	mov	r1, r3
 800be7a:	4610      	mov	r0, r2
 800be7c:	f7fb fe4f 	bl	8007b1e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800be80:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be8a:	1d3b      	adds	r3, r7, #4
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800be92:	461a      	mov	r2, r3
 800be94:	4623      	mov	r3, r4
 800be96:	4608      	mov	r0, r1
 800be98:	f7fb fe6d 	bl	8007b76 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800be9c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800bea6:	1d3b      	adds	r3, r7, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800beae:	461a      	mov	r2, r3
 800beb0:	4623      	mov	r3, r4
 800beb2:	4608      	mov	r0, r1
 800beb4:	f7fb fe5f 	bl	8007b76 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800beb8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	330c      	adds	r3, #12
 800bec0:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fb fe2a 	bl	8007b1e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800beca:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	3315      	adds	r3, #21
 800bed2:	2200      	movs	r2, #0
 800bed4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800bed6:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	3310      	adds	r3, #16
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fb fe1c 	bl	8007b1e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800bee6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800beea:	4618      	mov	r0, r3
 800beec:	f7fd fd0b 	bl	8009906 <store_xdir>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
						if (res == FR_OK) {
 800bef6:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800befa:	2b00      	cmp	r3, #0
 800befc:	d170      	bne.n	800bfe0 <f_sync+0x2be>
							res = sync_fs(fs);
 800befe:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fc f94a 	bl	800819c <sync_fs>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800bf0e:	1d3b      	adds	r3, r7, #4
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	1d3b      	adds	r3, r7, #4
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bf24:	e05c      	b.n	800bfe0 <f_sync+0x2be>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf26:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 800bf2a:	1d3b      	adds	r3, r7, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7fc f904 	bl	8008140 <move_window>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 800bf3e:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d14c      	bne.n	800bfe0 <f_sync+0x2be>
					dir = fp->dir_ptr;
 800bf46:	1d3b      	adds	r3, r7, #4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4c:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf50:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800bf54:	330b      	adds	r3, #11
 800bf56:	781a      	ldrb	r2, [r3, #0]
 800bf58:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800bf5c:	330b      	adds	r3, #11
 800bf5e:	f042 0220 	orr.w	r2, r2, #32
 800bf62:	b2d2      	uxtb	r2, r2
 800bf64:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf66:	1d3b      	adds	r3, r7, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6818      	ldr	r0, [r3, #0]
 800bf6c:	1d3b      	adds	r3, r7, #4
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	461a      	mov	r2, r3
 800bf74:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 800bf78:	f7fd f8c1 	bl	80090fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf7c:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800bf80:	f103 021c 	add.w	r2, r3, #28
 800bf84:	1d3b      	adds	r3, r7, #4
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	f7fb fdc5 	bl	8007b1e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bf94:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800bf98:	3316      	adds	r3, #22
 800bf9a:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fb fdbd 	bl	8007b1e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfa4:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800bfa8:	3312      	adds	r3, #18
 800bfaa:	2100      	movs	r1, #0
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fb fd9b 	bl	8007ae8 <st_word>
					fs->wflag = 1;
 800bfb2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfba:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fc f8ec 	bl	800819c <sync_fs>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bfca:	1d3b      	adds	r3, r7, #4
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	1d3b      	adds	r3, r7, #4
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bfe0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 800bfe4:	f897 24c7 	ldrb.w	r2, [r7, #1223]	; 0x4c7
 800bfe8:	4611      	mov	r1, r2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fb fedd 	bl	8007daa <unlock_fs>
 800bff0:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	f207 47cc 	addw	r7, r7, #1228	; 0x4cc
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd90      	pop	{r4, r7, pc}

0800bffe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff fe8b 	bl	800bd22 <f_sync>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d11d      	bne.n	800c052 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f107 0208 	add.w	r2, r7, #8
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff f86c 	bl	800b0fc <validate>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d111      	bne.n	800c052 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	4618      	mov	r0, r3
 800c034:	f7fb ffe0 	bl	8007ff8 <dec_lock>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d102      	bne.n	800c048 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	2100      	movs	r1, #0
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fb feac 	bl	8007daa <unlock_fs>
#endif
		}
	}
	return res;
 800c052:	7bfb      	ldrb	r3, [r7, #15]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c05c:	b590      	push	{r4, r7, lr}
 800c05e:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 800c062:	af00      	add	r7, sp, #0
 800c064:	1d3b      	adds	r3, r7, #4
 800c066:	6018      	str	r0, [r3, #0]
 800c068:	463b      	mov	r3, r7
 800c06a:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c06c:	1d3b      	adds	r3, r7, #4
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <f_opendir+0x1c>
 800c074:	2309      	movs	r3, #9
 800c076:	e0db      	b.n	800c230 <f_opendir+0x1d4>

	/* Get logical drive */
	obj = &dp->obj;
 800c078:	1d3b      	adds	r3, r7, #4
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	res = find_volume(&path, &fs, 0);
 800c080:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 800c084:	463b      	mov	r3, r7
 800c086:	2200      	movs	r2, #0
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fce7 	bl	800aa5c <find_volume>
 800c08e:	4603      	mov	r3, r0
 800c090:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	if (res == FR_OK) {
 800c094:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f040 80b7 	bne.w	800c20c <f_opendir+0x1b0>
		obj->fs = fs;
 800c09e:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 800c0a2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c0a6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800c0a8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c0ac:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 800c0b0:	60da      	str	r2, [r3, #12]
 800c0b2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c0b6:	f107 020c 	add.w	r2, r7, #12
 800c0ba:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c0bc:	463b      	mov	r3, r7
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	1d3b      	adds	r3, r7, #4
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	f7fe fb79 	bl	800a7bc <follow_path>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
		if (res == FR_OK) {						/* Follow completed */
 800c0d0:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f040 8092 	bne.w	800c1fe <f_opendir+0x1a2>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c0da:	1d3b      	adds	r3, r7, #4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c0e2:	b25b      	sxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	db59      	blt.n	800c19c <f_opendir+0x140>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c0e8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c0ec:	799b      	ldrb	r3, [r3, #6]
 800c0ee:	f003 0310 	and.w	r3, r3, #16
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d04f      	beq.n	800c196 <f_opendir+0x13a>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800c0f6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d13c      	bne.n	800c17a <f_opendir+0x11e>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800c100:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c104:	689a      	ldr	r2, [r3, #8]
 800c106:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c10a:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c10c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c110:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c114:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c118:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 800c11c:	79d2      	ldrb	r2, [r2, #7]
 800c11e:	431a      	orrs	r2, r3
 800c120:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c124:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800c126:	1d3b      	adds	r3, r7, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c12c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c130:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c132:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	3334      	adds	r3, #52	; 0x34
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fb fbf4 	bl	8007928 <ld_dword>
 800c140:	4602      	mov	r2, r0
 800c142:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c146:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c148:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	3338      	adds	r3, #56	; 0x38
 800c150:	4618      	mov	r0, r3
 800c152:	f7fb fc0c 	bl	800796e <ld_qword>
 800c156:	4603      	mov	r3, r0
 800c158:	460c      	mov	r4, r1
 800c15a:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 800c15e:	e9c2 3404 	strd	r3, r4, [r2, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c162:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	3321      	adds	r3, #33	; 0x21
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	f003 0302 	and.w	r3, r3, #2
 800c170:	b2da      	uxtb	r2, r3
 800c172:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c176:	71da      	strb	r2, [r3, #7]
 800c178:	e010      	b.n	800c19c <f_opendir+0x140>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c17a:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 800c17e:	1d3b      	adds	r3, r7, #4
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c184:	4619      	mov	r1, r3
 800c186:	4610      	mov	r0, r2
 800c188:	f7fc ff9a 	bl	80090c0 <ld_clust>
 800c18c:	4602      	mov	r2, r0
 800c18e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c192:	609a      	str	r2, [r3, #8]
 800c194:	e002      	b.n	800c19c <f_opendir+0x140>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c196:	2305      	movs	r3, #5
 800c198:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
				}
			}
			if (res == FR_OK) {
 800c19c:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d12c      	bne.n	800c1fe <f_opendir+0x1a2>
				obj->id = fs->id;
 800c1a4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c1a8:	88da      	ldrh	r2, [r3, #6]
 800c1aa:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c1ae:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c1b0:	1d3b      	adds	r3, r7, #4
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	6818      	ldr	r0, [r3, #0]
 800c1b6:	f7fc fdcc 	bl	8008d52 <dir_sdi>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c1c0:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d11a      	bne.n	800c1fe <f_opendir+0x1a2>
					if (obj->sclust) {
 800c1c8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d011      	beq.n	800c1f6 <f_opendir+0x19a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c1d2:	1d3b      	adds	r3, r7, #4
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	f7fb fe80 	bl	8007edc <inc_lock>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c1e2:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c1e4:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d107      	bne.n	800c1fe <f_opendir+0x1a2>
 800c1ee:	2312      	movs	r3, #18
 800c1f0:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
 800c1f4:	e003      	b.n	800c1fe <f_opendir+0x1a2>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c1f6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c1fe:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800c202:	2b04      	cmp	r3, #4
 800c204:	d102      	bne.n	800c20c <f_opendir+0x1b0>
 800c206:	2305      	movs	r3, #5
 800c208:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c20c:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <f_opendir+0x1c0>
 800c214:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c21c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 800c220:	f897 2477 	ldrb.w	r2, [r7, #1143]	; 0x477
 800c224:	4611      	mov	r1, r2
 800c226:	4618      	mov	r0, r3
 800c228:	f7fb fdbf 	bl	8007daa <unlock_fs>
 800c22c:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
}
 800c230:	4618      	mov	r0, r3
 800c232:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 800c236:	46bd      	mov	sp, r7
 800c238:	bd90      	pop	{r4, r7, pc}

0800c23a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f107 0208 	add.w	r2, r7, #8
 800c248:	4611      	mov	r1, r2
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7fe ff56 	bl	800b0fc <validate>
 800c250:	4603      	mov	r3, r0
 800c252:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d115      	bne.n	800c286 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d006      	beq.n	800c270 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	4618      	mov	r0, r3
 800c268:	f7fb fec6 	bl	8007ff8 <dec_lock>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d102      	bne.n	800c27c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2100      	movs	r1, #0
 800c280:	4618      	mov	r0, r3
 800c282:	f7fb fd92 	bl	8007daa <unlock_fs>
#endif
	}
	return res;
 800c286:	7bfb      	ldrb	r3, [r7, #15]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800c296:	af00      	add	r7, sp, #0
 800c298:	1d3b      	adds	r3, r7, #4
 800c29a:	6018      	str	r0, [r3, #0]
 800c29c:	463b      	mov	r3, r7
 800c29e:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c2a0:	1d3b      	adds	r3, r7, #4
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe ff26 	bl	800b0fc <validate>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	if (res == FR_OK) {
 800c2b6:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d13e      	bne.n	800c33c <f_readdir+0xac>
		if (!fno) {
 800c2be:	463b      	mov	r3, r7
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d108      	bne.n	800c2d8 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c2c6:	1d3b      	adds	r3, r7, #4
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	f7fc fd41 	bl	8008d52 <dir_sdi>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 800c2d6:	e031      	b.n	800c33c <f_readdir+0xac>
		} else {
			INIT_NAMBUF(fs);
 800c2d8:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800c2dc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c2e0:	60da      	str	r2, [r3, #12]
 800c2e2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800c2e6:	f107 0208 	add.w	r2, r7, #8
 800c2ea:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800c2ec:	1d3b      	adds	r3, r7, #4
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	f7fd fbca 	bl	8009a8a <dir_read>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c2fc:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800c300:	2b04      	cmp	r3, #4
 800c302:	d102      	bne.n	800c30a <f_readdir+0x7a>
 800c304:	2300      	movs	r3, #0
 800c306:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 800c30a:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d114      	bne.n	800c33c <f_readdir+0xac>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c312:	463a      	mov	r2, r7
 800c314:	1d3b      	adds	r3, r7, #4
 800c316:	6811      	ldr	r1, [r2, #0]
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f7fd ffab 	bl	800a274 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c31e:	1d3b      	adds	r3, r7, #4
 800c320:	2100      	movs	r1, #0
 800c322:	6818      	ldr	r0, [r3, #0]
 800c324:	f7fc fd9b 	bl	8008e5e <dir_next>
 800c328:	4603      	mov	r3, r0
 800c32a:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c32e:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800c332:	2b04      	cmp	r3, #4
 800c334:	d102      	bne.n	800c33c <f_readdir+0xac>
 800c336:	2300      	movs	r3, #0
 800c338:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c33c:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800c340:	f897 246f 	ldrb.w	r2, [r7, #1135]	; 0x46f
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7fb fd2f 	bl	8007daa <unlock_fs>
 800c34c:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
}
 800c350:	4618      	mov	r0, r3
 800c352:	f507 678e 	add.w	r7, r7, #1136	; 0x470
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 800c360:	af00      	add	r7, sp, #0
 800c362:	1d3b      	adds	r3, r7, #4
 800c364:	6018      	str	r0, [r3, #0]
 800c366:	463b      	mov	r3, r7
 800c368:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c36a:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 800c36e:	1d3b      	adds	r3, r7, #4
 800c370:	2200      	movs	r2, #0
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fb72 	bl	800aa5c <find_volume>
 800c378:	4603      	mov	r3, r0
 800c37a:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
	if (res == FR_OK) {
 800c37e:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 800c382:	2b00      	cmp	r3, #0
 800c384:	d12c      	bne.n	800c3e0 <f_stat+0x86>
		INIT_NAMBUF(dj.obj.fs);
 800c386:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800c38a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c38e:	60da      	str	r2, [r3, #12]
 800c390:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800c394:	f107 0208 	add.w	r2, r7, #8
 800c398:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c39a:	1d3b      	adds	r3, r7, #4
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fa09 	bl	800a7bc <follow_path>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
		if (res == FR_OK) {				/* Follow completed */
 800c3b0:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d113      	bne.n	800c3e0 <f_stat+0x86>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c3b8:	f897 34b3 	ldrb.w	r3, [r7, #1203]	; 0x4b3
 800c3bc:	b25b      	sxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	da03      	bge.n	800c3ca <f_stat+0x70>
				res = FR_INVALID_NAME;
 800c3c2:	2306      	movs	r3, #6
 800c3c4:	f887 34bf 	strb.w	r3, [r7, #1215]	; 0x4bf
 800c3c8:	e00a      	b.n	800c3e0 <f_stat+0x86>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800c3ca:	463b      	mov	r3, r7
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d006      	beq.n	800c3e0 <f_stat+0x86>
 800c3d2:	463b      	mov	r3, r7
 800c3d4:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800c3d8:	6819      	ldr	r1, [r3, #0]
 800c3da:	4610      	mov	r0, r2
 800c3dc:	f7fd ff4a 	bl	800a274 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800c3e0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 800c3e4:	f897 24bf 	ldrb.w	r2, [r7, #1215]	; 0x4bf
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fb fcdd 	bl	8007daa <unlock_fs>
 800c3f0:	f897 34bf 	ldrb.w	r3, [r7, #1215]	; 0x4bf
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b09a      	sub	sp, #104	; 0x68
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c40a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c40e:	f107 030c 	add.w	r3, r7, #12
 800c412:	2200      	movs	r2, #0
 800c414:	4618      	mov	r0, r3
 800c416:	f7fe fb21 	bl	800aa5c <find_volume>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c420:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c424:	2b00      	cmp	r3, #0
 800c426:	f040 80e6 	bne.w	800c5f6 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c42a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c432:	69da      	ldr	r2, [r3, #28]
 800c434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	3b02      	subs	r3, #2
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d804      	bhi.n	800c448 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c440:	69da      	ldr	r2, [r3, #28]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	601a      	str	r2, [r3, #0]
 800c446:	e0d6      	b.n	800c5f6 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d128      	bne.n	800c4a6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c454:	2302      	movs	r3, #2
 800c456:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c45a:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800c45c:	f107 0310 	add.w	r3, r7, #16
 800c460:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c462:	4618      	mov	r0, r3
 800c464:	f7fb ff28 	bl	80082b8 <get_fat>
 800c468:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c470:	d103      	bne.n	800c47a <f_getfree+0x7c>
 800c472:	2301      	movs	r3, #1
 800c474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c478:	e0b0      	b.n	800c5dc <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d103      	bne.n	800c488 <f_getfree+0x8a>
 800c480:	2302      	movs	r3, #2
 800c482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c486:	e0a9      	b.n	800c5dc <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800c488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <f_getfree+0x96>
 800c48e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c490:	3301      	adds	r3, #1
 800c492:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800c494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c496:	3301      	adds	r3, #1
 800c498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c49a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c49c:	6a1b      	ldr	r3, [r3, #32]
 800c49e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d3db      	bcc.n	800c45c <f_getfree+0x5e>
 800c4a4:	e09a      	b.n	800c5dc <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800c4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	d146      	bne.n	800c53c <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800c4ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	3b02      	subs	r3, #2
 800c4b4:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ba:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800c4c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10d      	bne.n	800c4e2 <f_getfree+0xe4>
 800c4c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c4c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f7fb fe36 	bl	8008140 <move_window>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d179      	bne.n	800c5d6 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800c4e2:	2308      	movs	r3, #8
 800c4e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ea:	4413      	add	r3, r2
 800c4ec:	333c      	adds	r3, #60	; 0x3c
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800c4f4:	e013      	b.n	800c51e <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800c4f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d102      	bne.n	800c508 <f_getfree+0x10a>
 800c502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c504:	3301      	adds	r3, #1
 800c506:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800c508:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c50c:	085b      	lsrs	r3, r3, #1
 800c50e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800c512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c514:	3b01      	subs	r3, #1
 800c516:	64bb      	str	r3, [r7, #72]	; 0x48
 800c518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c51a:	3b01      	subs	r3, #1
 800c51c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <f_getfree+0x12c>
 800c524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1e5      	bne.n	800c4f6 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800c52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c52c:	3301      	adds	r3, #1
 800c52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c532:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800c534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1c2      	bne.n	800c4c0 <f_getfree+0xc2>
 800c53a:	e04f      	b.n	800c5dc <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c53e:	6a1b      	ldr	r3, [r3, #32]
 800c540:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800c548:	2300      	movs	r3, #0
 800c54a:	657b      	str	r3, [r7, #84]	; 0x54
 800c54c:	2300      	movs	r3, #0
 800c54e:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800c550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c552:	2b00      	cmp	r3, #0
 800c554:	d113      	bne.n	800c57e <f_getfree+0x180>
							res = move_window(fs, sect++);
 800c556:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c55e:	4619      	mov	r1, r3
 800c560:	f7fb fdee 	bl	8008140 <move_window>
 800c564:	4603      	mov	r3, r0
 800c566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800c56a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d133      	bne.n	800c5da <f_getfree+0x1dc>
							p = fs->win;
 800c572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c574:	333c      	adds	r3, #60	; 0x3c
 800c576:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800c578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c57c:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800c57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b02      	cmp	r3, #2
 800c584:	d10f      	bne.n	800c5a6 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800c586:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c588:	f7fb f9b6 	bl	80078f8 <ld_word>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d102      	bne.n	800c598 <f_getfree+0x19a>
 800c592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c594:	3301      	adds	r3, #1
 800c596:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800c598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59a:	3302      	adds	r3, #2
 800c59c:	653b      	str	r3, [r7, #80]	; 0x50
 800c59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a0:	3b02      	subs	r3, #2
 800c5a2:	657b      	str	r3, [r7, #84]	; 0x54
 800c5a4:	e010      	b.n	800c5c8 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c5a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c5a8:	f7fb f9be 	bl	8007928 <ld_dword>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <f_getfree+0x1be>
 800c5b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800c5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5be:	3304      	adds	r3, #4
 800c5c0:	653b      	str	r3, [r7, #80]	; 0x50
 800c5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5c4:	3b04      	subs	r3, #4
 800c5c6:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800c5c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1bd      	bne.n	800c550 <f_getfree+0x152>
 800c5d4:	e002      	b.n	800c5dc <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800c5d6:	bf00      	nop
 800c5d8:	e000      	b.n	800c5dc <f_getfree+0x1de>
							if (res != FR_OK) break;
 800c5da:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5e0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5e6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ea:	791a      	ldrb	r2, [r3, #4]
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ee:	f042 0201 	orr.w	r2, r2, #1
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fb fbd3 	bl	8007daa <unlock_fs>
 800c604:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3768      	adds	r7, #104	; 0x68
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c610:	b590      	push	{r4, r7, lr}
 800c612:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 800c616:	af00      	add	r7, sp, #0
 800c618:	1d3b      	adds	r3, r7, #4
 800c61a:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c622:	f207 419c 	addw	r1, r7, #1180	; 0x49c
 800c626:	1d3b      	adds	r3, r7, #4
 800c628:	2202      	movs	r2, #2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fa16 	bl	800aa5c <find_volume>
 800c630:	4603      	mov	r3, r0
 800c632:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
	dj.obj.fs = fs;
 800c636:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c63a:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	if (res == FR_OK) {
 800c63e:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c642:	2b00      	cmp	r3, #0
 800c644:	f040 80e3 	bne.w	800c80e <f_unlink+0x1fe>
		INIT_NAMBUF(fs);
 800c648:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c64c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800c650:	60da      	str	r2, [r3, #12]
 800c652:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c656:	f107 0208 	add.w	r2, r7, #8
 800c65a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 800c65c:	1d3b      	adds	r3, r7, #4
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe f8a8 	bl	800a7bc <follow_path>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c672:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c676:	2b00      	cmp	r3, #0
 800c678:	d108      	bne.n	800c68c <f_unlink+0x7c>
 800c67a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c67e:	2102      	movs	r1, #2
 800c680:	4618      	mov	r0, r3
 800c682:	f7fb fbad 	bl	8007de0 <chk_lock>
 800c686:	4603      	mov	r3, r0
 800c688:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c68c:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c690:	2b00      	cmp	r3, #0
 800c692:	f040 80bc 	bne.w	800c80e <f_unlink+0x1fe>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c696:	f897 353b 	ldrb.w	r3, [r7, #1339]	; 0x53b
 800c69a:	b25b      	sxtb	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da03      	bge.n	800c6a8 <f_unlink+0x98>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c6a0:	2306      	movs	r3, #6
 800c6a2:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
 800c6a6:	e008      	b.n	800c6ba <f_unlink+0xaa>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c6a8:	f897 34f6 	ldrb.w	r3, [r7, #1270]	; 0x4f6
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <f_unlink+0xaa>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c6b4:	2307      	movs	r3, #7
 800c6b6:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
				}
			}
			if (res == FR_OK) {
 800c6ba:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d17a      	bne.n	800c7b8 <f_unlink+0x1a8>
#if _FS_EXFAT
				obj.fs = fs;
 800c6c2:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c6c6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
				if (fs->fs_type == FS_EXFAT) {
 800c6ca:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d124      	bne.n	800c71e <f_unlink+0x10e>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c6d4:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	3334      	adds	r3, #52	; 0x34
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fb f923 	bl	8007928 <ld_dword>
 800c6e2:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
 800c6e6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c6ea:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c6ee:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	3338      	adds	r3, #56	; 0x38
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fb f939 	bl	800796e <ld_qword>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	460c      	mov	r4, r1
 800c700:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 800c704:	e9c2 3400 	strd	r3, r4, [r2]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c708:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	3321      	adds	r3, #33	; 0x21
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	f003 0302 	and.w	r3, r3, #2
 800c716:	b2db      	uxtb	r3, r3
 800c718:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 800c71c:	e009      	b.n	800c732 <f_unlink+0x122>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c71e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c722:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 800c726:	4611      	mov	r1, r2
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fc fcc9 	bl	80090c0 <ld_clust>
 800c72e:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c732:	f897 34f6 	ldrb.w	r3, [r7, #1270]	; 0x4f6
 800c736:	f003 0310 	and.w	r3, r3, #16
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d03c      	beq.n	800c7b8 <f_unlink+0x1a8>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c73e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c742:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
						sdj.obj.sclust = dclst;
 800c746:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c74a:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800c74e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b04      	cmp	r3, #4
 800c756:	d10b      	bne.n	800c770 <f_unlink+0x160>
							sdj.obj.objsize = obj.objsize;
 800c758:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800c75c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c760:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 800c764:	e9c2 3400 	strd	r3, r4, [r2]
							sdj.obj.stat = obj.stat;
 800c768:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 800c76c:	f887 34a7 	strb.w	r3, [r7, #1191]	; 0x4a7
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c770:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c774:	2100      	movs	r1, #0
 800c776:	4618      	mov	r0, r3
 800c778:	f7fc faeb 	bl	8008d52 <dir_sdi>
 800c77c:	4603      	mov	r3, r0
 800c77e:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
						if (res == FR_OK) {
 800c782:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c786:	2b00      	cmp	r3, #0
 800c788:	d116      	bne.n	800c7b8 <f_unlink+0x1a8>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c78a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f7fd f97a 	bl	8009a8a <dir_read>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c79c:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d102      	bne.n	800c7aa <f_unlink+0x19a>
 800c7a4:	2307      	movs	r3, #7
 800c7a6:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c7aa:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d102      	bne.n	800c7b8 <f_unlink+0x1a8>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
						}
					}
				}
			}
			if (res == FR_OK) {
 800c7b8:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d126      	bne.n	800c80e <f_unlink+0x1fe>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c7c0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fd fcfd 	bl	800a1c4 <dir_remove>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c7d0:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10e      	bne.n	800c7f6 <f_unlink+0x1e6>
 800c7d8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00a      	beq.n	800c7f6 <f_unlink+0x1e6>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800c7e0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f8d7 1540 	ldr.w	r1, [r7, #1344]	; 0x540
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fc f8ba 	bl	8008964 <remove_chain>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c7f6:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d107      	bne.n	800c80e <f_unlink+0x1fe>
 800c7fe:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c802:	4618      	mov	r0, r3
 800c804:	f7fb fcca 	bl	800819c <sync_fs>
 800c808:	4603      	mov	r3, r0
 800c80a:	f887 3547 	strb.w	r3, [r7, #1351]	; 0x547
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c80e:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800c812:	f897 2547 	ldrb.w	r2, [r7, #1351]	; 0x547
 800c816:	4611      	mov	r1, r2
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fb fac6 	bl	8007daa <unlock_fs>
 800c81e:	f897 3547 	ldrb.w	r3, [r7, #1351]	; 0x547
}
 800c822:	4618      	mov	r0, r3
 800c824:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd90      	pop	{r4, r7, pc}

0800c82c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800c82c:	b590      	push	{r4, r7, lr}
 800c82e:	b0a9      	sub	sp, #164	; 0xa4
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	607a      	str	r2, [r7, #4]
 800c836:	603b      	str	r3, [r7, #0]
 800c838:	460b      	mov	r3, r1
 800c83a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800c83c:	2301      	movs	r3, #1
 800c83e:	657b      	str	r3, [r7, #84]	; 0x54
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800c840:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c844:	653b      	str	r3, [r7, #80]	; 0x50
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800c846:	f107 030c 	add.w	r3, r7, #12
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fe f85e 	bl	800a90c <get_ldnumber>
 800c850:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c854:	2b00      	cmp	r3, #0
 800c856:	da02      	bge.n	800c85e <f_mkfs+0x32>
 800c858:	230b      	movs	r3, #11
 800c85a:	f001 b8c4 	b.w	800d9e6 <f_mkfs+0x11ba>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800c85e:	4abf      	ldr	r2, [pc, #764]	; (800cb5c <f_mkfs+0x330>)
 800c860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <f_mkfs+0x4a>
 800c86a:	4abc      	ldr	r2, [pc, #752]	; (800cb5c <f_mkfs+0x330>)
 800c86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c872:	2200      	movs	r2, #0
 800c874:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800c876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c878:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800c87c:	2300      	movs	r3, #0
 800c87e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800c882:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800c886:	4618      	mov	r0, r3
 800c888:	f7fa ffb2 	bl	80077f0 <disk_initialize>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800c892:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d002      	beq.n	800c8a4 <f_mkfs+0x78>
 800c89e:	2303      	movs	r3, #3
 800c8a0:	f001 b8a1 	b.w	800d9e6 <f_mkfs+0x11ba>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800c8a4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <f_mkfs+0x8a>
 800c8b0:	230a      	movs	r3, #10
 800c8b2:	f001 b898 	b.w	800d9e6 <f_mkfs+0x11ba>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800c8b6:	f107 0220 	add.w	r2, r7, #32
 800c8ba:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800c8be:	2103      	movs	r1, #3
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fa fffb 	bl	80078bc <disk_ioctl>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10c      	bne.n	800c8e6 <f_mkfs+0xba>
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d009      	beq.n	800c8e6 <f_mkfs+0xba>
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8d8:	d805      	bhi.n	800c8e6 <f_mkfs+0xba>
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	1e5a      	subs	r2, r3, #1
 800c8de:	6a3b      	ldr	r3, [r7, #32]
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <f_mkfs+0xbe>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	623b      	str	r3, [r7, #32]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800c8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <f_mkfs+0xd6>
 800c8f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d309      	bcc.n	800c916 <f_mkfs+0xea>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c908:	d805      	bhi.n	800c916 <f_mkfs+0xea>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	1e5a      	subs	r2, r3, #1
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4013      	ands	r3, r2
 800c912:	2b00      	cmp	r3, #0
 800c914:	d002      	beq.n	800c91c <f_mkfs+0xf0>
 800c916:	2313      	movs	r3, #19
 800c918:	f001 b865 	b.w	800d9e6 <f_mkfs+0x11ba>
	au /= ss;	/* Cluster size in unit of sector */
 800c91c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	fbb2 f3f3 	udiv	r3, r2, r3
 800c926:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	643b      	str	r3, [r7, #64]	; 0x40
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800c92c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c930:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c934:	fbb2 f3f3 	udiv	r3, r2, r3
 800c938:	63fb      	str	r3, [r7, #60]	; 0x3c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800c93a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c940:	fb02 f303 	mul.w	r3, r2, r3
 800c944:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!szb_buf) return FR_MKFS_ABORTED;
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d102      	bne.n	800c952 <f_mkfs+0x126>
 800c94c:	230e      	movs	r3, #14
 800c94e:	f001 b84a 	b.w	800d9e6 <f_mkfs+0x11ba>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800c952:	f107 021c 	add.w	r2, r7, #28
 800c956:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800c95a:	2101      	movs	r1, #1
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fa ffad 	bl	80078bc <disk_ioctl>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <f_mkfs+0x142>
 800c968:	2301      	movs	r3, #1
 800c96a:	f001 b83c 	b.w	800d9e6 <f_mkfs+0x11ba>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800c96e:	7afb      	ldrb	r3, [r7, #11]
 800c970:	f003 0308 	and.w	r3, r3, #8
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <f_mkfs+0x150>
 800c978:	2300      	movs	r3, #0
 800c97a:	e000      	b.n	800c97e <f_mkfs+0x152>
 800c97c:	233f      	movs	r3, #63	; 0x3f
 800c97e:	637b      	str	r3, [r7, #52]	; 0x34
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c984:	429a      	cmp	r2, r3
 800c986:	d902      	bls.n	800c98e <f_mkfs+0x162>
 800c988:	230e      	movs	r3, #14
 800c98a:	f001 b82c 	b.w	800d9e6 <f_mkfs+0x11ba>
		sz_vol -= b_vol;						/* Volume size */
 800c98e:	69fa      	ldr	r2, [r7, #28]
 800c990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	61fb      	str	r3, [r7, #28]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	2b7f      	cmp	r3, #127	; 0x7f
 800c99a:	d802      	bhi.n	800c9a2 <f_mkfs+0x176>
 800c99c:	230e      	movs	r3, #14
 800c99e:	f001 b822 	b.w	800d9e6 <f_mkfs+0x11ba>

	/* Pre-determine the FAT type */
	do {
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
 800c9a2:	7afb      	ldrb	r3, [r7, #11]
 800c9a4:	f003 0304 	and.w	r3, r3, #4
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00f      	beq.n	800c9cc <f_mkfs+0x1a0>
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
 800c9ac:	7afb      	ldrb	r3, [r7, #11]
 800c9ae:	f003 0307 	and.w	r3, r3, #7
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d006      	beq.n	800c9c4 <f_mkfs+0x198>
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9bc:	d202      	bcs.n	800c9c4 <f_mkfs+0x198>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b80      	cmp	r3, #128	; 0x80
 800c9c2:	d903      	bls.n	800c9cc <f_mkfs+0x1a0>
				fmt = FS_EXFAT; break;
 800c9c4:	2304      	movs	r3, #4
 800c9c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800c9ca:	e023      	b.n	800ca14 <f_mkfs+0x1e8>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b80      	cmp	r3, #128	; 0x80
 800c9d0:	d902      	bls.n	800c9d8 <f_mkfs+0x1ac>
 800c9d2:	2313      	movs	r3, #19
 800c9d4:	f001 b807 	b.w	800d9e6 <f_mkfs+0x11ba>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00d      	beq.n	800c9fe <f_mkfs+0x1d2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800c9e2:	7afb      	ldrb	r3, [r7, #11]
 800c9e4:	f003 0307 	and.w	r3, r3, #7
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d004      	beq.n	800c9f6 <f_mkfs+0x1ca>
 800c9ec:	7afb      	ldrb	r3, [r7, #11]
 800c9ee:	f003 0301 	and.w	r3, r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d103      	bne.n	800c9fe <f_mkfs+0x1d2>
				fmt = FS_FAT32; break;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800c9fc:	e00a      	b.n	800ca14 <f_mkfs+0x1e8>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800c9fe:	7afb      	ldrb	r3, [r7, #11]
 800ca00:	f003 0301 	and.w	r3, r3, #1
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <f_mkfs+0x1e2>
 800ca08:	2313      	movs	r3, #19
 800ca0a:	f000 bfec 	b.w	800d9e6 <f_mkfs+0x11ba>
		fmt = FS_FAT16;
 800ca0e:	2302      	movs	r3, #2
 800ca10:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	} while (0);

#if _FS_EXFAT
	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
 800ca14:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ca18:	2b04      	cmp	r3, #4
 800ca1a:	f040 842c 	bne.w	800d276 <f_mkfs+0xa4a>
		DWORD szb_bit, szb_case, sum, nb, cl;
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca24:	d202      	bcs.n	800ca2c <f_mkfs+0x200>
 800ca26:	230e      	movs	r3, #14
 800ca28:	f000 bfdd 	b.w	800d9e6 <f_mkfs+0x11ba>
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (!au) {	/* au auto-selection */
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10e      	bne.n	800ca50 <f_mkfs+0x224>
			au = 8;
 800ca32:	2308      	movs	r3, #8
 800ca34:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ca3c:	d301      	bcc.n	800ca42 <f_mkfs+0x216>
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	607b      	str	r3, [r7, #4]
			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca48:	d302      	bcc.n	800ca50 <f_mkfs+0x224>
 800ca4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca4e:	607b      	str	r3, [r7, #4]
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
 800ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca52:	3320      	adds	r3, #32
 800ca54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca60:	3302      	adds	r3, #2
 800ca62:	009a      	lsls	r2, r3, #2
 800ca64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca68:	4413      	add	r3, r2
 800ca6a:	1e5a      	subs	r2, r3, #1
 800ca6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca70:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block boundary */
 800ca78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ca80:	441a      	add	r2, r3
 800ca82:	6a3b      	ldr	r3, [r7, #32]
 800ca84:	4413      	add	r3, r2
 800ca86:	1e5a      	subs	r2, r3, #1
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	425b      	negs	r3, r3
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	085b      	lsrs	r3, r3, #1
 800ca94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d302      	bcc.n	800caa0 <f_mkfs+0x274>
 800ca9a:	230e      	movs	r3, #14
 800ca9c:	f000 bfa3 	b.w	800d9e6 <f_mkfs+0x11ba>
		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
 800caa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	1ad2      	subs	r2, r2, r3
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	441a      	add	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab0:	633b      	str	r3, [r7, #48]	; 0x30
		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	2b0f      	cmp	r3, #15
 800cab6:	d802      	bhi.n	800cabe <f_mkfs+0x292>
 800cab8:	230e      	movs	r3, #14
 800caba:	f000 bf94 	b.w	800d9e6 <f_mkfs+0x11ba>
		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
 800cabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac0:	4a27      	ldr	r2, [pc, #156]	; (800cb60 <f_mkfs+0x334>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d902      	bls.n	800cacc <f_mkfs+0x2a0>
 800cac6:	230e      	movs	r3, #14
 800cac8:	f000 bf8d 	b.w	800d9e6 <f_mkfs+0x11ba>

		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
 800cacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cace:	3307      	adds	r3, #7
 800cad0:	08db      	lsrs	r3, r3, #3
 800cad2:	62bb      	str	r3, [r7, #40]	; 0x28
		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
 800cad4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	fb02 f203 	mul.w	r2, r2, r3
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	4413      	add	r3, r2
 800cae2:	1e5a      	subs	r2, r3, #1
 800cae4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	fb01 f303 	mul.w	r3, r1, r3
 800caee:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf2:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + au * tbl[0];	/* Table start sector */
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cafe:	4413      	add	r3, r2
 800cb00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		sum = 0;						/* Table checksum to be stored in the 82 entry */
 800cb04:	2300      	movs	r3, #0
 800cb06:	673b      	str	r3, [r7, #112]	; 0x70
		st = si = i = j = szb_case = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	677b      	str	r3, [r7, #116]	; 0x74
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	663b      	str	r3, [r7, #96]	; 0x60
 800cb10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb12:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800cb1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb1e:	65fb      	str	r3, [r7, #92]	; 0x5c
		do {
			switch (st) {
 800cb20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <f_mkfs+0x300>
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d045      	beq.n	800cbb6 <f_mkfs+0x38a>
 800cb2a:	e054      	b.n	800cbd6 <f_mkfs+0x3aa>
			case 0:
				ch = ff_wtoupper(si);	/* Get an up-case char */
 800cb2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 fa8f 	bl	800e054 <ff_wtoupper>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				if (ch != si) {
 800cb3c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800cb40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d005      	beq.n	800cb54 <f_mkfs+0x328>
					si++; break;		/* Store the up-case char if exist */
 800cb48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800cb52:	e04e      	b.n	800cbf2 <f_mkfs+0x3c6>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
 800cb54:	2301      	movs	r3, #1
 800cb56:	663b      	str	r3, [r7, #96]	; 0x60
 800cb58:	e007      	b.n	800cb6a <f_mkfs+0x33e>
 800cb5a:	bf00      	nop
 800cb5c:	2000045c 	.word	0x2000045c
 800cb60:	7ffffffd 	.word	0x7ffffffd
 800cb64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb66:	3301      	adds	r3, #1
 800cb68:	663b      	str	r3, [r7, #96]	; 0x60
 800cb6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb72:	4413      	add	r3, r2
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d011      	beq.n	800cb9e <f_mkfs+0x372>
 800cb7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb82:	4413      	add	r3, r2
 800cb84:	b29c      	uxth	r4, r3
 800cb86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cb8e:	4413      	add	r3, r2
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	4618      	mov	r0, r3
 800cb94:	f001 fa5e 	bl	800e054 <ff_wtoupper>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	429c      	cmp	r4, r3
 800cb9c:	d0e2      	beq.n	800cb64 <f_mkfs+0x338>
				if (j >= 128) {
 800cb9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cba0:	2b7f      	cmp	r3, #127	; 0x7f
 800cba2:	d906      	bls.n	800cbb2 <f_mkfs+0x386>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
 800cba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cba8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800cbac:	2302      	movs	r3, #2
 800cbae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbb0:	e01f      	b.n	800cbf2 <f_mkfs+0x3c6>
				}
				st = 1;			/* Do not compress short run */
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	65fb      	str	r3, [r7, #92]	; 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
 800cbb6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cbba:	1c5a      	adds	r2, r3, #1
 800cbbc:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
 800cbc0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				if (--j == 0) st = 0;
 800cbc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	663b      	str	r3, [r7, #96]	; 0x60
 800cbca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10f      	bne.n	800cbf0 <f_mkfs+0x3c4>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	65fb      	str	r3, [r7, #92]	; 0x5c
				break;
 800cbd4:	e00c      	b.n	800cbf0 <f_mkfs+0x3c4>

			default:
				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
 800cbd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbd8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800cbdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				st = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbee:	e000      	b.n	800cbf2 <f_mkfs+0x3c6>
				break;
 800cbf0:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
 800cbf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800cbfc:	b2d2      	uxtb	r2, r2
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fc fcee 	bl	80095e6 <xsum32>
 800cc0a:	6738      	str	r0, [r7, #112]	; 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
 800cc0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800cc10:	0a1b      	lsrs	r3, r3, #8
 800cc12:	b299      	uxth	r1, r3
 800cc14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc16:	3301      	adds	r3, #1
 800cc18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc1a:	4413      	add	r3, r2
 800cc1c:	b2ca      	uxtb	r2, r1
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fc fcde 	bl	80095e6 <xsum32>
 800cc2a:	6738      	str	r0, [r7, #112]	; 0x70
			i += 2; szb_case += 2;
 800cc2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc2e:	3302      	adds	r3, #2
 800cc30:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc34:	3302      	adds	r3, #2
 800cc36:	677b      	str	r3, [r7, #116]	; 0x74
			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
 800cc38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d003      	beq.n	800cc48 <f_mkfs+0x41c>
 800cc40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d122      	bne.n	800cc8e <f_mkfs+0x462>
				n = (i + ss - 1) / ss;
 800cc48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cc4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc4e:	4413      	add	r3, r2
 800cc50:	1e5a      	subs	r2, r3, #1
 800cc52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cc56:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800cc5e:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800cc62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc6c:	f7fa fe06 	bl	800787c <disk_write>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <f_mkfs+0x450>
 800cc76:	2301      	movs	r3, #1
 800cc78:	f000 beb5 	b.w	800d9e6 <f_mkfs+0x11ba>
				sect += n; i = 0;
 800cc7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc84:	4413      	add	r3, r2
 800cc86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	67bb      	str	r3, [r7, #120]	; 0x78
			}
		} while (si);
 800cc8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f47f af44 	bne.w	800cb20 <f_mkfs+0x2f4>
		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
 800cc98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	fb02 f203 	mul.w	r2, r2, r3
 800cca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cca4:	4413      	add	r3, r2
 800cca6:	1e5a      	subs	r2, r3, #1
 800cca8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	fb01 f303 	mul.w	r3, r1, r3
 800ccb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb6:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
 800ccb8:	2301      	movs	r3, #1
 800ccba:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ccc2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	4413      	add	r3, r2
 800ccca:	1e5a      	subs	r2, r3, #1
 800cccc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	441a      	add	r2, r3
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	4413      	add	r3, r2
 800cce2:	66fb      	str	r3, [r7, #108]	; 0x6c
		do {
			mem_set(buf, 0, szb_buf);
 800cce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cce6:	2100      	movs	r1, #0
 800cce8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ccea:	f7fa ffec 	bl	8007cc6 <mem_set>
			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	67bb      	str	r3, [r7, #120]	; 0x78
 800ccf2:	e009      	b.n	800cd08 <f_mkfs+0x4dc>
 800ccf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	67ba      	str	r2, [r7, #120]	; 0x78
 800ccfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccfc:	4413      	add	r3, r2
 800ccfe:	22ff      	movs	r2, #255	; 0xff
 800cd00:	701a      	strb	r2, [r3, #0]
 800cd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd04:	3b08      	subs	r3, #8
 800cd06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd0a:	2b07      	cmp	r3, #7
 800cd0c:	d903      	bls.n	800cd16 <f_mkfs+0x4ea>
 800cd0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d3ee      	bcc.n	800ccf4 <f_mkfs+0x4c8>
			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
 800cd16:	2301      	movs	r3, #1
 800cd18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800cd1c:	e013      	b.n	800cd46 <f_mkfs+0x51a>
 800cd1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd22:	4413      	add	r3, r2
 800cd24:	7819      	ldrb	r1, [r3, #0]
 800cd26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800cd30:	430a      	orrs	r2, r1
 800cd32:	b2d2      	uxtb	r2, r2
 800cd34:	701a      	strb	r2, [r3, #0]
 800cd36:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cd3a:	005b      	lsls	r3, r3, #1
 800cd3c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800cd40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd42:	3b01      	subs	r3, #1
 800cd44:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d003      	beq.n	800cd54 <f_mkfs+0x528>
 800cd4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d3e4      	bcc.n	800cd1e <f_mkfs+0x4f2>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
 800cd54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	bf28      	it	cs
 800cd5e:	4613      	movcs	r3, r2
 800cd60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800cd64:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800cd68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd72:	f7fa fd83 	bl	800787c <disk_write>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <f_mkfs+0x556>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	f000 be32 	b.w	800d9e6 <f_mkfs+0x11ba>
			sect += n; nsect -= n;
 800cd82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd90:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cd94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		} while (nsect);
 800cd9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d19e      	bne.n	800cce4 <f_mkfs+0x4b8>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
 800cda6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cdaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cdae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		j = nb = cl = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800cdba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdc0:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
 800cdc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cdc8:	f7fa ff7d 	bl	8007cc6 <mem_set>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	67bb      	str	r3, [r7, #120]	; 0x78
			if (cl == 0) {	/* Set entry 0 and 1 */
 800cdd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d134      	bne.n	800ce40 <f_mkfs+0x614>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
 800cdd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdda:	4413      	add	r3, r2
 800cddc:	f06f 0107 	mvn.w	r1, #7
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fa fe9c 	bl	8007b1e <st_dword>
 800cde6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cde8:	3304      	adds	r3, #4
 800cdea:	67bb      	str	r3, [r7, #120]	; 0x78
 800cdec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdee:	3301      	adds	r3, #1
 800cdf0:	66bb      	str	r3, [r7, #104]	; 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
 800cdf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdf6:	4413      	add	r3, r2
 800cdf8:	f04f 31ff 	mov.w	r1, #4294967295
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fa fe8e 	bl	8007b1e <st_dword>
 800ce02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce04:	3304      	adds	r3, #4
 800ce06:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb && i < szb_buf) {			/* Create a chain */
 800ce0e:	e017      	b.n	800ce40 <f_mkfs+0x614>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
 800ce10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce14:	441a      	add	r2, r3
 800ce16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d902      	bls.n	800ce22 <f_mkfs+0x5f6>
 800ce1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce1e:	3301      	adds	r3, #1
 800ce20:	e001      	b.n	800ce26 <f_mkfs+0x5fa>
 800ce22:	f04f 33ff 	mov.w	r3, #4294967295
 800ce26:	4619      	mov	r1, r3
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f7fa fe78 	bl	8007b1e <st_dword>
					i += 4; cl++; nb--;
 800ce2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce30:	3304      	adds	r3, #4
 800ce32:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce36:	3301      	adds	r3, #1
 800ce38:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	66fb      	str	r3, [r7, #108]	; 0x6c
				while (nb && i < szb_buf) {			/* Create a chain */
 800ce40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <f_mkfs+0x622>
 800ce46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d3e0      	bcc.n	800ce10 <f_mkfs+0x5e4>
				}
				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
 800ce4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10c      	bne.n	800ce6e <f_mkfs+0x642>
 800ce54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d809      	bhi.n	800ce6e <f_mkfs+0x642>
 800ce5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	663a      	str	r2, [r7, #96]	; 0x60
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800ce66:	4413      	add	r3, r2
 800ce68:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800ce6c:	66fb      	str	r3, [r7, #108]	; 0x6c
			} while (nb && i < szb_buf);
 800ce6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d003      	beq.n	800ce7c <f_mkfs+0x650>
 800ce74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3e1      	bcc.n	800ce40 <f_mkfs+0x614>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
 800ce7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ce80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce82:	4293      	cmp	r3, r2
 800ce84:	bf28      	it	cs
 800ce86:	4613      	movcs	r3, r2
 800ce88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800ce8c:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ce90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ce98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce9a:	f7fa fcef 	bl	800787c <disk_write>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <f_mkfs+0x67e>
 800cea4:	2301      	movs	r3, #1
 800cea6:	f000 bd9e 	b.w	800d9e6 <f_mkfs+0x11ba>
			sect += n; nsect -= n;
 800ceaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ceae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ceb2:	4413      	add	r3, r2
 800ceb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ceb8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		} while (nsect);
 800cec6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f47f af79 	bne.w	800cdc2 <f_mkfs+0x596>

		/* Initialize the root directory */
		mem_set(buf, 0, szb_buf);
 800ced0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ced2:	2100      	movs	r1, #0
 800ced4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ced6:	f7fa fef6 	bl	8007cc6 <mem_set>
		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
 800ceda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cedc:	2283      	movs	r2, #131	; 0x83
 800cede:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
 800cee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee2:	3320      	adds	r3, #32
 800cee4:	2281      	movs	r2, #129	; 0x81
 800cee6:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);
 800cee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceea:	3334      	adds	r3, #52	; 0x34
 800ceec:	2102      	movs	r1, #2
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fa fe15 	bl	8007b1e <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
 800cef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cef6:	3338      	adds	r3, #56	; 0x38
 800cef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fa fe0f 	bl	8007b1e <st_dword>
		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
 800cf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf02:	3340      	adds	r3, #64	; 0x40
 800cf04:	2282      	movs	r2, #130	; 0x82
 800cf06:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);
 800cf08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0a:	3344      	adds	r3, #68	; 0x44
 800cf0c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fa fe05 	bl	8007b1e <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
 800cf14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf16:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3302      	adds	r3, #2
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f7fa fdfc 	bl	8007b1e <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);
 800cf26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf28:	3358      	adds	r3, #88	; 0x58
 800cf2a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fa fdf6 	bl	8007b1e <st_dword>
		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of sectors */
 800cf32:	693a      	ldr	r2, [r7, #16]
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	4413      	add	r3, r2
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	fb02 f303 	mul.w	r3, r2, r3
 800cf3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf40:	4413      	add	r3, r2
 800cf42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800cf4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf52:	4293      	cmp	r3, r2
 800cf54:	bf28      	it	cs
 800cf56:	4613      	movcs	r3, r2
 800cf58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
 800cf5c:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800cf60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf6a:	f7fa fc87 	bl	800787c <disk_write>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <f_mkfs+0x74e>
 800cf74:	2301      	movs	r3, #1
 800cf76:	f000 bd36 	b.w	800d9e6 <f_mkfs+0x11ba>
			mem_set(buf, 0, ss);
 800cf7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf7e:	461a      	mov	r2, r3
 800cf80:	2100      	movs	r1, #0
 800cf82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cf84:	f7fa fe9f 	bl	8007cc6 <mem_set>
			sect += n; nsect -= n;
 800cf88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf90:	4413      	add	r3, r2
 800cf92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf96:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf9e:	1ad3      	subs	r3, r2, r3
 800cfa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		} while (nsect);
 800cfa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1cf      	bne.n	800cf4c <f_mkfs+0x720>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
 800cfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		for (n = 0; n < 2; n++) {
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cfb8:	e157      	b.n	800d26a <f_mkfs+0xa3e>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
 800cfba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cfc4:	f7fa fe7f 	bl	8007cc6 <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
 800cfc8:	220b      	movs	r2, #11
 800cfca:	49b5      	ldr	r1, [pc, #724]	; (800d2a0 <f_mkfs+0xa74>)
 800cfcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cfce:	f7fa fe59 	bl	8007c84 <mem_cpy>
			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd4:	3340      	adds	r3, #64	; 0x40
 800cfd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fa fda0 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
 800cfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe0:	3348      	adds	r3, #72	; 0x48
 800cfe2:	69fa      	ldr	r2, [r7, #28]
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fa fd99 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
 800cfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfee:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800cff2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	4619      	mov	r1, r3
 800cffc:	f7fa fd8f 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
 800d000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d002:	3354      	adds	r3, #84	; 0x54
 800d004:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fa fd88 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
 800d00e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d010:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	4619      	mov	r1, r3
 800d01c:	f7fa fd7f 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
 800d020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d022:	335c      	adds	r3, #92	; 0x5c
 800d024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d026:	4618      	mov	r0, r3
 800d028:	f7fa fd79 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
 800d02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d032:	693a      	ldr	r2, [r7, #16]
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	4413      	add	r3, r2
 800d038:	3302      	adds	r3, #2
 800d03a:	4619      	mov	r1, r3
 800d03c:	f7fa fd6f 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
 800d040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d042:	f103 0464 	add.w	r4, r3, #100	; 0x64
 800d046:	f7fa f965 	bl	8007314 <get_fattime>
 800d04a:	4603      	mov	r3, r0
 800d04c:	4619      	mov	r1, r3
 800d04e:	4620      	mov	r0, r4
 800d050:	f7fa fd65 	bl	8007b1e <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
 800d054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d056:	3368      	adds	r3, #104	; 0x68
 800d058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fa fd43 	bl	8007ae8 <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
 800d062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d064:	336c      	adds	r3, #108	; 0x6c
 800d066:	2200      	movs	r2, #0
 800d068:	701a      	strb	r2, [r3, #0]
 800d06a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d06e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d070:	e005      	b.n	800d07e <f_mkfs+0x852>
 800d072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d074:	336c      	adds	r3, #108	; 0x6c
 800d076:	781a      	ldrb	r2, [r3, #0]
 800d078:	3201      	adds	r2, #1
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	701a      	strb	r2, [r3, #0]
 800d07e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d080:	085b      	lsrs	r3, r3, #1
 800d082:	67bb      	str	r3, [r7, #120]	; 0x78
 800d084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1f3      	bne.n	800d072 <f_mkfs+0x846>
			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
 800d08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08c:	336d      	adds	r3, #109	; 0x6d
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	67bb      	str	r3, [r7, #120]	; 0x78
 800d096:	e005      	b.n	800d0a4 <f_mkfs+0x878>
 800d098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09a:	336d      	adds	r3, #109	; 0x6d
 800d09c:	781a      	ldrb	r2, [r3, #0]
 800d09e:	3201      	adds	r2, #1
 800d0a0:	b2d2      	uxtb	r2, r2
 800d0a2:	701a      	strb	r2, [r3, #0]
 800d0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d1f3      	bne.n	800d098 <f_mkfs+0x86c>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
 800d0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b2:	336e      	adds	r3, #110	; 0x6e
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
 800d0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ba:	336f      	adds	r3, #111	; 0x6f
 800d0bc:	2280      	movs	r2, #128	; 0x80
 800d0be:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
 800d0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c2:	3378      	adds	r3, #120	; 0x78
 800d0c4:	f64f 61eb 	movw	r1, #65259	; 0xfeeb
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fa fd0d 	bl	8007ae8 <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
 800d0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fa fd05 	bl	8007ae8 <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800d0de:	2300      	movs	r3, #0
 800d0e0:	673b      	str	r3, [r7, #112]	; 0x70
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0e6:	e014      	b.n	800d112 <f_mkfs+0x8e6>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
 800d0e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0ea:	2b6a      	cmp	r3, #106	; 0x6a
 800d0ec:	d00e      	beq.n	800d10c <f_mkfs+0x8e0>
 800d0ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0f0:	2b6b      	cmp	r3, #107	; 0x6b
 800d0f2:	d00b      	beq.n	800d10c <f_mkfs+0x8e0>
 800d0f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0f6:	2b70      	cmp	r3, #112	; 0x70
 800d0f8:	d008      	beq.n	800d10c <f_mkfs+0x8e0>
 800d0fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0fe:	4413      	add	r3, r2
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d104:	4618      	mov	r0, r3
 800d106:	f7fc fa6e 	bl	80095e6 <xsum32>
 800d10a:	6738      	str	r0, [r7, #112]	; 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
 800d10c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d10e:	3301      	adds	r3, #1
 800d110:	67bb      	str	r3, [r7, #120]	; 0x78
 800d112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d116:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d118:	429a      	cmp	r2, r3
 800d11a:	d3e5      	bcc.n	800d0e8 <f_mkfs+0x8bc>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800d11c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d120:	1c53      	adds	r3, r2, #1
 800d122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d126:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d12a:	2301      	movs	r3, #1
 800d12c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d12e:	f7fa fba5 	bl	800787c <disk_write>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <f_mkfs+0x912>
 800d138:	2301      	movs	r3, #1
 800d13a:	f000 bc54 	b.w	800d9e6 <f_mkfs+0x11ba>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
 800d13e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d142:	461a      	mov	r2, r3
 800d144:	2100      	movs	r1, #0
 800d146:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d148:	f7fa fdbd 	bl	8007cc6 <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
 800d14c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d150:	3b02      	subs	r3, #2
 800d152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d154:	4413      	add	r3, r2
 800d156:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fa fcc4 	bl	8007ae8 <st_word>
			for (j = 1; j < 9; j++) {
 800d160:	2301      	movs	r3, #1
 800d162:	663b      	str	r3, [r7, #96]	; 0x60
 800d164:	e026      	b.n	800d1b4 <f_mkfs+0x988>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800d166:	2300      	movs	r3, #0
 800d168:	67bb      	str	r3, [r7, #120]	; 0x78
 800d16a:	e00a      	b.n	800d182 <f_mkfs+0x956>
 800d16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	67ba      	str	r2, [r7, #120]	; 0x78
 800d172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d174:	4413      	add	r3, r2
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fc fa33 	bl	80095e6 <xsum32>
 800d180:	6738      	str	r0, [r7, #112]	; 0x70
 800d182:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d186:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d188:	429a      	cmp	r2, r3
 800d18a:	d3ef      	bcc.n	800d16c <f_mkfs+0x940>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800d18c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d190:	1c53      	adds	r3, r2, #1
 800d192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d196:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d19a:	2301      	movs	r3, #1
 800d19c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d19e:	f7fa fb6d 	bl	800787c <disk_write>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <f_mkfs+0x982>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	f000 bc1c 	b.w	800d9e6 <f_mkfs+0x11ba>
			for (j = 1; j < 9; j++) {
 800d1ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	663b      	str	r3, [r7, #96]	; 0x60
 800d1b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1b6:	2b08      	cmp	r3, #8
 800d1b8:	d9d5      	bls.n	800d166 <f_mkfs+0x93a>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
 800d1ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d1be:	461a      	mov	r2, r3
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d1c4:	f7fa fd7f 	bl	8007cc6 <mem_set>
			for ( ; j < 11; j++) {
 800d1c8:	e025      	b.n	800d216 <f_mkfs+0x9ea>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800d1ce:	e00a      	b.n	800d1e6 <f_mkfs+0x9ba>
 800d1d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d2:	1c5a      	adds	r2, r3, #1
 800d1d4:	67ba      	str	r2, [r7, #120]	; 0x78
 800d1d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1d8:	4413      	add	r3, r2
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fc fa01 	bl	80095e6 <xsum32>
 800d1e4:	6738      	str	r0, [r7, #112]	; 0x70
 800d1e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d1ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d3ef      	bcc.n	800d1d0 <f_mkfs+0x9a4>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800d1f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1f4:	1c53      	adds	r3, r2, #1
 800d1f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1fa:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d1fe:	2301      	movs	r3, #1
 800d200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d202:	f7fa fb3b 	bl	800787c <disk_write>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <f_mkfs+0x9e4>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e3ea      	b.n	800d9e6 <f_mkfs+0x11ba>
			for ( ; j < 11; j++) {
 800d210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d212:	3301      	adds	r3, #1
 800d214:	663b      	str	r3, [r7, #96]	; 0x60
 800d216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d218:	2b0a      	cmp	r3, #10
 800d21a:	d9d6      	bls.n	800d1ca <f_mkfs+0x99e>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
 800d21c:	2300      	movs	r3, #0
 800d21e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d220:	e009      	b.n	800d236 <f_mkfs+0xa0a>
 800d222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d226:	4413      	add	r3, r2
 800d228:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fa fc77 	bl	8007b1e <st_dword>
 800d230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d232:	3304      	adds	r3, #4
 800d234:	67bb      	str	r3, [r7, #120]	; 0x78
 800d236:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d23a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d3f0      	bcc.n	800d222 <f_mkfs+0x9f6>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
 800d240:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d244:	1c53      	adds	r3, r2, #1
 800d246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d24a:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d24e:	2301      	movs	r3, #1
 800d250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d252:	f7fa fb13 	bl	800787c <disk_write>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <f_mkfs+0xa34>
 800d25c:	2301      	movs	r3, #1
 800d25e:	e3c2      	b.n	800d9e6 <f_mkfs+0x11ba>
		for (n = 0; n < 2; n++) {
 800d260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d264:	3301      	adds	r3, #1
 800d266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d26a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d26e:	2b01      	cmp	r3, #1
 800d270:	f67f aea3 	bls.w	800cfba <f_mkfs+0x78e>
 800d274:	e31a      	b.n	800d8ac <f_mkfs+0x1080>

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d27c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d280:	2b03      	cmp	r3, #3
 800d282:	d149      	bne.n	800d318 <f_mkfs+0xaec>
				if (!pau) {	/* au auto-selection */
 800d284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d122      	bne.n	800d2d2 <f_mkfs+0xaa6>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	0c5b      	lsrs	r3, r3, #17
 800d290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d294:	2300      	movs	r3, #0
 800d296:	67bb      	str	r3, [r7, #120]	; 0x78
 800d298:	2301      	movs	r3, #1
 800d29a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d29e:	e009      	b.n	800d2b4 <f_mkfs+0xa88>
 800d2a0:	0801553c 	.word	0x0801553c
 800d2a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800d2aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d2b4:	4aba      	ldr	r2, [pc, #744]	; (800d5a0 <f_mkfs+0xd74>)
 800d2b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d008      	beq.n	800d2d2 <f_mkfs+0xaa6>
 800d2c0:	4ab7      	ldr	r2, [pc, #732]	; (800d5a0 <f_mkfs+0xd74>)
 800d2c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d2e8      	bcs.n	800d2a4 <f_mkfs+0xa78>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d2d2:	69fa      	ldr	r2, [r7, #28]
 800d2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2dc:	633b      	str	r3, [r7, #48]	; 0x30
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	3302      	adds	r3, #2
 800d2e2:	009a      	lsls	r2, r3, #2
 800d2e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2e8:	4413      	add	r3, r2
 800d2ea:	1e5a      	subs	r2, r3, #1
 800d2ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				sz_rsv = 32;	/* Number of reserved sectors */
 800d2f8:	2320      	movs	r3, #32
 800d2fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sz_dir = 0;		/* No static directory */
 800d2fe:	2300      	movs	r3, #0
 800d300:	67fb      	str	r3, [r7, #124]	; 0x7c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d304:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d308:	4293      	cmp	r3, r2
 800d30a:	d903      	bls.n	800d314 <f_mkfs+0xae8>
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	4aa5      	ldr	r2, [pc, #660]	; (800d5a4 <f_mkfs+0xd78>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d959      	bls.n	800d3c8 <f_mkfs+0xb9c>
 800d314:	230e      	movs	r3, #14
 800d316:	e366      	b.n	800d9e6 <f_mkfs+0x11ba>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d120      	bne.n	800d362 <f_mkfs+0xb36>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	0b1b      	lsrs	r3, r3, #12
 800d324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d328:	2300      	movs	r3, #0
 800d32a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d32c:	2301      	movs	r3, #1
 800d32e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d332:	e007      	b.n	800d344 <f_mkfs+0xb18>
 800d334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d336:	3301      	adds	r3, #1
 800d338:	67bb      	str	r3, [r7, #120]	; 0x78
 800d33a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d344:	4a98      	ldr	r2, [pc, #608]	; (800d5a8 <f_mkfs+0xd7c>)
 800d346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d008      	beq.n	800d362 <f_mkfs+0xb36>
 800d350:	4a95      	ldr	r2, [pc, #596]	; (800d5a8 <f_mkfs+0xd7c>)
 800d352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d358:	461a      	mov	r2, r3
 800d35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d35e:	4293      	cmp	r3, r2
 800d360:	d2e8      	bcs.n	800d334 <f_mkfs+0xb08>
				}
				n_clst = sz_vol / pau;
 800d362:	69fa      	ldr	r2, [r7, #28]
 800d364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d368:	fbb2 f3f3 	udiv	r3, r2, r3
 800d36c:	633b      	str	r3, [r7, #48]	; 0x30
				if (n_clst > MAX_FAT12) {
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d374:	4293      	cmp	r3, r2
 800d376:	d905      	bls.n	800d384 <f_mkfs+0xb58>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	3302      	adds	r3, #2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d382:	e00b      	b.n	800d39c <f_mkfs+0xb70>
				} else {
					fmt = FS_FAT12;
 800d384:	2301      	movs	r3, #1
 800d386:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d38c:	4613      	mov	r3, r2
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	4413      	add	r3, r2
 800d392:	3301      	adds	r3, #1
 800d394:	085b      	lsrs	r3, r3, #1
 800d396:	3303      	adds	r3, #3
 800d398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d39c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d3a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d3a4:	4413      	add	r3, r2
 800d3a6:	1e5a      	subs	r2, r3, #1
 800d3a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				sz_rsv = 1;						/* Number of reserved sectors */
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c6:	67fb      	str	r3, [r7, #124]	; 0x7c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d3d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3da:	fb02 f203 	mul.w	r2, r2, r3
 800d3de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d3e2:	4413      	add	r3, r2
 800d3e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d3e6:	4413      	add	r3, r2
 800d3e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d3ea:	6a3a      	ldr	r2, [r7, #32]
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	4413      	add	r3, r2
 800d3f0:	1e5a      	subs	r2, r3, #1
 800d3f2:	6a3b      	ldr	r3, [r7, #32]
 800d3f4:	425b      	negs	r3, r3
 800d3f6:	401a      	ands	r2, r3
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	1ad3      	subs	r3, r2, r3
 800d3fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d400:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d404:	2b03      	cmp	r3, #3
 800d406:	d10e      	bne.n	800d426 <f_mkfs+0xbfa>
				sz_rsv += n; b_fat += n;
 800d408:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d40c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d410:	4413      	add	r3, r2
 800d412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d416:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d41a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d41e:	4413      	add	r3, r2
 800d420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d424:	e009      	b.n	800d43a <f_mkfs+0xc0e>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d426:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d42c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d430:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d434:	4413      	add	r3, r2
 800d436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d43a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d43e:	011a      	lsls	r2, r3, #4
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	441a      	add	r2, r3
 800d444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d446:	1ad2      	subs	r2, r2, r3
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d901      	bls.n	800d452 <f_mkfs+0xc26>
 800d44e:	230e      	movs	r3, #14
 800d450:	e2c9      	b.n	800d9e6 <f_mkfs+0x11ba>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d452:	69fa      	ldr	r2, [r7, #28]
 800d454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d458:	1ad2      	subs	r2, r2, r3
 800d45a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d45e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d460:	fb01 f303 	mul.w	r3, r1, r3
 800d464:	1ad2      	subs	r2, r2, r3
 800d466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d468:	1ad2      	subs	r2, r2, r3
 800d46a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d472:	633b      	str	r3, [r7, #48]	; 0x30
			if (fmt == FS_FAT32) {
 800d474:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d478:	2b03      	cmp	r3, #3
 800d47a:	d110      	bne.n	800d49e <f_mkfs+0xc72>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d482:	4293      	cmp	r3, r2
 800d484:	d80b      	bhi.n	800d49e <f_mkfs+0xc72>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d106      	bne.n	800d49a <f_mkfs+0xc6e>
 800d48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d490:	085b      	lsrs	r3, r3, #1
 800d492:	607b      	str	r3, [r7, #4]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d148      	bne.n	800d52c <f_mkfs+0xd00>
					return FR_MKFS_ABORTED;
 800d49a:	230e      	movs	r3, #14
 800d49c:	e2a3      	b.n	800d9e6 <f_mkfs+0x11ba>
				}
			}
			if (fmt == FS_FAT16) {
 800d49e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d137      	bne.n	800d516 <f_mkfs+0xcea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d921      	bls.n	800d4f4 <f_mkfs+0xcc8>
					if (!au && (pau * 2) <= 64) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d109      	bne.n	800d4ca <f_mkfs+0xc9e>
 800d4b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	2b40      	cmp	r3, #64	; 0x40
 800d4be:	d804      	bhi.n	800d4ca <f_mkfs+0xc9e>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d4c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4c4:	005b      	lsls	r3, r3, #1
 800d4c6:	607b      	str	r3, [r7, #4]
 800d4c8:	e035      	b.n	800d536 <f_mkfs+0xd0a>
					}
					if ((opt & FM_FAT32)) {
 800d4ca:	7afb      	ldrb	r3, [r7, #11]
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d003      	beq.n	800d4dc <f_mkfs+0xcb0>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d4da:	e02c      	b.n	800d536 <f_mkfs+0xd0a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <f_mkfs+0xcc4>
 800d4e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	607b      	str	r3, [r7, #4]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b80      	cmp	r3, #128	; 0x80
 800d4ee:	d91f      	bls.n	800d530 <f_mkfs+0xd04>
					return FR_MKFS_ABORTED;
 800d4f0:	230e      	movs	r3, #14
 800d4f2:	e278      	b.n	800d9e6 <f_mkfs+0x11ba>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d80b      	bhi.n	800d516 <f_mkfs+0xcea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <f_mkfs+0xce6>
 800d504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d508:	005b      	lsls	r3, r3, #1
 800d50a:	607b      	str	r3, [r7, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b80      	cmp	r3, #128	; 0x80
 800d510:	d910      	bls.n	800d534 <f_mkfs+0xd08>
					return FR_MKFS_ABORTED;
 800d512:	230e      	movs	r3, #14
 800d514:	e267      	b.n	800d9e6 <f_mkfs+0x11ba>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800d516:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d10c      	bne.n	800d538 <f_mkfs+0xd0c>
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d524:	4293      	cmp	r3, r2
 800d526:	d907      	bls.n	800d538 <f_mkfs+0xd0c>
 800d528:	230e      	movs	r3, #14
 800d52a:	e25c      	b.n	800d9e6 <f_mkfs+0x11ba>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d52c:	bf00      	nop
 800d52e:	e6a2      	b.n	800d276 <f_mkfs+0xa4a>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d530:	bf00      	nop
 800d532:	e6a0      	b.n	800d276 <f_mkfs+0xa4a>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800d534:	bf00      	nop
			pau = au;
 800d536:	e69e      	b.n	800d276 <f_mkfs+0xa4a>

			/* Ok, it is the valid cluster configuration */
			break;
 800d538:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800d53a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d53e:	461a      	mov	r2, r3
 800d540:	2100      	movs	r1, #0
 800d542:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d544:	f7fa fbbf 	bl	8007cc6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800d548:	220b      	movs	r2, #11
 800d54a:	4918      	ldr	r1, [pc, #96]	; (800d5ac <f_mkfs+0xd80>)
 800d54c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d54e:	f7fa fb99 	bl	8007c84 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800d552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d554:	330b      	adds	r3, #11
 800d556:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d55a:	4611      	mov	r1, r2
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fa fac3 	bl	8007ae8 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800d562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d564:	330d      	adds	r3, #13
 800d566:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d56a:	b2d2      	uxtb	r2, r2
 800d56c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800d56e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d570:	330e      	adds	r3, #14
 800d572:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d576:	b292      	uxth	r2, r2
 800d578:	4611      	mov	r1, r2
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fa fab4 	bl	8007ae8 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800d580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d582:	3310      	adds	r3, #16
 800d584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d586:	b2d2      	uxtb	r2, r2
 800d588:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800d58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d58c:	f103 0211 	add.w	r2, r3, #17
 800d590:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d594:	2b03      	cmp	r3, #3
 800d596:	d00b      	beq.n	800d5b0 <f_mkfs+0xd84>
 800d598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	e009      	b.n	800d5b2 <f_mkfs+0xd86>
 800d59e:	bf00      	nop
 800d5a0:	08015648 	.word	0x08015648
 800d5a4:	0ffffff5 	.word	0x0ffffff5
 800d5a8:	08015658 	.word	0x08015658
 800d5ac:	08015548 	.word	0x08015548
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	f7fa fa97 	bl	8007ae8 <st_word>
		if (sz_vol < 0x10000) {
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5c0:	d208      	bcs.n	800d5d4 <f_mkfs+0xda8>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800d5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c4:	3313      	adds	r3, #19
 800d5c6:	69fa      	ldr	r2, [r7, #28]
 800d5c8:	b292      	uxth	r2, r2
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fa fa8b 	bl	8007ae8 <st_word>
 800d5d2:	e006      	b.n	800d5e2 <f_mkfs+0xdb6>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800d5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d6:	3320      	adds	r3, #32
 800d5d8:	69fa      	ldr	r2, [r7, #28]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fa fa9e 	bl	8007b1e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800d5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e4:	3315      	adds	r3, #21
 800d5e6:	22f8      	movs	r2, #248	; 0xf8
 800d5e8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800d5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5ec:	3318      	adds	r3, #24
 800d5ee:	213f      	movs	r1, #63	; 0x3f
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fa fa79 	bl	8007ae8 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800d5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5f8:	331a      	adds	r3, #26
 800d5fa:	21ff      	movs	r1, #255	; 0xff
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fa fa73 	bl	8007ae8 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800d602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d604:	331c      	adds	r3, #28
 800d606:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fa fa88 	bl	8007b1e <st_dword>
		if (fmt == FS_FAT32) {
 800d60e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d612:	2b03      	cmp	r3, #3
 800d614:	d132      	bne.n	800d67c <f_mkfs+0xe50>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800d616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d618:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800d61c:	f7f9 fe7a 	bl	8007314 <get_fattime>
 800d620:	4603      	mov	r3, r0
 800d622:	4619      	mov	r1, r3
 800d624:	4620      	mov	r0, r4
 800d626:	f7fa fa7a 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800d62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d62c:	3324      	adds	r3, #36	; 0x24
 800d62e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800d632:	4618      	mov	r0, r3
 800d634:	f7fa fa73 	bl	8007b1e <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800d638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63a:	332c      	adds	r3, #44	; 0x2c
 800d63c:	2102      	movs	r1, #2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fa fa6d 	bl	8007b1e <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800d644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d646:	3330      	adds	r3, #48	; 0x30
 800d648:	2101      	movs	r1, #1
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fa fa4c 	bl	8007ae8 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800d650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d652:	3332      	adds	r3, #50	; 0x32
 800d654:	2106      	movs	r1, #6
 800d656:	4618      	mov	r0, r3
 800d658:	f7fa fa46 	bl	8007ae8 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800d65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d65e:	3340      	adds	r3, #64	; 0x40
 800d660:	2280      	movs	r2, #128	; 0x80
 800d662:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800d664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d666:	3342      	adds	r3, #66	; 0x42
 800d668:	2229      	movs	r2, #41	; 0x29
 800d66a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800d66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66e:	3347      	adds	r3, #71	; 0x47
 800d670:	2213      	movs	r2, #19
 800d672:	499d      	ldr	r1, [pc, #628]	; (800d8e8 <f_mkfs+0x10bc>)
 800d674:	4618      	mov	r0, r3
 800d676:	f7fa fb05 	bl	8007c84 <mem_cpy>
 800d67a:	e021      	b.n	800d6c0 <f_mkfs+0xe94>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800d67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800d682:	f7f9 fe47 	bl	8007314 <get_fattime>
 800d686:	4603      	mov	r3, r0
 800d688:	4619      	mov	r1, r3
 800d68a:	4620      	mov	r0, r4
 800d68c:	f7fa fa47 	bl	8007b1e <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800d690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d692:	3316      	adds	r3, #22
 800d694:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d698:	b292      	uxth	r2, r2
 800d69a:	4611      	mov	r1, r2
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fa fa23 	bl	8007ae8 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800d6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6a4:	3324      	adds	r3, #36	; 0x24
 800d6a6:	2280      	movs	r2, #128	; 0x80
 800d6a8:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800d6aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ac:	3326      	adds	r3, #38	; 0x26
 800d6ae:	2229      	movs	r2, #41	; 0x29
 800d6b0:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800d6b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6b4:	332b      	adds	r3, #43	; 0x2b
 800d6b6:	2213      	movs	r2, #19
 800d6b8:	498c      	ldr	r1, [pc, #560]	; (800d8ec <f_mkfs+0x10c0>)
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fa fae2 	bl	8007c84 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800d6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fa fa0c 	bl	8007ae8 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800d6d0:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6da:	f7fa f8cf 	bl	800787c <disk_write>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <f_mkfs+0xebc>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e17e      	b.n	800d9e6 <f_mkfs+0x11ba>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800d6e8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d141      	bne.n	800d774 <f_mkfs+0xf48>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f2:	1d9a      	adds	r2, r3, #6
 800d6f4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6fc:	f7fa f8be 	bl	800787c <disk_write>
			mem_set(buf, 0, ss);
 800d700:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d704:	461a      	mov	r2, r3
 800d706:	2100      	movs	r1, #0
 800d708:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d70a:	f7fa fadc 	bl	8007cc6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800d70e:	4978      	ldr	r1, [pc, #480]	; (800d8f0 <f_mkfs+0x10c4>)
 800d710:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d712:	f7fa fa04 	bl	8007b1e <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800d716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d718:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d71c:	4975      	ldr	r1, [pc, #468]	; (800d8f4 <f_mkfs+0x10c8>)
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fa f9fd 	bl	8007b1e <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800d724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d726:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	3b01      	subs	r3, #1
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f7fa f9f4 	bl	8007b1e <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800d736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d738:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d73c:	2102      	movs	r1, #2
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fa f9ed 	bl	8007b1e <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800d744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d746:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d74a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fa f9ca 	bl	8007ae8 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800d754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d756:	1dda      	adds	r2, r3, #7
 800d758:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d75c:	2301      	movs	r3, #1
 800d75e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d760:	f7fa f88c 	bl	800787c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800d764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d766:	1c5a      	adds	r2, r3, #1
 800d768:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d76c:	2301      	movs	r3, #1
 800d76e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d770:	f7fa f884 	bl	800787c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800d774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d776:	2100      	movs	r1, #0
 800d778:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d77a:	f7fa faa4 	bl	8007cc6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800d77e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d786:	2300      	movs	r3, #0
 800d788:	67bb      	str	r3, [r7, #120]	; 0x78
 800d78a:	e059      	b.n	800d840 <f_mkfs+0x1014>
			if (fmt == FS_FAT32) {
 800d78c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d790:	2b03      	cmp	r3, #3
 800d792:	d113      	bne.n	800d7bc <f_mkfs+0xf90>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800d794:	f06f 0107 	mvn.w	r1, #7
 800d798:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d79a:	f7fa f9c0 	bl	8007b1e <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800d79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	f04f 31ff 	mov.w	r1, #4294967295
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fa f9b9 	bl	8007b1e <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800d7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7ae:	3308      	adds	r3, #8
 800d7b0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7fa f9b2 	bl	8007b1e <st_dword>
 800d7ba:	e00b      	b.n	800d7d4 <f_mkfs+0xfa8>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800d7bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d101      	bne.n	800d7c8 <f_mkfs+0xf9c>
 800d7c4:	4b4c      	ldr	r3, [pc, #304]	; (800d8f8 <f_mkfs+0x10cc>)
 800d7c6:	e001      	b.n	800d7cc <f_mkfs+0xfa0>
 800d7c8:	f06f 0307 	mvn.w	r3, #7
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d7d0:	f7fa f9a5 	bl	8007b1e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800d7d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d7d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800d7dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	bf28      	it	cs
 800d7e6:	4613      	movcs	r3, r2
 800d7e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d7ec:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d7f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d7fa:	f7fa f83f 	bl	800787c <disk_write>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <f_mkfs+0xfdc>
 800d804:	2301      	movs	r3, #1
 800d806:	e0ee      	b.n	800d9e6 <f_mkfs+0x11ba>
				mem_set(buf, 0, ss);
 800d808:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d80c:	461a      	mov	r2, r3
 800d80e:	2100      	movs	r1, #0
 800d810:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d812:	f7fa fa58 	bl	8007cc6 <mem_set>
				sect += n; nsect -= n;
 800d816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d81e:	4413      	add	r3, r2
 800d820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d824:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			} while (nsect);
 800d832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1d0      	bne.n	800d7dc <f_mkfs+0xfb0>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800d83a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d83c:	3301      	adds	r3, #1
 800d83e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d844:	429a      	cmp	r2, r3
 800d846:	d3a1      	bcc.n	800d78c <f_mkfs+0xf60>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800d848:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	d102      	bne.n	800d856 <f_mkfs+0x102a>
 800d850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d854:	e000      	b.n	800d858 <f_mkfs+0x102c>
 800d856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800d85c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d862:	4293      	cmp	r3, r2
 800d864:	bf28      	it	cs
 800d866:	4613      	movcs	r3, r2
 800d868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800d86c:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d874:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d87a:	f7f9 ffff 	bl	800787c <disk_write>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <f_mkfs+0x105c>
 800d884:	2301      	movs	r3, #1
 800d886:	e0ae      	b.n	800d9e6 <f_mkfs+0x11ba>
			sect += n; nsect -= n;
 800d888:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d88c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d890:	4413      	add	r3, r2
 800d892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d896:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d89a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		} while (nsect);
 800d8a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1d7      	bne.n	800d85c <f_mkfs+0x1030>
	}

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
 800d8ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d8b0:	2b04      	cmp	r3, #4
 800d8b2:	d103      	bne.n	800d8bc <f_mkfs+0x1090>
		sys = 0x07;			/* HPFS/NTFS/exFAT */
 800d8b4:	2307      	movs	r3, #7
 800d8b6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800d8ba:	e022      	b.n	800d902 <f_mkfs+0x10d6>
	} else {
		if (fmt == FS_FAT32) {
 800d8bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d8c0:	2b03      	cmp	r3, #3
 800d8c2:	d103      	bne.n	800d8cc <f_mkfs+0x10a0>
			sys = 0x0C;		/* FAT32X */
 800d8c4:	230c      	movs	r3, #12
 800d8c6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800d8ca:	e01a      	b.n	800d902 <f_mkfs+0x10d6>
		} else {
			if (sz_vol >= 0x10000) {
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8d2:	d303      	bcc.n	800d8dc <f_mkfs+0x10b0>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800d8d4:	2306      	movs	r3, #6
 800d8d6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800d8da:	e012      	b.n	800d902 <f_mkfs+0x10d6>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800d8dc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d10b      	bne.n	800d8fc <f_mkfs+0x10d0>
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	e00a      	b.n	800d8fe <f_mkfs+0x10d2>
 800d8e8:	08015554 	.word	0x08015554
 800d8ec:	08015568 	.word	0x08015568
 800d8f0:	41615252 	.word	0x41615252
 800d8f4:	61417272 	.word	0x61417272
 800d8f8:	00fffff8 	.word	0x00fffff8
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800d902:	7afb      	ldrb	r3, [r7, #11]
 800d904:	f003 0308 	and.w	r3, r3, #8
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d15f      	bne.n	800d9cc <f_mkfs+0x11a0>
			mem_set(buf, 0, ss);
 800d90c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d910:	461a      	mov	r2, r3
 800d912:	2100      	movs	r1, #0
 800d914:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d916:	f7fa f9d6 	bl	8007cc6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800d91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d91c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d920:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d924:	4618      	mov	r0, r3
 800d926:	f7fa f8df 	bl	8007ae8 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800d92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d92c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d930:	627b      	str	r3, [r7, #36]	; 0x24
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	3301      	adds	r3, #1
 800d93c:	2201      	movs	r2, #1
 800d93e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	3302      	adds	r3, #2
 800d944:	2201      	movs	r2, #1
 800d946:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	3303      	adds	r3, #3
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d952:	3304      	adds	r3, #4
 800d954:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800d958:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800d95a:	69fa      	ldr	r2, [r7, #28]
 800d95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95e:	441a      	add	r2, r3
 800d960:	4b23      	ldr	r3, [pc, #140]	; (800d9f0 <f_mkfs+0x11c4>)
 800d962:	fba3 1302 	umull	r1, r3, r3, r2
 800d966:	1ad2      	subs	r2, r2, r3
 800d968:	0852      	lsrs	r2, r2, #1
 800d96a:	4413      	add	r3, r2
 800d96c:	0b5b      	lsrs	r3, r3, #13
 800d96e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			pte[PTE_EdHead] = 254;				/* End head */
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	3305      	adds	r3, #5
 800d976:	22fe      	movs	r2, #254	; 0xfe
 800d978:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800d97a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d97e:	089b      	lsrs	r3, r3, #2
 800d980:	b2da      	uxtb	r2, r3
 800d982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d984:	3306      	adds	r3, #6
 800d986:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	3307      	adds	r3, #7
 800d992:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d996:	b2d2      	uxtb	r2, r2
 800d998:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	3308      	adds	r3, #8
 800d99e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fa f8bc 	bl	8007b1e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	330c      	adds	r3, #12
 800d9aa:	69fa      	ldr	r2, [r7, #28]
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fa f8b5 	bl	8007b1e <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800d9b4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9be:	f7f9 ff5d 	bl	800787c <disk_write>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <f_mkfs+0x11a0>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e00c      	b.n	800d9e6 <f_mkfs+0x11ba>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800d9cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7f9 ff71 	bl	80078bc <disk_ioctl>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <f_mkfs+0x11b8>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e000      	b.n	800d9e6 <f_mkfs+0x11ba>

	return FR_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	37a4      	adds	r7, #164	; 0xa4
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd90      	pop	{r4, r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	0515565b 	.word	0x0515565b

0800d9f4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	2b0a      	cmp	r3, #10
 800da04:	d103      	bne.n	800da0e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800da06:	210d      	movs	r1, #13
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fff3 	bl	800d9f4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	db25      	blt.n	800da66 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	1c5a      	adds	r2, r3, #1
 800da1e:	60fa      	str	r2, [r7, #12]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	4413      	add	r3, r2
 800da24:	78fa      	ldrb	r2, [r7, #3]
 800da26:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b3c      	cmp	r3, #60	; 0x3c
 800da2c:	dd12      	ble.n	800da54 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6818      	ldr	r0, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f103 010c 	add.w	r1, r3, #12
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	f107 0308 	add.w	r3, r7, #8
 800da3e:	f7fd ff89 	bl	800b954 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	429a      	cmp	r2, r3
 800da48:	d101      	bne.n	800da4e <putc_bfd+0x5a>
 800da4a:	2300      	movs	r3, #0
 800da4c:	e001      	b.n	800da52 <putc_bfd+0x5e>
 800da4e:	f04f 33ff 	mov.w	r3, #4294967295
 800da52:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	609a      	str	r2, [r3, #8]
 800da64:	e000      	b.n	800da68 <putc_bfd+0x74>
	if (i < 0) return;
 800da66:	bf00      	nop
}
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b084      	sub	sp, #16
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	db17      	blt.n	800daae <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6818      	ldr	r0, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f103 010c 	add.w	r1, r3, #12
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	461a      	mov	r2, r3
 800da8e:	f107 030c 	add.w	r3, r7, #12
 800da92:	f7fd ff5f 	bl	800b954 <f_write>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d108      	bne.n	800daae <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	461a      	mov	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d102      	bne.n	800daae <putc_flush+0x40>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	689b      	ldr	r3, [r3, #8]
 800daac:	e001      	b.n	800dab2 <putc_flush+0x44>
	return EOF;
 800daae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800daba:	b480      	push	{r7}
 800dabc:	b083      	sub	sp, #12
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	605a      	str	r2, [r3, #4]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	609a      	str	r2, [r3, #8]
}
 800dad8:	bf00      	nop
 800dada:	370c      	adds	r7, #12
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr

0800dae4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800dae4:	b40e      	push	{r1, r2, r3}
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b0a7      	sub	sp, #156	; 0x9c
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800daee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7ff ffe0 	bl	800daba <putc_init>

	va_start(arp, fmt);
 800dafa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800dafe:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800db00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db04:	1c5a      	adds	r2, r3, #1
 800db06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800db10:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800db14:	2b00      	cmp	r3, #0
 800db16:	f000 81f4 	beq.w	800df02 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800db1a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800db1e:	2b25      	cmp	r3, #37	; 0x25
 800db20:	d008      	beq.n	800db34 <f_printf+0x50>
			putc_bfd(&pb, c);
 800db22:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800db26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800db2a:	4611      	mov	r1, r2
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff ff61 	bl	800d9f4 <putc_bfd>
			continue;
 800db32:	e1e5      	b.n	800df00 <f_printf+0x41c>
		}
		w = f = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800db3a:	2300      	movs	r3, #0
 800db3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800db40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db44:	1c5a      	adds	r2, r3, #1
 800db46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800db50:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800db54:	2b30      	cmp	r3, #48	; 0x30
 800db56:	d10b      	bne.n	800db70 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800db58:	2301      	movs	r3, #1
 800db5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800db5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800db6e:	e024      	b.n	800dbba <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800db70:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800db74:	2b2d      	cmp	r3, #45	; 0x2d
 800db76:	d120      	bne.n	800dbba <f_printf+0xd6>
				f = 2; c = *fmt++;
 800db78:	2302      	movs	r3, #2
 800db7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800db7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800db8e:	e014      	b.n	800dbba <f_printf+0xd6>
			w = w * 10 + c - '0';
 800db90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db94:	4613      	mov	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	461a      	mov	r2, r3
 800db9e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dba2:	4413      	add	r3, r2
 800dba4:	3b30      	subs	r3, #48	; 0x30
 800dba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800dbaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dbb4:	781b      	ldrb	r3, [r3, #0]
 800dbb6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800dbba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dbbe:	2b2f      	cmp	r3, #47	; 0x2f
 800dbc0:	d903      	bls.n	800dbca <f_printf+0xe6>
 800dbc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dbc6:	2b39      	cmp	r3, #57	; 0x39
 800dbc8:	d9e2      	bls.n	800db90 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800dbca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dbce:	2b6c      	cmp	r3, #108	; 0x6c
 800dbd0:	d003      	beq.n	800dbda <f_printf+0xf6>
 800dbd2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dbd6:	2b4c      	cmp	r3, #76	; 0x4c
 800dbd8:	d10d      	bne.n	800dbf6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800dbda:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800dbde:	f043 0304 	orr.w	r3, r3, #4
 800dbe2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800dbe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800dbf6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 8183 	beq.w	800df06 <f_printf+0x422>
		d = c;
 800dc00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800dc04:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800dc08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800dc0c:	2b60      	cmp	r3, #96	; 0x60
 800dc0e:	d908      	bls.n	800dc22 <f_printf+0x13e>
 800dc10:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800dc14:	2b7a      	cmp	r3, #122	; 0x7a
 800dc16:	d804      	bhi.n	800dc22 <f_printf+0x13e>
 800dc18:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800dc1c:	3b20      	subs	r3, #32
 800dc1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800dc22:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800dc26:	3b42      	subs	r3, #66	; 0x42
 800dc28:	2b16      	cmp	r3, #22
 800dc2a:	f200 8098 	bhi.w	800dd5e <f_printf+0x27a>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <f_printf+0x150>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dd3f 	.word	0x0800dd3f
 800dc38:	0800dd27 	.word	0x0800dd27
 800dc3c:	0800dd4f 	.word	0x0800dd4f
 800dc40:	0800dd5f 	.word	0x0800dd5f
 800dc44:	0800dd5f 	.word	0x0800dd5f
 800dc48:	0800dd5f 	.word	0x0800dd5f
 800dc4c:	0800dd5f 	.word	0x0800dd5f
 800dc50:	0800dd5f 	.word	0x0800dd5f
 800dc54:	0800dd5f 	.word	0x0800dd5f
 800dc58:	0800dd5f 	.word	0x0800dd5f
 800dc5c:	0800dd5f 	.word	0x0800dd5f
 800dc60:	0800dd5f 	.word	0x0800dd5f
 800dc64:	0800dd5f 	.word	0x0800dd5f
 800dc68:	0800dd47 	.word	0x0800dd47
 800dc6c:	0800dd5f 	.word	0x0800dd5f
 800dc70:	0800dd5f 	.word	0x0800dd5f
 800dc74:	0800dd5f 	.word	0x0800dd5f
 800dc78:	0800dc91 	.word	0x0800dc91
 800dc7c:	0800dd5f 	.word	0x0800dd5f
 800dc80:	0800dd4f 	.word	0x0800dd4f
 800dc84:	0800dd5f 	.word	0x0800dd5f
 800dc88:	0800dd5f 	.word	0x0800dd5f
 800dc8c:	0800dd57 	.word	0x0800dd57
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800dc90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc92:	1d1a      	adds	r2, r3, #4
 800dc94:	67ba      	str	r2, [r7, #120]	; 0x78
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dca0:	e004      	b.n	800dcac <f_printf+0x1c8>
 800dca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dca6:	3301      	adds	r3, #1
 800dca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dcac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dcae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcb2:	4413      	add	r3, r2
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1f3      	bne.n	800dca2 <f_printf+0x1be>
			if (!(f & 2)) {
 800dcba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800dcbe:	f003 0302 	and.w	r3, r3, #2
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d11a      	bne.n	800dcfc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800dcc6:	e005      	b.n	800dcd4 <f_printf+0x1f0>
 800dcc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dccc:	2120      	movs	r1, #32
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff fe90 	bl	800d9f4 <putc_bfd>
 800dcd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcd8:	1c5a      	adds	r2, r3, #1
 800dcda:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dcde:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d8f0      	bhi.n	800dcc8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800dce6:	e009      	b.n	800dcfc <f_printf+0x218>
 800dce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dcee:	781a      	ldrb	r2, [r3, #0]
 800dcf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff fe7c 	bl	800d9f4 <putc_bfd>
 800dcfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d1f1      	bne.n	800dce8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800dd04:	e005      	b.n	800dd12 <f_printf+0x22e>
 800dd06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd0a:	2120      	movs	r1, #32
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7ff fe71 	bl	800d9f4 <putc_bfd>
 800dd12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dd1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d8f0      	bhi.n	800dd06 <f_printf+0x222>
			continue;
 800dd24:	e0ec      	b.n	800df00 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800dd26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd28:	1d1a      	adds	r2, r3, #4
 800dd2a:	67ba      	str	r2, [r7, #120]	; 0x78
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd34:	4611      	mov	r1, r2
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7ff fe5c 	bl	800d9f4 <putc_bfd>
 800dd3c:	e0e0      	b.n	800df00 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800dd3e:	2302      	movs	r3, #2
 800dd40:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800dd44:	e014      	b.n	800dd70 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800dd46:	2308      	movs	r3, #8
 800dd48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800dd4c:	e010      	b.n	800dd70 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800dd4e:	230a      	movs	r3, #10
 800dd50:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800dd54:	e00c      	b.n	800dd70 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800dd56:	2310      	movs	r3, #16
 800dd58:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800dd5c:	e008      	b.n	800dd70 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800dd5e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800dd62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7ff fe43 	bl	800d9f4 <putc_bfd>
 800dd6e:	e0c7      	b.n	800df00 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800dd70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800dd74:	f003 0304 	and.w	r3, r3, #4
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d004      	beq.n	800dd86 <f_printf+0x2a2>
 800dd7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd7e:	1d1a      	adds	r2, r3, #4
 800dd80:	67ba      	str	r2, [r7, #120]	; 0x78
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	e00c      	b.n	800dda0 <f_printf+0x2bc>
 800dd86:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800dd8a:	2b44      	cmp	r3, #68	; 0x44
 800dd8c:	d104      	bne.n	800dd98 <f_printf+0x2b4>
 800dd8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd90:	1d1a      	adds	r2, r3, #4
 800dd92:	67ba      	str	r2, [r7, #120]	; 0x78
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	e003      	b.n	800dda0 <f_printf+0x2bc>
 800dd98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd9a:	1d1a      	adds	r2, r3, #4
 800dd9c:	67ba      	str	r2, [r7, #120]	; 0x78
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800dda4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800dda8:	2b44      	cmp	r3, #68	; 0x44
 800ddaa:	d10e      	bne.n	800ddca <f_printf+0x2e6>
 800ddac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	da0a      	bge.n	800ddca <f_printf+0x2e6>
			v = 0 - v;
 800ddb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddb8:	425b      	negs	r3, r3
 800ddba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800ddbe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ddc2:	f043 0308 	orr.w	r3, r3, #8
 800ddc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ddd0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ddd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddd8:	fbb3 f1f2 	udiv	r1, r3, r2
 800dddc:	fb02 f201 	mul.w	r2, r2, r1
 800dde0:	1a9b      	subs	r3, r3, r2
 800dde2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800dde6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800ddea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ddee:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ddf6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ddfa:	2b09      	cmp	r3, #9
 800ddfc:	d90b      	bls.n	800de16 <f_printf+0x332>
 800ddfe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800de02:	2b78      	cmp	r3, #120	; 0x78
 800de04:	d101      	bne.n	800de0a <f_printf+0x326>
 800de06:	2227      	movs	r2, #39	; 0x27
 800de08:	e000      	b.n	800de0c <f_printf+0x328>
 800de0a:	2207      	movs	r2, #7
 800de0c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800de10:	4413      	add	r3, r2
 800de12:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800de16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800de20:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800de24:	3230      	adds	r2, #48	; 0x30
 800de26:	b2d2      	uxtb	r2, r2
 800de28:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800de2c:	440b      	add	r3, r1
 800de2e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800de32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <f_printf+0x35e>
 800de3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de3e:	2b1f      	cmp	r3, #31
 800de40:	d9c6      	bls.n	800ddd0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800de42:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800de46:	f003 0308 	and.w	r3, r3, #8
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00a      	beq.n	800de64 <f_printf+0x380>
 800de4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800de58:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800de5c:	4413      	add	r3, r2
 800de5e:	222d      	movs	r2, #45	; 0x2d
 800de60:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800de64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800de6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <f_printf+0x398>
 800de78:	2330      	movs	r3, #48	; 0x30
 800de7a:	e000      	b.n	800de7e <f_printf+0x39a>
 800de7c:	2320      	movs	r3, #32
 800de7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800de82:	e007      	b.n	800de94 <f_printf+0x3b0>
 800de84:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800de88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800de8c:	4611      	mov	r1, r2
 800de8e:	4618      	mov	r0, r3
 800de90:	f7ff fdb0 	bl	800d9f4 <putc_bfd>
 800de94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800de98:	f003 0302 	and.w	r3, r3, #2
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d108      	bne.n	800deb2 <f_printf+0x3ce>
 800dea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800deaa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800deae:	429a      	cmp	r2, r3
 800deb0:	d8e8      	bhi.n	800de84 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800deb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800deb6:	3b01      	subs	r3, #1
 800deb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800debc:	f107 020c 	add.w	r2, r7, #12
 800dec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dec4:	4413      	add	r3, r2
 800dec6:	781a      	ldrb	r2, [r3, #0]
 800dec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800decc:	4611      	mov	r1, r2
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff fd90 	bl	800d9f4 <putc_bfd>
		} while (i);
 800ded4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1ea      	bne.n	800deb2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800dedc:	e007      	b.n	800deee <f_printf+0x40a>
 800dede:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800dee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dee6:	4611      	mov	r1, r2
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fd83 	bl	800d9f4 <putc_bfd>
 800deee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800def8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800defc:	429a      	cmp	r2, r3
 800defe:	d8ee      	bhi.n	800dede <f_printf+0x3fa>
		c = *fmt++;
 800df00:	e5fe      	b.n	800db00 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800df02:	bf00      	nop
 800df04:	e000      	b.n	800df08 <f_printf+0x424>
		if (!c) break;
 800df06:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800df08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff fdae 	bl	800da6e <putc_flush>
 800df12:	4603      	mov	r3, r0
}
 800df14:	4618      	mov	r0, r3
 800df16:	379c      	adds	r7, #156	; 0x9c
 800df18:	46bd      	mov	sp, r7
 800df1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df1e:	b003      	add	sp, #12
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop

0800df24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df24:	b480      	push	{r7}
 800df26:	b087      	sub	sp, #28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4613      	mov	r3, r2
 800df30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df32:	2301      	movs	r3, #1
 800df34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df3a:	4b1f      	ldr	r3, [pc, #124]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df3c:	7a5b      	ldrb	r3, [r3, #9]
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d131      	bne.n	800dfa8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df44:	4b1c      	ldr	r3, [pc, #112]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df46:	7a5b      	ldrb	r3, [r3, #9]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	461a      	mov	r2, r3
 800df4c:	4b1a      	ldr	r3, [pc, #104]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df4e:	2100      	movs	r1, #0
 800df50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df52:	4b19      	ldr	r3, [pc, #100]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df54:	7a5b      	ldrb	r3, [r3, #9]
 800df56:	b2db      	uxtb	r3, r3
 800df58:	4a17      	ldr	r2, [pc, #92]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df62:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df64:	7a5b      	ldrb	r3, [r3, #9]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	461a      	mov	r2, r3
 800df6a:	4b13      	ldr	r3, [pc, #76]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df6c:	4413      	add	r3, r2
 800df6e:	79fa      	ldrb	r2, [r7, #7]
 800df70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df72:	4b11      	ldr	r3, [pc, #68]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df74:	7a5b      	ldrb	r3, [r3, #9]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	b2d1      	uxtb	r1, r2
 800df7c:	4a0e      	ldr	r2, [pc, #56]	; (800dfb8 <FATFS_LinkDriverEx+0x94>)
 800df7e:	7251      	strb	r1, [r2, #9]
 800df80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df82:	7dbb      	ldrb	r3, [r7, #22]
 800df84:	3330      	adds	r3, #48	; 0x30
 800df86:	b2da      	uxtb	r2, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	3301      	adds	r3, #1
 800df90:	223a      	movs	r2, #58	; 0x3a
 800df92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3302      	adds	r3, #2
 800df98:	222f      	movs	r2, #47	; 0x2f
 800df9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	3303      	adds	r3, #3
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	371c      	adds	r7, #28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	200004b4 	.word	0x200004b4

0800dfbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7ff ffaa 	bl	800df24 <FATFS_LinkDriverEx>
 800dfd0:	4603      	mov	r3, r0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
	...

0800dfdc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	6039      	str	r1, [r7, #0]
 800dfe6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dfe8:	88fb      	ldrh	r3, [r7, #6]
 800dfea:	2b7f      	cmp	r3, #127	; 0x7f
 800dfec:	d802      	bhi.n	800dff4 <ff_convert+0x18>
		c = chr;
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	81fb      	strh	r3, [r7, #14]
 800dff2:	e025      	b.n	800e040 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00b      	beq.n	800e012 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dffa:	88fb      	ldrh	r3, [r7, #6]
 800dffc:	2bff      	cmp	r3, #255	; 0xff
 800dffe:	d805      	bhi.n	800e00c <ff_convert+0x30>
 800e000:	88fb      	ldrh	r3, [r7, #6]
 800e002:	3b80      	subs	r3, #128	; 0x80
 800e004:	4a12      	ldr	r2, [pc, #72]	; (800e050 <ff_convert+0x74>)
 800e006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e00a:	e000      	b.n	800e00e <ff_convert+0x32>
 800e00c:	2300      	movs	r3, #0
 800e00e:	81fb      	strh	r3, [r7, #14]
 800e010:	e016      	b.n	800e040 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e012:	2300      	movs	r3, #0
 800e014:	81fb      	strh	r3, [r7, #14]
 800e016:	e009      	b.n	800e02c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e018:	89fb      	ldrh	r3, [r7, #14]
 800e01a:	4a0d      	ldr	r2, [pc, #52]	; (800e050 <ff_convert+0x74>)
 800e01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e020:	88fa      	ldrh	r2, [r7, #6]
 800e022:	429a      	cmp	r2, r3
 800e024:	d006      	beq.n	800e034 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e026:	89fb      	ldrh	r3, [r7, #14]
 800e028:	3301      	adds	r3, #1
 800e02a:	81fb      	strh	r3, [r7, #14]
 800e02c:	89fb      	ldrh	r3, [r7, #14]
 800e02e:	2b7f      	cmp	r3, #127	; 0x7f
 800e030:	d9f2      	bls.n	800e018 <ff_convert+0x3c>
 800e032:	e000      	b.n	800e036 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e034:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e036:	89fb      	ldrh	r3, [r7, #14]
 800e038:	3380      	adds	r3, #128	; 0x80
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e040:	89fb      	ldrh	r3, [r7, #14]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	08015668 	.word	0x08015668

0800e054 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e054:	b480      	push	{r7}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e05e:	88fb      	ldrh	r3, [r7, #6]
 800e060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e064:	d201      	bcs.n	800e06a <ff_wtoupper+0x16>
 800e066:	4b3e      	ldr	r3, [pc, #248]	; (800e160 <ff_wtoupper+0x10c>)
 800e068:	e000      	b.n	800e06c <ff_wtoupper+0x18>
 800e06a:	4b3e      	ldr	r3, [pc, #248]	; (800e164 <ff_wtoupper+0x110>)
 800e06c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	1c9a      	adds	r2, r3, #2
 800e072:	617a      	str	r2, [r7, #20]
 800e074:	881b      	ldrh	r3, [r3, #0]
 800e076:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e078:	8a7b      	ldrh	r3, [r7, #18]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d068      	beq.n	800e150 <ff_wtoupper+0xfc>
 800e07e:	88fa      	ldrh	r2, [r7, #6]
 800e080:	8a7b      	ldrh	r3, [r7, #18]
 800e082:	429a      	cmp	r2, r3
 800e084:	d364      	bcc.n	800e150 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	1c9a      	adds	r2, r3, #2
 800e08a:	617a      	str	r2, [r7, #20]
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	823b      	strh	r3, [r7, #16]
 800e090:	8a3b      	ldrh	r3, [r7, #16]
 800e092:	0a1b      	lsrs	r3, r3, #8
 800e094:	81fb      	strh	r3, [r7, #14]
 800e096:	8a3b      	ldrh	r3, [r7, #16]
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e09c:	88fa      	ldrh	r2, [r7, #6]
 800e09e:	8a79      	ldrh	r1, [r7, #18]
 800e0a0:	8a3b      	ldrh	r3, [r7, #16]
 800e0a2:	440b      	add	r3, r1
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	da49      	bge.n	800e13c <ff_wtoupper+0xe8>
			switch (cmd) {
 800e0a8:	89fb      	ldrh	r3, [r7, #14]
 800e0aa:	2b08      	cmp	r3, #8
 800e0ac:	d84f      	bhi.n	800e14e <ff_wtoupper+0xfa>
 800e0ae:	a201      	add	r2, pc, #4	; (adr r2, 800e0b4 <ff_wtoupper+0x60>)
 800e0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b4:	0800e0d9 	.word	0x0800e0d9
 800e0b8:	0800e0eb 	.word	0x0800e0eb
 800e0bc:	0800e101 	.word	0x0800e101
 800e0c0:	0800e109 	.word	0x0800e109
 800e0c4:	0800e111 	.word	0x0800e111
 800e0c8:	0800e119 	.word	0x0800e119
 800e0cc:	0800e121 	.word	0x0800e121
 800e0d0:	0800e129 	.word	0x0800e129
 800e0d4:	0800e131 	.word	0x0800e131
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e0d8:	88fa      	ldrh	r2, [r7, #6]
 800e0da:	8a7b      	ldrh	r3, [r7, #18]
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	697a      	ldr	r2, [r7, #20]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	80fb      	strh	r3, [r7, #6]
 800e0e8:	e027      	b.n	800e13a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e0ea:	88fa      	ldrh	r2, [r7, #6]
 800e0ec:	8a7b      	ldrh	r3, [r7, #18]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	f003 0301 	and.w	r3, r3, #1
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	88fa      	ldrh	r2, [r7, #6]
 800e0fa:	1ad3      	subs	r3, r2, r3
 800e0fc:	80fb      	strh	r3, [r7, #6]
 800e0fe:	e01c      	b.n	800e13a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e100:	88fb      	ldrh	r3, [r7, #6]
 800e102:	3b10      	subs	r3, #16
 800e104:	80fb      	strh	r3, [r7, #6]
 800e106:	e018      	b.n	800e13a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e108:	88fb      	ldrh	r3, [r7, #6]
 800e10a:	3b20      	subs	r3, #32
 800e10c:	80fb      	strh	r3, [r7, #6]
 800e10e:	e014      	b.n	800e13a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e110:	88fb      	ldrh	r3, [r7, #6]
 800e112:	3b30      	subs	r3, #48	; 0x30
 800e114:	80fb      	strh	r3, [r7, #6]
 800e116:	e010      	b.n	800e13a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e118:	88fb      	ldrh	r3, [r7, #6]
 800e11a:	3b1a      	subs	r3, #26
 800e11c:	80fb      	strh	r3, [r7, #6]
 800e11e:	e00c      	b.n	800e13a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e120:	88fb      	ldrh	r3, [r7, #6]
 800e122:	3308      	adds	r3, #8
 800e124:	80fb      	strh	r3, [r7, #6]
 800e126:	e008      	b.n	800e13a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	3b50      	subs	r3, #80	; 0x50
 800e12c:	80fb      	strh	r3, [r7, #6]
 800e12e:	e004      	b.n	800e13a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e130:	88fb      	ldrh	r3, [r7, #6]
 800e132:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e136:	80fb      	strh	r3, [r7, #6]
 800e138:	bf00      	nop
			}
			break;
 800e13a:	e008      	b.n	800e14e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e13c:	89fb      	ldrh	r3, [r7, #14]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d195      	bne.n	800e06e <ff_wtoupper+0x1a>
 800e142:	8a3b      	ldrh	r3, [r7, #16]
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	4413      	add	r3, r2
 800e14a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e14c:	e78f      	b.n	800e06e <ff_wtoupper+0x1a>
			break;
 800e14e:	bf00      	nop
	}

	return chr;
 800e150:	88fb      	ldrh	r3, [r7, #6]
}
 800e152:	4618      	mov	r0, r3
 800e154:	371c      	adds	r7, #28
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	08015768 	.word	0x08015768
 800e164:	0801595c 	.word	0x0801595c

0800e168 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	4603      	mov	r3, r0
 800e170:	6039      	str	r1, [r7, #0]
 800e172:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800e174:	2300      	movs	r3, #0
 800e176:	60fb      	str	r3, [r7, #12]
 800e178:	2300      	movs	r3, #0
 800e17a:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e17c:	f107 030c 	add.w	r3, r7, #12
 800e180:	2101      	movs	r1, #1
 800e182:	4618      	mov	r0, r3
 800e184:	f000 f8e9 	bl	800e35a <osSemaphoreCreate>
 800e188:	4602      	mov	r2, r0
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	bf14      	ite	ne
 800e196:	2301      	movne	r3, #1
 800e198:	2300      	moveq	r3, #0
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	617b      	str	r3, [r7, #20]

    return ret;
 800e19e:	697b      	ldr	r3, [r7, #20]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3718      	adds	r7, #24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f989 	bl	800e4c8 <osSemaphoreDelete>
#endif
    return 1;
 800e1b6:	2301      	movs	r3, #1
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800e1cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 f8f5 	bl	800e3c0 <osSemaphoreWait>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d101      	bne.n	800e1e0 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b082      	sub	sp, #8
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 f932 	bl	800e45c <osSemaphoreRelease>
#endif
}
 800e1f8:	bf00      	nop
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	4603      	mov	r3, r0
 800e208:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e20a:	2300      	movs	r3, #0
 800e20c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e20e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e212:	2b84      	cmp	r3, #132	; 0x84
 800e214:	d005      	beq.n	800e222 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	4413      	add	r3, r2
 800e21e:	3303      	adds	r3, #3
 800e220:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e222:	68fb      	ldr	r3, [r7, #12]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e236:	f3ef 8305 	mrs	r3, IPSR
 800e23a:	607b      	str	r3, [r7, #4]
  return(result);
 800e23c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e23e:	2b00      	cmp	r3, #0
 800e240:	bf14      	ite	ne
 800e242:	2301      	movne	r3, #1
 800e244:	2300      	moveq	r3, #0
 800e246:	b2db      	uxtb	r3, r3
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e258:	f001 fbc6 	bl	800f9e8 <vTaskStartScheduler>
  
  return osOK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	bd80      	pop	{r7, pc}

0800e262 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800e266:	f001 ffd5 	bl	8010214 <xTaskGetSchedulerState>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d101      	bne.n	800e274 <osKernelRunning+0x12>
    return 0;
 800e270:	2300      	movs	r3, #0
 800e272:	e000      	b.n	800e276 <osKernelRunning+0x14>
  else
    return 1;
 800e274:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800e276:	4618      	mov	r0, r3
 800e278:	bd80      	pop	{r7, pc}

0800e27a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e27e:	f7ff ffd7 	bl	800e230 <inHandlerMode>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d003      	beq.n	800e290 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e288:	f001 fcc6 	bl	800fc18 <xTaskGetTickCountFromISR>
 800e28c:	4603      	mov	r3, r0
 800e28e:	e002      	b.n	800e296 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e290:	f001 fcb2 	bl	800fbf8 <xTaskGetTickCount>
 800e294:	4603      	mov	r3, r0
  }
}
 800e296:	4618      	mov	r0, r3
 800e298:	bd80      	pop	{r7, pc}

0800e29a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29c:	b089      	sub	sp, #36	; 0x24
 800e29e:	af04      	add	r7, sp, #16
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	695b      	ldr	r3, [r3, #20]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d020      	beq.n	800e2ee <osThreadCreate+0x54>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	699b      	ldr	r3, [r3, #24]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d01c      	beq.n	800e2ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	685c      	ldr	r4, [r3, #4]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681d      	ldr	r5, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	691e      	ldr	r6, [r3, #16]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff ff9a 	bl	800e200 <makeFreeRtosPriority>
 800e2cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	695b      	ldr	r3, [r3, #20]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2d6:	9202      	str	r2, [sp, #8]
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	9100      	str	r1, [sp, #0]
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	4632      	mov	r2, r6
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f001 f9bc 	bl	800f660 <xTaskCreateStatic>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	e01c      	b.n	800e328 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	685c      	ldr	r4, [r3, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2fa:	b29e      	uxth	r6, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff ff7c 	bl	800e200 <makeFreeRtosPriority>
 800e308:	4602      	mov	r2, r0
 800e30a:	f107 030c 	add.w	r3, r7, #12
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	9200      	str	r2, [sp, #0]
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	4632      	mov	r2, r6
 800e316:	4629      	mov	r1, r5
 800e318:	4620      	mov	r0, r4
 800e31a:	f001 f9fb 	bl	800f714 <xTaskCreate>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b01      	cmp	r3, #1
 800e322:	d001      	beq.n	800e328 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e324:	2300      	movs	r3, #0
 800e326:	e000      	b.n	800e32a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e332 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <osDelay+0x16>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	e000      	b.n	800e34a <osDelay+0x18>
 800e348:	2301      	movs	r3, #1
 800e34a:	4618      	mov	r0, r3
 800e34c:	f001 fb18 	bl	800f980 <vTaskDelay>
  
  return osOK;
 800e350:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b086      	sub	sp, #24
 800e35e:	af02      	add	r7, sp, #8
 800e360:	6078      	str	r0, [r7, #4]
 800e362:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d010      	beq.n	800e38e <osSemaphoreCreate+0x34>
    if (count == 1) {
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d10b      	bne.n	800e38a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	2303      	movs	r3, #3
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	4613      	mov	r3, r2
 800e37c:	2200      	movs	r2, #0
 800e37e:	2100      	movs	r1, #0
 800e380:	2001      	movs	r0, #1
 800e382:	f000 faad 	bl	800e8e0 <xQueueGenericCreateStatic>
 800e386:	4603      	mov	r3, r0
 800e388:	e016      	b.n	800e3b8 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	e014      	b.n	800e3b8 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d110      	bne.n	800e3b6 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800e394:	2203      	movs	r2, #3
 800e396:	2100      	movs	r1, #0
 800e398:	2001      	movs	r0, #1
 800e39a:	f000 fb14 	bl	800e9c6 <xQueueGenericCreate>
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d005      	beq.n	800e3b2 <osSemaphoreCreate+0x58>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 fb69 	bl	800ea84 <xQueueGenericSend>
      return sema;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	e000      	b.n	800e3b8 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800e3b6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800e3d4:	2380      	movs	r3, #128	; 0x80
 800e3d6:	e03a      	b.n	800e44e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e2:	d103      	bne.n	800e3ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e8:	60fb      	str	r3, [r7, #12]
 800e3ea:	e009      	b.n	800e400 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d006      	beq.n	800e400 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <osSemaphoreWait+0x40>
      ticks = 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800e400:	f7ff ff16 	bl	800e230 <inHandlerMode>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d017      	beq.n	800e43a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e40a:	f107 0308 	add.w	r3, r7, #8
 800e40e:	461a      	mov	r2, r3
 800e410:	2100      	movs	r1, #0
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 ff32 	bl	800f27c <xQueueReceiveFromISR>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d001      	beq.n	800e422 <osSemaphoreWait+0x62>
      return osErrorOS;
 800e41e:	23ff      	movs	r3, #255	; 0xff
 800e420:	e015      	b.n	800e44e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d011      	beq.n	800e44c <osSemaphoreWait+0x8c>
 800e428:	4b0b      	ldr	r3, [pc, #44]	; (800e458 <osSemaphoreWait+0x98>)
 800e42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	e008      	b.n	800e44c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e43a:	68f9      	ldr	r1, [r7, #12]
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 fe15 	bl	800f06c <xQueueSemaphoreTake>
 800e442:	4603      	mov	r3, r0
 800e444:	2b01      	cmp	r3, #1
 800e446:	d001      	beq.n	800e44c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800e448:	23ff      	movs	r3, #255	; 0xff
 800e44a:	e000      	b.n	800e44e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	e000ed04 	.word	0xe000ed04

0800e45c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800e464:	2300      	movs	r3, #0
 800e466:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800e468:	2300      	movs	r3, #0
 800e46a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800e46c:	f7ff fee0 	bl	800e230 <inHandlerMode>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d016      	beq.n	800e4a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e476:	f107 0308 	add.w	r3, r7, #8
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fc8f 	bl	800eda0 <xQueueGiveFromISR>
 800e482:	4603      	mov	r3, r0
 800e484:	2b01      	cmp	r3, #1
 800e486:	d001      	beq.n	800e48c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800e488:	23ff      	movs	r3, #255	; 0xff
 800e48a:	e017      	b.n	800e4bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d013      	beq.n	800e4ba <osSemaphoreRelease+0x5e>
 800e492:	4b0c      	ldr	r3, [pc, #48]	; (800e4c4 <osSemaphoreRelease+0x68>)
 800e494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e498:	601a      	str	r2, [r3, #0]
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	e00a      	b.n	800e4ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 faea 	bl	800ea84 <xQueueGenericSend>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d001      	beq.n	800e4ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800e4b6:	23ff      	movs	r3, #255	; 0xff
 800e4b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	e000ed04 	.word	0xe000ed04

0800e4c8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e4d0:	f7ff feae 	bl	800e230 <inHandlerMode>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <osSemaphoreDelete+0x16>
    return osErrorISR;
 800e4da:	2382      	movs	r3, #130	; 0x82
 800e4dc:	e003      	b.n	800e4e6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 ff49 	bl	800f376 <vQueueDelete>

  return osOK; 
 800e4e4:	2300      	movs	r3, #0
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e4ee:	b590      	push	{r4, r7, lr}
 800e4f0:	b085      	sub	sp, #20
 800e4f2:	af02      	add	r7, sp, #8
 800e4f4:	6078      	str	r0, [r7, #4]
 800e4f6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d012      	beq.n	800e526 <osMessageCreate+0x38>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d00e      	beq.n	800e526 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6818      	ldr	r0, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6859      	ldr	r1, [r3, #4]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	689a      	ldr	r2, [r3, #8]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68dc      	ldr	r4, [r3, #12]
 800e518:	2300      	movs	r3, #0
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	4623      	mov	r3, r4
 800e51e:	f000 f9df 	bl	800e8e0 <xQueueGenericCreateStatic>
 800e522:	4603      	mov	r3, r0
 800e524:	e008      	b.n	800e538 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6818      	ldr	r0, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	4619      	mov	r1, r3
 800e532:	f000 fa48 	bl	800e9c6 <xQueueGenericCreate>
 800e536:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e538:	4618      	mov	r0, r3
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd90      	pop	{r4, r7, pc}

0800e540 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b086      	sub	sp, #24
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e54c:	2300      	movs	r3, #0
 800e54e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d101      	bne.n	800e55e <osMessagePut+0x1e>
    ticks = 1;
 800e55a:	2301      	movs	r3, #1
 800e55c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e55e:	f7ff fe67 	bl	800e230 <inHandlerMode>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d018      	beq.n	800e59a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e568:	f107 0210 	add.w	r2, r7, #16
 800e56c:	f107 0108 	add.w	r1, r7, #8
 800e570:	2300      	movs	r3, #0
 800e572:	68f8      	ldr	r0, [r7, #12]
 800e574:	f000 fb80 	bl	800ec78 <xQueueGenericSendFromISR>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d001      	beq.n	800e582 <osMessagePut+0x42>
      return osErrorOS;
 800e57e:	23ff      	movs	r3, #255	; 0xff
 800e580:	e018      	b.n	800e5b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d014      	beq.n	800e5b2 <osMessagePut+0x72>
 800e588:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <osMessagePut+0x7c>)
 800e58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	e00b      	b.n	800e5b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e59a:	f107 0108 	add.w	r1, r7, #8
 800e59e:	2300      	movs	r3, #0
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f000 fa6e 	bl	800ea84 <xQueueGenericSend>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d001      	beq.n	800e5b2 <osMessagePut+0x72>
      return osErrorOS;
 800e5ae:	23ff      	movs	r3, #255	; 0xff
 800e5b0:	e000      	b.n	800e5b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	e000ed04 	.word	0xe000ed04

0800e5c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e5c0:	b590      	push	{r4, r7, lr}
 800e5c2:	b08b      	sub	sp, #44	; 0x2c
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10a      	bne.n	800e5f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e5da:	2380      	movs	r3, #128	; 0x80
 800e5dc:	617b      	str	r3, [r7, #20]
    return event;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	461c      	mov	r4, r3
 800e5e2:	f107 0314 	add.w	r3, r7, #20
 800e5e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e5ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e5ee:	e054      	b.n	800e69a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5fe:	d103      	bne.n	800e608 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e600:	f04f 33ff 	mov.w	r3, #4294967295
 800e604:	627b      	str	r3, [r7, #36]	; 0x24
 800e606:	e009      	b.n	800e61c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d006      	beq.n	800e61c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <osMessageGet+0x5c>
      ticks = 1;
 800e618:	2301      	movs	r3, #1
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e61c:	f7ff fe08 	bl	800e230 <inHandlerMode>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d01c      	beq.n	800e660 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e626:	f107 0220 	add.w	r2, r7, #32
 800e62a:	f107 0314 	add.w	r3, r7, #20
 800e62e:	3304      	adds	r3, #4
 800e630:	4619      	mov	r1, r3
 800e632:	68b8      	ldr	r0, [r7, #8]
 800e634:	f000 fe22 	bl	800f27c <xQueueReceiveFromISR>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d102      	bne.n	800e644 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e63e:	2310      	movs	r3, #16
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	e001      	b.n	800e648 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e644:	2300      	movs	r3, #0
 800e646:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e648:	6a3b      	ldr	r3, [r7, #32]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d01d      	beq.n	800e68a <osMessageGet+0xca>
 800e64e:	4b15      	ldr	r3, [pc, #84]	; (800e6a4 <osMessageGet+0xe4>)
 800e650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	e014      	b.n	800e68a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e660:	f107 0314 	add.w	r3, r7, #20
 800e664:	3304      	adds	r3, #4
 800e666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e668:	4619      	mov	r1, r3
 800e66a:	68b8      	ldr	r0, [r7, #8]
 800e66c:	f000 fc22 	bl	800eeb4 <xQueueReceive>
 800e670:	4603      	mov	r3, r0
 800e672:	2b01      	cmp	r3, #1
 800e674:	d102      	bne.n	800e67c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e676:	2310      	movs	r3, #16
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	e006      	b.n	800e68a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d101      	bne.n	800e686 <osMessageGet+0xc6>
 800e682:	2300      	movs	r3, #0
 800e684:	e000      	b.n	800e688 <osMessageGet+0xc8>
 800e686:	2340      	movs	r3, #64	; 0x40
 800e688:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	461c      	mov	r4, r3
 800e68e:	f107 0314 	add.w	r3, r7, #20
 800e692:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	372c      	adds	r7, #44	; 0x2c
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd90      	pop	{r4, r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	e000ed04 	.word	0xe000ed04

0800e6a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f103 0208 	add.w	r2, r3, #8
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f103 0208 	add.w	r2, r3, #8
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f103 0208 	add.w	r2, r3, #8
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6dc:	bf00      	nop
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6f6:	bf00      	nop
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e702:	b480      	push	{r7}
 800e704:	b085      	sub	sp, #20
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	68fa      	ldr	r2, [r7, #12]
 800e716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	689a      	ldr	r2, [r3, #8]
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	683a      	ldr	r2, [r7, #0]
 800e726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	683a      	ldr	r2, [r7, #0]
 800e72c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	1c5a      	adds	r2, r3, #1
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	601a      	str	r2, [r3, #0]
}
 800e73e:	bf00      	nop
 800e740:	3714      	adds	r7, #20
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e74a:	b480      	push	{r7}
 800e74c:	b085      	sub	sp, #20
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e760:	d103      	bne.n	800e76a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	e00c      	b.n	800e784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	3308      	adds	r3, #8
 800e76e:	60fb      	str	r3, [r7, #12]
 800e770:	e002      	b.n	800e778 <vListInsert+0x2e>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	68ba      	ldr	r2, [r7, #8]
 800e780:	429a      	cmp	r2, r3
 800e782:	d2f6      	bcs.n	800e772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	1c5a      	adds	r2, r3, #1
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	601a      	str	r2, [r3, #0]
}
 800e7b0:	bf00      	nop
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	6892      	ldr	r2, [r2, #8]
 800e7d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	6852      	ldr	r2, [r2, #4]
 800e7dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d103      	bne.n	800e7f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	1e5a      	subs	r2, r3, #1
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3714      	adds	r7, #20
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d109      	bne.n	800e838 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	60bb      	str	r3, [r7, #8]
 800e836:	e7fe      	b.n	800e836 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e838:	f002 f848 	bl	80108cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e844:	68f9      	ldr	r1, [r7, #12]
 800e846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e848:	fb01 f303 	mul.w	r3, r1, r3
 800e84c:	441a      	add	r2, r3
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2200      	movs	r2, #0
 800e856:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e868:	3b01      	subs	r3, #1
 800e86a:	68f9      	ldr	r1, [r7, #12]
 800e86c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e86e:	fb01 f303 	mul.w	r3, r1, r3
 800e872:	441a      	add	r2, r3
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	22ff      	movs	r2, #255	; 0xff
 800e87c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	22ff      	movs	r2, #255	; 0xff
 800e884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d114      	bne.n	800e8b8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d01a      	beq.n	800e8cc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	3310      	adds	r3, #16
 800e89a:	4618      	mov	r0, r3
 800e89c:	f001 fb04 	bl	800fea8 <xTaskRemoveFromEventList>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d012      	beq.n	800e8cc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e8a6:	4b0d      	ldr	r3, [pc, #52]	; (800e8dc <xQueueGenericReset+0xcc>)
 800e8a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ac:	601a      	str	r2, [r3, #0]
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	e009      	b.n	800e8cc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	3310      	adds	r3, #16
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fef3 	bl	800e6a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	3324      	adds	r3, #36	; 0x24
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7ff feee 	bl	800e6a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e8cc:	f002 f82c 	bl	8010928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e8d0:	2301      	movs	r3, #1
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	e000ed04 	.word	0xe000ed04

0800e8e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b08e      	sub	sp, #56	; 0x38
 800e8e4:	af02      	add	r7, sp, #8
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
 800e8ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d109      	bne.n	800e908 <xQueueGenericCreateStatic+0x28>
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	62bb      	str	r3, [r7, #40]	; 0x28
 800e906:	e7fe      	b.n	800e906 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d109      	bne.n	800e922 <xQueueGenericCreateStatic+0x42>
 800e90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e912:	f383 8811 	msr	BASEPRI, r3
 800e916:	f3bf 8f6f 	isb	sy
 800e91a:	f3bf 8f4f 	dsb	sy
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
 800e920:	e7fe      	b.n	800e920 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <xQueueGenericCreateStatic+0x4e>
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <xQueueGenericCreateStatic+0x52>
 800e92e:	2301      	movs	r3, #1
 800e930:	e000      	b.n	800e934 <xQueueGenericCreateStatic+0x54>
 800e932:	2300      	movs	r3, #0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d109      	bne.n	800e94c <xQueueGenericCreateStatic+0x6c>
 800e938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
 800e948:	623b      	str	r3, [r7, #32]
 800e94a:	e7fe      	b.n	800e94a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d102      	bne.n	800e958 <xQueueGenericCreateStatic+0x78>
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d101      	bne.n	800e95c <xQueueGenericCreateStatic+0x7c>
 800e958:	2301      	movs	r3, #1
 800e95a:	e000      	b.n	800e95e <xQueueGenericCreateStatic+0x7e>
 800e95c:	2300      	movs	r3, #0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d109      	bne.n	800e976 <xQueueGenericCreateStatic+0x96>
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	61fb      	str	r3, [r7, #28]
 800e974:	e7fe      	b.n	800e974 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e976:	2348      	movs	r3, #72	; 0x48
 800e978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b48      	cmp	r3, #72	; 0x48
 800e97e:	d009      	beq.n	800e994 <xQueueGenericCreateStatic+0xb4>
 800e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	61bb      	str	r3, [r7, #24]
 800e992:	e7fe      	b.n	800e992 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e994:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00d      	beq.n	800e9bc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e9a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ae:	9300      	str	r3, [sp, #0]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	68b9      	ldr	r1, [r7, #8]
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f000 f844 	bl	800ea44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3730      	adds	r7, #48	; 0x30
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b08a      	sub	sp, #40	; 0x28
 800e9ca:	af02      	add	r7, sp, #8
 800e9cc:	60f8      	str	r0, [r7, #12]
 800e9ce:	60b9      	str	r1, [r7, #8]
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d109      	bne.n	800e9ee <xQueueGenericCreate+0x28>
 800e9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	613b      	str	r3, [r7, #16]
 800e9ec:	e7fe      	b.n	800e9ec <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	61fb      	str	r3, [r7, #28]
 800e9f8:	e004      	b.n	800ea04 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ea02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	3348      	adds	r3, #72	; 0x48
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f002 f879 	bl	8010b00 <pvPortMalloc>
 800ea0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d011      	beq.n	800ea3a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	3348      	adds	r3, #72	; 0x48
 800ea1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea28:	79fa      	ldrb	r2, [r7, #7]
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	9300      	str	r3, [sp, #0]
 800ea2e:	4613      	mov	r3, r2
 800ea30:	697a      	ldr	r2, [r7, #20]
 800ea32:	68b9      	ldr	r1, [r7, #8]
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f000 f805 	bl	800ea44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea3a:	69bb      	ldr	r3, [r7, #24]
	}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3720      	adds	r7, #32
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d103      	bne.n	800ea60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	601a      	str	r2, [r3, #0]
 800ea5e:	e002      	b.n	800ea66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea72:	2101      	movs	r1, #1
 800ea74:	69b8      	ldr	r0, [r7, #24]
 800ea76:	f7ff fecb 	bl	800e810 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea7a:	bf00      	nop
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
	...

0800ea84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b08e      	sub	sp, #56	; 0x38
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
 800ea90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea92:	2300      	movs	r3, #0
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d109      	bne.n	800eab4 <xQueueGenericSend+0x30>
 800eaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28
 800eab2:	e7fe      	b.n	800eab2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d103      	bne.n	800eac2 <xQueueGenericSend+0x3e>
 800eaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <xQueueGenericSend+0x42>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <xQueueGenericSend+0x44>
 800eac6:	2300      	movs	r3, #0
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d109      	bne.n	800eae0 <xQueueGenericSend+0x5c>
 800eacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead0:	f383 8811 	msr	BASEPRI, r3
 800ead4:	f3bf 8f6f 	isb	sy
 800ead8:	f3bf 8f4f 	dsb	sy
 800eadc:	627b      	str	r3, [r7, #36]	; 0x24
 800eade:	e7fe      	b.n	800eade <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	d103      	bne.n	800eaee <xQueueGenericSend+0x6a>
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d101      	bne.n	800eaf2 <xQueueGenericSend+0x6e>
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e000      	b.n	800eaf4 <xQueueGenericSend+0x70>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d109      	bne.n	800eb0c <xQueueGenericSend+0x88>
 800eaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafc:	f383 8811 	msr	BASEPRI, r3
 800eb00:	f3bf 8f6f 	isb	sy
 800eb04:	f3bf 8f4f 	dsb	sy
 800eb08:	623b      	str	r3, [r7, #32]
 800eb0a:	e7fe      	b.n	800eb0a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb0c:	f001 fb82 	bl	8010214 <xTaskGetSchedulerState>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <xQueueGenericSend+0x98>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d101      	bne.n	800eb20 <xQueueGenericSend+0x9c>
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	e000      	b.n	800eb22 <xQueueGenericSend+0x9e>
 800eb20:	2300      	movs	r3, #0
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d109      	bne.n	800eb3a <xQueueGenericSend+0xb6>
 800eb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	61fb      	str	r3, [r7, #28]
 800eb38:	e7fe      	b.n	800eb38 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb3a:	f001 fec7 	bl	80108cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d302      	bcc.n	800eb50 <xQueueGenericSend+0xcc>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d129      	bne.n	800eba4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb56:	f000 fc48 	bl	800f3ea <prvCopyDataToQueue>
 800eb5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d010      	beq.n	800eb86 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb66:	3324      	adds	r3, #36	; 0x24
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f001 f99d 	bl	800fea8 <xTaskRemoveFromEventList>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d013      	beq.n	800eb9c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb74:	4b3f      	ldr	r3, [pc, #252]	; (800ec74 <xQueueGenericSend+0x1f0>)
 800eb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	e00a      	b.n	800eb9c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d007      	beq.n	800eb9c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb8c:	4b39      	ldr	r3, [pc, #228]	; (800ec74 <xQueueGenericSend+0x1f0>)
 800eb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb9c:	f001 fec4 	bl	8010928 <vPortExitCritical>
				return pdPASS;
 800eba0:	2301      	movs	r3, #1
 800eba2:	e063      	b.n	800ec6c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d103      	bne.n	800ebb2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebaa:	f001 febd 	bl	8010928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	e05c      	b.n	800ec6c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d106      	bne.n	800ebc6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebb8:	f107 0314 	add.w	r3, r7, #20
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f001 f9d5 	bl	800ff6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebc6:	f001 feaf 	bl	8010928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebca:	f000 ff6b 	bl	800faa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebce:	f001 fe7d 	bl	80108cc <vPortEnterCritical>
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebde:	d103      	bne.n	800ebe8 <xQueueGenericSend+0x164>
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebee:	b25b      	sxtb	r3, r3
 800ebf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf4:	d103      	bne.n	800ebfe <xQueueGenericSend+0x17a>
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebfe:	f001 fe93 	bl	8010928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec02:	1d3a      	adds	r2, r7, #4
 800ec04:	f107 0314 	add.w	r3, r7, #20
 800ec08:	4611      	mov	r1, r2
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f001 f9c4 	bl	800ff98 <xTaskCheckForTimeOut>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d124      	bne.n	800ec60 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ec16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec18:	f000 fcdf 	bl	800f5da <prvIsQueueFull>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d018      	beq.n	800ec54 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec24:	3310      	adds	r3, #16
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	4611      	mov	r1, r2
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f001 f918 	bl	800fe60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec32:	f000 fc6a 	bl	800f50a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec36:	f000 ff43 	bl	800fac0 <xTaskResumeAll>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f47f af7c 	bne.w	800eb3a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800ec42:	4b0c      	ldr	r3, [pc, #48]	; (800ec74 <xQueueGenericSend+0x1f0>)
 800ec44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	e772      	b.n	800eb3a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec56:	f000 fc58 	bl	800f50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec5a:	f000 ff31 	bl	800fac0 <xTaskResumeAll>
 800ec5e:	e76c      	b.n	800eb3a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec62:	f000 fc52 	bl	800f50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec66:	f000 ff2b 	bl	800fac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3738      	adds	r7, #56	; 0x38
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	e000ed04 	.word	0xe000ed04

0800ec78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08e      	sub	sp, #56	; 0x38
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
 800ec84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d109      	bne.n	800eca4 <xQueueGenericSendFromISR+0x2c>
 800ec90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	627b      	str	r3, [r7, #36]	; 0x24
 800eca2:	e7fe      	b.n	800eca2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d103      	bne.n	800ecb2 <xQueueGenericSendFromISR+0x3a>
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <xQueueGenericSendFromISR+0x3e>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	e000      	b.n	800ecb8 <xQueueGenericSendFromISR+0x40>
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d109      	bne.n	800ecd0 <xQueueGenericSendFromISR+0x58>
 800ecbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc0:	f383 8811 	msr	BASEPRI, r3
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	f3bf 8f4f 	dsb	sy
 800eccc:	623b      	str	r3, [r7, #32]
 800ecce:	e7fe      	b.n	800ecce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d103      	bne.n	800ecde <xQueueGenericSendFromISR+0x66>
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d101      	bne.n	800ece2 <xQueueGenericSendFromISR+0x6a>
 800ecde:	2301      	movs	r3, #1
 800ece0:	e000      	b.n	800ece4 <xQueueGenericSendFromISR+0x6c>
 800ece2:	2300      	movs	r3, #0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d109      	bne.n	800ecfc <xQueueGenericSendFromISR+0x84>
 800ece8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecec:	f383 8811 	msr	BASEPRI, r3
 800ecf0:	f3bf 8f6f 	isb	sy
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	61fb      	str	r3, [r7, #28]
 800ecfa:	e7fe      	b.n	800ecfa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecfc:	f001 fec2 	bl	8010a84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ed00:	f3ef 8211 	mrs	r2, BASEPRI
 800ed04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	61ba      	str	r2, [r7, #24]
 800ed16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d302      	bcc.n	800ed2e <xQueueGenericSendFromISR+0xb6>
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	2b02      	cmp	r3, #2
 800ed2c:	d12c      	bne.n	800ed88 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	68b9      	ldr	r1, [r7, #8]
 800ed3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed3e:	f000 fb54 	bl	800f3ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ed46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4a:	d112      	bne.n	800ed72 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d016      	beq.n	800ed82 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	3324      	adds	r3, #36	; 0x24
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f001 f8a5 	bl	800fea8 <xTaskRemoveFromEventList>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00e      	beq.n	800ed82 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00b      	beq.n	800ed82 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	601a      	str	r2, [r3, #0]
 800ed70:	e007      	b.n	800ed82 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed76:	3301      	adds	r3, #1
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	b25a      	sxtb	r2, r3
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed82:	2301      	movs	r3, #1
 800ed84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ed86:	e001      	b.n	800ed8c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3738      	adds	r7, #56	; 0x38
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b08e      	sub	sp, #56	; 0x38
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800edae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d109      	bne.n	800edc8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800edb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	623b      	str	r3, [r7, #32]
 800edc6:	e7fe      	b.n	800edc6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d009      	beq.n	800ede4 <xQueueGiveFromISR+0x44>
 800edd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	61fb      	str	r3, [r7, #28]
 800ede2:	e7fe      	b.n	800ede2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ede4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d103      	bne.n	800edf4 <xQueueGiveFromISR+0x54>
 800edec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d101      	bne.n	800edf8 <xQueueGiveFromISR+0x58>
 800edf4:	2301      	movs	r3, #1
 800edf6:	e000      	b.n	800edfa <xQueueGiveFromISR+0x5a>
 800edf8:	2300      	movs	r3, #0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <xQueueGiveFromISR+0x72>
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	61bb      	str	r3, [r7, #24]
 800ee10:	e7fe      	b.n	800ee10 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee12:	f001 fe37 	bl	8010a84 <vPortValidateInterruptPriority>
	__asm volatile
 800ee16:	f3ef 8211 	mrs	r2, BASEPRI
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	617a      	str	r2, [r7, #20]
 800ee2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ee2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d22b      	bcs.n	800ee9a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5c:	d112      	bne.n	800ee84 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d016      	beq.n	800ee94 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee68:	3324      	adds	r3, #36	; 0x24
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f001 f81c 	bl	800fea8 <xTaskRemoveFromEventList>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00e      	beq.n	800ee94 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00b      	beq.n	800ee94 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	e007      	b.n	800ee94 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee88:	3301      	adds	r3, #1
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	b25a      	sxtb	r2, r3
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee94:	2301      	movs	r3, #1
 800ee96:	637b      	str	r3, [r7, #52]	; 0x34
 800ee98:	e001      	b.n	800ee9e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ee9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3738      	adds	r7, #56	; 0x38
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
	...

0800eeb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08c      	sub	sp, #48	; 0x30
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eec0:	2300      	movs	r3, #0
 800eec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d109      	bne.n	800eee2 <xQueueReceive+0x2e>
	__asm volatile
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	623b      	str	r3, [r7, #32]
 800eee0:	e7fe      	b.n	800eee0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d103      	bne.n	800eef0 <xQueueReceive+0x3c>
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d101      	bne.n	800eef4 <xQueueReceive+0x40>
 800eef0:	2301      	movs	r3, #1
 800eef2:	e000      	b.n	800eef6 <xQueueReceive+0x42>
 800eef4:	2300      	movs	r3, #0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d109      	bne.n	800ef0e <xQueueReceive+0x5a>
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	61fb      	str	r3, [r7, #28]
 800ef0c:	e7fe      	b.n	800ef0c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef0e:	f001 f981 	bl	8010214 <xTaskGetSchedulerState>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d102      	bne.n	800ef1e <xQueueReceive+0x6a>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <xQueueReceive+0x6e>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <xQueueReceive+0x70>
 800ef22:	2300      	movs	r3, #0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d109      	bne.n	800ef3c <xQueueReceive+0x88>
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	61bb      	str	r3, [r7, #24]
 800ef3a:	e7fe      	b.n	800ef3a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef3c:	f001 fcc6 	bl	80108cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d01f      	beq.n	800ef8c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef4c:	68b9      	ldr	r1, [r7, #8]
 800ef4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef50:	f000 fab5 	bl	800f4be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef56:	1e5a      	subs	r2, r3, #1
 800ef58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00f      	beq.n	800ef84 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	3310      	adds	r3, #16
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 ff9d 	bl	800fea8 <xTaskRemoveFromEventList>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d007      	beq.n	800ef84 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef74:	4b3c      	ldr	r3, [pc, #240]	; (800f068 <xQueueReceive+0x1b4>)
 800ef76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef84:	f001 fcd0 	bl	8010928 <vPortExitCritical>
				return pdPASS;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e069      	b.n	800f060 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d103      	bne.n	800ef9a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef92:	f001 fcc9 	bl	8010928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef96:	2300      	movs	r3, #0
 800ef98:	e062      	b.n	800f060 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d106      	bne.n	800efae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efa0:	f107 0310 	add.w	r3, r7, #16
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 ffe1 	bl	800ff6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efaa:	2301      	movs	r3, #1
 800efac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efae:	f001 fcbb 	bl	8010928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efb2:	f000 fd77 	bl	800faa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efb6:	f001 fc89 	bl	80108cc <vPortEnterCritical>
 800efba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efc0:	b25b      	sxtb	r3, r3
 800efc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc6:	d103      	bne.n	800efd0 <xQueueReceive+0x11c>
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	2200      	movs	r2, #0
 800efcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efd6:	b25b      	sxtb	r3, r3
 800efd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efdc:	d103      	bne.n	800efe6 <xQueueReceive+0x132>
 800efde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efe6:	f001 fc9f 	bl	8010928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efea:	1d3a      	adds	r2, r7, #4
 800efec:	f107 0310 	add.w	r3, r7, #16
 800eff0:	4611      	mov	r1, r2
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 ffd0 	bl	800ff98 <xTaskCheckForTimeOut>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d123      	bne.n	800f046 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800effe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f000:	f000 fad5 	bl	800f5ae <prvIsQueueEmpty>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d017      	beq.n	800f03a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00c:	3324      	adds	r3, #36	; 0x24
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	4611      	mov	r1, r2
 800f012:	4618      	mov	r0, r3
 800f014:	f000 ff24 	bl	800fe60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f01a:	f000 fa76 	bl	800f50a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f01e:	f000 fd4f 	bl	800fac0 <xTaskResumeAll>
 800f022:	4603      	mov	r3, r0
 800f024:	2b00      	cmp	r3, #0
 800f026:	d189      	bne.n	800ef3c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f028:	4b0f      	ldr	r3, [pc, #60]	; (800f068 <xQueueReceive+0x1b4>)
 800f02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	e780      	b.n	800ef3c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f03c:	f000 fa65 	bl	800f50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f040:	f000 fd3e 	bl	800fac0 <xTaskResumeAll>
 800f044:	e77a      	b.n	800ef3c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f048:	f000 fa5f 	bl	800f50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f04c:	f000 fd38 	bl	800fac0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f052:	f000 faac 	bl	800f5ae <prvIsQueueEmpty>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	f43f af6f 	beq.w	800ef3c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f05e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f060:	4618      	mov	r0, r3
 800f062:	3730      	adds	r7, #48	; 0x30
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	e000ed04 	.word	0xe000ed04

0800f06c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08e      	sub	sp, #56	; 0x38
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f076:	2300      	movs	r3, #0
 800f078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f07e:	2300      	movs	r3, #0
 800f080:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	2b00      	cmp	r3, #0
 800f086:	d109      	bne.n	800f09c <xQueueSemaphoreTake+0x30>
 800f088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08c:	f383 8811 	msr	BASEPRI, r3
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	623b      	str	r3, [r7, #32]
 800f09a:	e7fe      	b.n	800f09a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d009      	beq.n	800f0b8 <xQueueSemaphoreTake+0x4c>
 800f0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a8:	f383 8811 	msr	BASEPRI, r3
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f3bf 8f4f 	dsb	sy
 800f0b4:	61fb      	str	r3, [r7, #28]
 800f0b6:	e7fe      	b.n	800f0b6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0b8:	f001 f8ac 	bl	8010214 <xTaskGetSchedulerState>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d102      	bne.n	800f0c8 <xQueueSemaphoreTake+0x5c>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d101      	bne.n	800f0cc <xQueueSemaphoreTake+0x60>
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e000      	b.n	800f0ce <xQueueSemaphoreTake+0x62>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d109      	bne.n	800f0e6 <xQueueSemaphoreTake+0x7a>
 800f0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	61bb      	str	r3, [r7, #24]
 800f0e4:	e7fe      	b.n	800f0e4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0e6:	f001 fbf1 	bl	80108cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d024      	beq.n	800f140 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f8:	1e5a      	subs	r2, r3, #1
 800f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d104      	bne.n	800f110 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f106:	f001 fa3f 	bl	8010588 <pvTaskIncrementMutexHeldCount>
 800f10a:	4602      	mov	r2, r0
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d00f      	beq.n	800f138 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	3310      	adds	r3, #16
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 fec3 	bl	800fea8 <xTaskRemoveFromEventList>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d007      	beq.n	800f138 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f128:	4b53      	ldr	r3, [pc, #332]	; (800f278 <xQueueSemaphoreTake+0x20c>)
 800f12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f12e:	601a      	str	r2, [r3, #0]
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f138:	f001 fbf6 	bl	8010928 <vPortExitCritical>
				return pdPASS;
 800f13c:	2301      	movs	r3, #1
 800f13e:	e096      	b.n	800f26e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d110      	bne.n	800f168 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d009      	beq.n	800f160 <xQueueSemaphoreTake+0xf4>
 800f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	617b      	str	r3, [r7, #20]
 800f15e:	e7fe      	b.n	800f15e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f160:	f001 fbe2 	bl	8010928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f164:	2300      	movs	r3, #0
 800f166:	e082      	b.n	800f26e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f16e:	f107 030c 	add.w	r3, r7, #12
 800f172:	4618      	mov	r0, r3
 800f174:	f000 fefa 	bl	800ff6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f178:	2301      	movs	r3, #1
 800f17a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f17c:	f001 fbd4 	bl	8010928 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f180:	f000 fc90 	bl	800faa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f184:	f001 fba2 	bl	80108cc <vPortEnterCritical>
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f18e:	b25b      	sxtb	r3, r3
 800f190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f194:	d103      	bne.n	800f19e <xQueueSemaphoreTake+0x132>
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1a4:	b25b      	sxtb	r3, r3
 800f1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1aa:	d103      	bne.n	800f1b4 <xQueueSemaphoreTake+0x148>
 800f1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1b4:	f001 fbb8 	bl	8010928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1b8:	463a      	mov	r2, r7
 800f1ba:	f107 030c 	add.w	r3, r7, #12
 800f1be:	4611      	mov	r1, r2
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 fee9 	bl	800ff98 <xTaskCheckForTimeOut>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d132      	bne.n	800f232 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ce:	f000 f9ee 	bl	800f5ae <prvIsQueueEmpty>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d026      	beq.n	800f226 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d109      	bne.n	800f1f4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800f1e0:	f001 fb74 	bl	80108cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f001 f831 	bl	8010250 <xTaskPriorityInherit>
 800f1ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f1f0:	f001 fb9a 	bl	8010928 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f6:	3324      	adds	r3, #36	; 0x24
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	4611      	mov	r1, r2
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 fe2f 	bl	800fe60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f204:	f000 f981 	bl	800f50a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f208:	f000 fc5a 	bl	800fac0 <xTaskResumeAll>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f47f af69 	bne.w	800f0e6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800f214:	4b18      	ldr	r3, [pc, #96]	; (800f278 <xQueueSemaphoreTake+0x20c>)
 800f216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f21a:	601a      	str	r2, [r3, #0]
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	f3bf 8f6f 	isb	sy
 800f224:	e75f      	b.n	800f0e6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f228:	f000 f96f 	bl	800f50a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f22c:	f000 fc48 	bl	800fac0 <xTaskResumeAll>
 800f230:	e759      	b.n	800f0e6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f234:	f000 f969 	bl	800f50a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f238:	f000 fc42 	bl	800fac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f23c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f23e:	f000 f9b6 	bl	800f5ae <prvIsQueueEmpty>
 800f242:	4603      	mov	r3, r0
 800f244:	2b00      	cmp	r3, #0
 800f246:	f43f af4e 	beq.w	800f0e6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d00d      	beq.n	800f26c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800f250:	f001 fb3c 	bl	80108cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f256:	f000 f8b0 	bl	800f3ba <prvGetDisinheritPriorityAfterTimeout>
 800f25a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f262:	4618      	mov	r0, r3
 800f264:	f001 f8f8 	bl	8010458 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f268:	f001 fb5e 	bl	8010928 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f26c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3738      	adds	r7, #56	; 0x38
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	e000ed04 	.word	0xe000ed04

0800f27c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08e      	sub	sp, #56	; 0x38
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d109      	bne.n	800f2a6 <xQueueReceiveFromISR+0x2a>
 800f292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	623b      	str	r3, [r7, #32]
 800f2a4:	e7fe      	b.n	800f2a4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <xQueueReceiveFromISR+0x38>
 800f2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d101      	bne.n	800f2b8 <xQueueReceiveFromISR+0x3c>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e000      	b.n	800f2ba <xQueueReceiveFromISR+0x3e>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d109      	bne.n	800f2d2 <xQueueReceiveFromISR+0x56>
 800f2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	61fb      	str	r3, [r7, #28]
 800f2d0:	e7fe      	b.n	800f2d0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2d2:	f001 fbd7 	bl	8010a84 <vPortValidateInterruptPriority>
	__asm volatile
 800f2d6:	f3ef 8211 	mrs	r2, BASEPRI
 800f2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2de:	f383 8811 	msr	BASEPRI, r3
 800f2e2:	f3bf 8f6f 	isb	sy
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	61ba      	str	r2, [r7, #24]
 800f2ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d02f      	beq.n	800f35e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f308:	68b9      	ldr	r1, [r7, #8]
 800f30a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f30c:	f000 f8d7 	bl	800f4be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	1e5a      	subs	r2, r3, #1
 800f314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f316:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f320:	d112      	bne.n	800f348 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d016      	beq.n	800f358 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32c:	3310      	adds	r3, #16
 800f32e:	4618      	mov	r0, r3
 800f330:	f000 fdba 	bl	800fea8 <xTaskRemoveFromEventList>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00e      	beq.n	800f358 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00b      	beq.n	800f358 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2201      	movs	r2, #1
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	e007      	b.n	800f358 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f34c:	3301      	adds	r3, #1
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	b25a      	sxtb	r2, r3
 800f352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f358:	2301      	movs	r3, #1
 800f35a:	637b      	str	r3, [r7, #52]	; 0x34
 800f35c:	e001      	b.n	800f362 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f35e:	2300      	movs	r3, #0
 800f360:	637b      	str	r3, [r7, #52]	; 0x34
 800f362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f364:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3738      	adds	r7, #56	; 0x38
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b084      	sub	sp, #16
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d109      	bne.n	800f39c <vQueueDelete+0x26>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	60bb      	str	r3, [r7, #8]
 800f39a:	e7fe      	b.n	800f39a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f39c:	68f8      	ldr	r0, [r7, #12]
 800f39e:	f000 f935 	bl	800f60c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d102      	bne.n	800f3b2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f001 fc69 	bl	8010c84 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f3b2:	bf00      	nop
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f3ba:	b480      	push	{r7}
 800f3bc:	b085      	sub	sp, #20
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d006      	beq.n	800f3d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f1c3 0307 	rsb	r3, r3, #7
 800f3d4:	60fb      	str	r3, [r7, #12]
 800f3d6:	e001      	b.n	800f3dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
	}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3714      	adds	r7, #20
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e8:	4770      	bx	lr

0800f3ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b086      	sub	sp, #24
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	60f8      	str	r0, [r7, #12]
 800f3f2:	60b9      	str	r1, [r7, #8]
 800f3f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f404:	2b00      	cmp	r3, #0
 800f406:	d10d      	bne.n	800f424 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d14d      	bne.n	800f4ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	4618      	mov	r0, r3
 800f416:	f000 ff9b 	bl	8010350 <xTaskPriorityDisinherit>
 800f41a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2200      	movs	r2, #0
 800f420:	609a      	str	r2, [r3, #8]
 800f422:	e043      	b.n	800f4ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d119      	bne.n	800f45e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6858      	ldr	r0, [r3, #4]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f432:	461a      	mov	r2, r3
 800f434:	68b9      	ldr	r1, [r7, #8]
 800f436:	f001 fd63 	bl	8010f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f442:	441a      	add	r2, r3
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	685a      	ldr	r2, [r3, #4]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	429a      	cmp	r2, r3
 800f452:	d32b      	bcc.n	800f4ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	605a      	str	r2, [r3, #4]
 800f45c:	e026      	b.n	800f4ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	68d8      	ldr	r0, [r3, #12]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f466:	461a      	mov	r2, r3
 800f468:	68b9      	ldr	r1, [r7, #8]
 800f46a:	f001 fd49 	bl	8010f00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	68da      	ldr	r2, [r3, #12]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f476:	425b      	negs	r3, r3
 800f478:	441a      	add	r2, r3
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	68da      	ldr	r2, [r3, #12]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	429a      	cmp	r2, r3
 800f488:	d207      	bcs.n	800f49a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	689a      	ldr	r2, [r3, #8]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f492:	425b      	negs	r3, r3
 800f494:	441a      	add	r2, r3
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d105      	bne.n	800f4ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d002      	beq.n	800f4ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f4b4:	697b      	ldr	r3, [r7, #20]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3718      	adds	r7, #24
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d018      	beq.n	800f502 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	68da      	ldr	r2, [r3, #12]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4d8:	441a      	add	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	68da      	ldr	r2, [r3, #12]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d303      	bcc.n	800f4f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	68d9      	ldr	r1, [r3, #12]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	6838      	ldr	r0, [r7, #0]
 800f4fe:	f001 fcff 	bl	8010f00 <memcpy>
	}
}
 800f502:	bf00      	nop
 800f504:	3708      	adds	r7, #8
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b084      	sub	sp, #16
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f512:	f001 f9db 	bl	80108cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f51c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f51e:	e011      	b.n	800f544 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f524:	2b00      	cmp	r3, #0
 800f526:	d012      	beq.n	800f54e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3324      	adds	r3, #36	; 0x24
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 fcbb 	bl	800fea8 <xTaskRemoveFromEventList>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d001      	beq.n	800f53c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f538:	f000 fd8e 	bl	8010058 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
 800f53e:	3b01      	subs	r3, #1
 800f540:	b2db      	uxtb	r3, r3
 800f542:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	dce9      	bgt.n	800f520 <prvUnlockQueue+0x16>
 800f54c:	e000      	b.n	800f550 <prvUnlockQueue+0x46>
					break;
 800f54e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	22ff      	movs	r2, #255	; 0xff
 800f554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f558:	f001 f9e6 	bl	8010928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f55c:	f001 f9b6 	bl	80108cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f566:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f568:	e011      	b.n	800f58e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d012      	beq.n	800f598 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	3310      	adds	r3, #16
 800f576:	4618      	mov	r0, r3
 800f578:	f000 fc96 	bl	800fea8 <xTaskRemoveFromEventList>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f582:	f000 fd69 	bl	8010058 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f586:	7bbb      	ldrb	r3, [r7, #14]
 800f588:	3b01      	subs	r3, #1
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f592:	2b00      	cmp	r3, #0
 800f594:	dce9      	bgt.n	800f56a <prvUnlockQueue+0x60>
 800f596:	e000      	b.n	800f59a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f598:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	22ff      	movs	r2, #255	; 0xff
 800f59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f5a2:	f001 f9c1 	bl	8010928 <vPortExitCritical>
}
 800f5a6:	bf00      	nop
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}

0800f5ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f5ae:	b580      	push	{r7, lr}
 800f5b0:	b084      	sub	sp, #16
 800f5b2:	af00      	add	r7, sp, #0
 800f5b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5b6:	f001 f989 	bl	80108cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d102      	bne.n	800f5c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	60fb      	str	r3, [r7, #12]
 800f5c6:	e001      	b.n	800f5cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5cc:	f001 f9ac 	bl	8010928 <vPortExitCritical>

	return xReturn;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b084      	sub	sp, #16
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5e2:	f001 f973 	bl	80108cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d102      	bne.n	800f5f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	60fb      	str	r3, [r7, #12]
 800f5f6:	e001      	b.n	800f5fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5fc:	f001 f994 	bl	8010928 <vPortExitCritical>

	return xReturn;
 800f600:	68fb      	ldr	r3, [r7, #12]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
	...

0800f60c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f60c:	b480      	push	{r7}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f614:	2300      	movs	r3, #0
 800f616:	60fb      	str	r3, [r7, #12]
 800f618:	e016      	b.n	800f648 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f61a:	4a10      	ldr	r2, [pc, #64]	; (800f65c <vQueueUnregisterQueue+0x50>)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	4413      	add	r3, r2
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	429a      	cmp	r2, r3
 800f628:	d10b      	bne.n	800f642 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f62a:	4a0c      	ldr	r2, [pc, #48]	; (800f65c <vQueueUnregisterQueue+0x50>)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2100      	movs	r1, #0
 800f630:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f634:	4a09      	ldr	r2, [pc, #36]	; (800f65c <vQueueUnregisterQueue+0x50>)
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	4413      	add	r3, r2
 800f63c:	2200      	movs	r2, #0
 800f63e:	605a      	str	r2, [r3, #4]
				break;
 800f640:	e005      	b.n	800f64e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	3301      	adds	r3, #1
 800f646:	60fb      	str	r3, [r7, #12]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b07      	cmp	r3, #7
 800f64c:	d9e5      	bls.n	800f61a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f64e:	bf00      	nop
 800f650:	3714      	adds	r7, #20
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	20004964 	.word	0x20004964

0800f660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f660:	b580      	push	{r7, lr}
 800f662:	b08e      	sub	sp, #56	; 0x38
 800f664:	af04      	add	r7, sp, #16
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f670:	2b00      	cmp	r3, #0
 800f672:	d109      	bne.n	800f688 <xTaskCreateStatic+0x28>
 800f674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	623b      	str	r3, [r7, #32]
 800f686:	e7fe      	b.n	800f686 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d109      	bne.n	800f6a2 <xTaskCreateStatic+0x42>
 800f68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f692:	f383 8811 	msr	BASEPRI, r3
 800f696:	f3bf 8f6f 	isb	sy
 800f69a:	f3bf 8f4f 	dsb	sy
 800f69e:	61fb      	str	r3, [r7, #28]
 800f6a0:	e7fe      	b.n	800f6a0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f6a2:	2354      	movs	r3, #84	; 0x54
 800f6a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	2b54      	cmp	r3, #84	; 0x54
 800f6aa:	d009      	beq.n	800f6c0 <xTaskCreateStatic+0x60>
 800f6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	61bb      	str	r3, [r7, #24]
 800f6be:	e7fe      	b.n	800f6be <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f6c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d01e      	beq.n	800f706 <xTaskCreateStatic+0xa6>
 800f6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d01b      	beq.n	800f706 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6d6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6da:	2202      	movs	r2, #2
 800f6dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9303      	str	r3, [sp, #12]
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	9302      	str	r3, [sp, #8]
 800f6e8:	f107 0314 	add.w	r3, r7, #20
 800f6ec:	9301      	str	r3, [sp, #4]
 800f6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f000 f850 	bl	800f79e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f700:	f000 f8d4 	bl	800f8ac <prvAddNewTaskToReadyList>
 800f704:	e001      	b.n	800f70a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f70a:	697b      	ldr	r3, [r7, #20]
	}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3728      	adds	r7, #40	; 0x28
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f714:	b580      	push	{r7, lr}
 800f716:	b08c      	sub	sp, #48	; 0x30
 800f718:	af04      	add	r7, sp, #16
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	603b      	str	r3, [r7, #0]
 800f720:	4613      	mov	r3, r2
 800f722:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4618      	mov	r0, r3
 800f72a:	f001 f9e9 	bl	8010b00 <pvPortMalloc>
 800f72e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00e      	beq.n	800f754 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f736:	2054      	movs	r0, #84	; 0x54
 800f738:	f001 f9e2 	bl	8010b00 <pvPortMalloc>
 800f73c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d003      	beq.n	800f74c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	697a      	ldr	r2, [r7, #20]
 800f748:	631a      	str	r2, [r3, #48]	; 0x30
 800f74a:	e005      	b.n	800f758 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f74c:	6978      	ldr	r0, [r7, #20]
 800f74e:	f001 fa99 	bl	8010c84 <vPortFree>
 800f752:	e001      	b.n	800f758 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f754:	2300      	movs	r3, #0
 800f756:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d017      	beq.n	800f78e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f766:	88fa      	ldrh	r2, [r7, #6]
 800f768:	2300      	movs	r3, #0
 800f76a:	9303      	str	r3, [sp, #12]
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	9302      	str	r3, [sp, #8]
 800f770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f772:	9301      	str	r3, [sp, #4]
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68b9      	ldr	r1, [r7, #8]
 800f77c:	68f8      	ldr	r0, [r7, #12]
 800f77e:	f000 f80e 	bl	800f79e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f782:	69f8      	ldr	r0, [r7, #28]
 800f784:	f000 f892 	bl	800f8ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f788:	2301      	movs	r3, #1
 800f78a:	61bb      	str	r3, [r7, #24]
 800f78c:	e002      	b.n	800f794 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f78e:	f04f 33ff 	mov.w	r3, #4294967295
 800f792:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f794:	69bb      	ldr	r3, [r7, #24]
	}
 800f796:	4618      	mov	r0, r3
 800f798:	3720      	adds	r7, #32
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b088      	sub	sp, #32
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	60f8      	str	r0, [r7, #12]
 800f7a6:	60b9      	str	r1, [r7, #8]
 800f7a8:	607a      	str	r2, [r7, #4]
 800f7aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	f023 0307 	bic.w	r3, r3, #7
 800f7c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	f003 0307 	and.w	r3, r3, #7
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d009      	beq.n	800f7e4 <prvInitialiseNewTask+0x46>
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	617b      	str	r3, [r7, #20]
 800f7e2:	e7fe      	b.n	800f7e2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d01f      	beq.n	800f82a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	61fb      	str	r3, [r7, #28]
 800f7ee:	e012      	b.n	800f816 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f7f0:	68ba      	ldr	r2, [r7, #8]
 800f7f2:	69fb      	ldr	r3, [r7, #28]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	7819      	ldrb	r1, [r3, #0]
 800f7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	3334      	adds	r3, #52	; 0x34
 800f800:	460a      	mov	r2, r1
 800f802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d006      	beq.n	800f81e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	3301      	adds	r3, #1
 800f814:	61fb      	str	r3, [r7, #28]
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	2b0f      	cmp	r3, #15
 800f81a:	d9e9      	bls.n	800f7f0 <prvInitialiseNewTask+0x52>
 800f81c:	e000      	b.n	800f820 <prvInitialiseNewTask+0x82>
			{
				break;
 800f81e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f828:	e003      	b.n	800f832 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82c:	2200      	movs	r2, #0
 800f82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f834:	2b06      	cmp	r3, #6
 800f836:	d901      	bls.n	800f83c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f838:	2306      	movs	r3, #6
 800f83a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f846:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84a:	2200      	movs	r2, #0
 800f84c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f850:	3304      	adds	r3, #4
 800f852:	4618      	mov	r0, r3
 800f854:	f7fe ff48 	bl	800e6e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85a:	3318      	adds	r3, #24
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fe ff43 	bl	800e6e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86a:	f1c3 0207 	rsb	r2, r3, #7
 800f86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87a:	2200      	movs	r2, #0
 800f87c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	68f9      	ldr	r1, [r7, #12]
 800f88a:	69b8      	ldr	r0, [r7, #24]
 800f88c:	f000 fef6 	bl	801067c <pxPortInitialiseStack>
 800f890:	4602      	mov	r2, r0
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8a2:	bf00      	nop
 800f8a4:	3720      	adds	r7, #32
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f8b4:	f001 f80a 	bl	80108cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f8b8:	4b2a      	ldr	r3, [pc, #168]	; (800f964 <prvAddNewTaskToReadyList+0xb8>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3301      	adds	r3, #1
 800f8be:	4a29      	ldr	r2, [pc, #164]	; (800f964 <prvAddNewTaskToReadyList+0xb8>)
 800f8c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f8c2:	4b29      	ldr	r3, [pc, #164]	; (800f968 <prvAddNewTaskToReadyList+0xbc>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d109      	bne.n	800f8de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f8ca:	4a27      	ldr	r2, [pc, #156]	; (800f968 <prvAddNewTaskToReadyList+0xbc>)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f8d0:	4b24      	ldr	r3, [pc, #144]	; (800f964 <prvAddNewTaskToReadyList+0xb8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d110      	bne.n	800f8fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f8d8:	f000 fbe2 	bl	80100a0 <prvInitialiseTaskLists>
 800f8dc:	e00d      	b.n	800f8fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f8de:	4b23      	ldr	r3, [pc, #140]	; (800f96c <prvAddNewTaskToReadyList+0xc0>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d109      	bne.n	800f8fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f8e6:	4b20      	ldr	r3, [pc, #128]	; (800f968 <prvAddNewTaskToReadyList+0xbc>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d802      	bhi.n	800f8fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8f4:	4a1c      	ldr	r2, [pc, #112]	; (800f968 <prvAddNewTaskToReadyList+0xbc>)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8fa:	4b1d      	ldr	r3, [pc, #116]	; (800f970 <prvAddNewTaskToReadyList+0xc4>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	3301      	adds	r3, #1
 800f900:	4a1b      	ldr	r2, [pc, #108]	; (800f970 <prvAddNewTaskToReadyList+0xc4>)
 800f902:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f908:	2201      	movs	r2, #1
 800f90a:	409a      	lsls	r2, r3
 800f90c:	4b19      	ldr	r3, [pc, #100]	; (800f974 <prvAddNewTaskToReadyList+0xc8>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4313      	orrs	r3, r2
 800f912:	4a18      	ldr	r2, [pc, #96]	; (800f974 <prvAddNewTaskToReadyList+0xc8>)
 800f914:	6013      	str	r3, [r2, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f91a:	4613      	mov	r3, r2
 800f91c:	009b      	lsls	r3, r3, #2
 800f91e:	4413      	add	r3, r2
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4a15      	ldr	r2, [pc, #84]	; (800f978 <prvAddNewTaskToReadyList+0xcc>)
 800f924:	441a      	add	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	3304      	adds	r3, #4
 800f92a:	4619      	mov	r1, r3
 800f92c:	4610      	mov	r0, r2
 800f92e:	f7fe fee8 	bl	800e702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f932:	f000 fff9 	bl	8010928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f936:	4b0d      	ldr	r3, [pc, #52]	; (800f96c <prvAddNewTaskToReadyList+0xc0>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00e      	beq.n	800f95c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f93e:	4b0a      	ldr	r3, [pc, #40]	; (800f968 <prvAddNewTaskToReadyList+0xbc>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f948:	429a      	cmp	r2, r3
 800f94a:	d207      	bcs.n	800f95c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f94c:	4b0b      	ldr	r3, [pc, #44]	; (800f97c <prvAddNewTaskToReadyList+0xd0>)
 800f94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	200005c0 	.word	0x200005c0
 800f968:	200004c0 	.word	0x200004c0
 800f96c:	200005cc 	.word	0x200005cc
 800f970:	200005dc 	.word	0x200005dc
 800f974:	200005c8 	.word	0x200005c8
 800f978:	200004c4 	.word	0x200004c4
 800f97c:	e000ed04 	.word	0xe000ed04

0800f980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f988:	2300      	movs	r3, #0
 800f98a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d016      	beq.n	800f9c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f992:	4b13      	ldr	r3, [pc, #76]	; (800f9e0 <vTaskDelay+0x60>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d009      	beq.n	800f9ae <vTaskDelay+0x2e>
 800f99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	60bb      	str	r3, [r7, #8]
 800f9ac:	e7fe      	b.n	800f9ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800f9ae:	f000 f879 	bl	800faa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f9b2:	2100      	movs	r1, #0
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fdfb 	bl	80105b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f9ba:	f000 f881 	bl	800fac0 <xTaskResumeAll>
 800f9be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d107      	bne.n	800f9d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800f9c6:	4b07      	ldr	r3, [pc, #28]	; (800f9e4 <vTaskDelay+0x64>)
 800f9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9d6:	bf00      	nop
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	200005e8 	.word	0x200005e8
 800f9e4:	e000ed04 	.word	0xe000ed04

0800f9e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08a      	sub	sp, #40	; 0x28
 800f9ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9f6:	463a      	mov	r2, r7
 800f9f8:	1d39      	adds	r1, r7, #4
 800f9fa:	f107 0308 	add.w	r3, r7, #8
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f1 fc44 	bl	800128c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68ba      	ldr	r2, [r7, #8]
 800fa0a:	9202      	str	r2, [sp, #8]
 800fa0c:	9301      	str	r3, [sp, #4]
 800fa0e:	2300      	movs	r3, #0
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	2300      	movs	r3, #0
 800fa14:	460a      	mov	r2, r1
 800fa16:	491d      	ldr	r1, [pc, #116]	; (800fa8c <vTaskStartScheduler+0xa4>)
 800fa18:	481d      	ldr	r0, [pc, #116]	; (800fa90 <vTaskStartScheduler+0xa8>)
 800fa1a:	f7ff fe21 	bl	800f660 <xTaskCreateStatic>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	4b1c      	ldr	r3, [pc, #112]	; (800fa94 <vTaskStartScheduler+0xac>)
 800fa22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa24:	4b1b      	ldr	r3, [pc, #108]	; (800fa94 <vTaskStartScheduler+0xac>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d002      	beq.n	800fa32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	617b      	str	r3, [r7, #20]
 800fa30:	e001      	b.n	800fa36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa32:	2300      	movs	r3, #0
 800fa34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2b01      	cmp	r3, #1
 800fa3a:	d115      	bne.n	800fa68 <vTaskStartScheduler+0x80>
 800fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa40:	f383 8811 	msr	BASEPRI, r3
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa4e:	4b12      	ldr	r3, [pc, #72]	; (800fa98 <vTaskStartScheduler+0xb0>)
 800fa50:	f04f 32ff 	mov.w	r2, #4294967295
 800fa54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa56:	4b11      	ldr	r3, [pc, #68]	; (800fa9c <vTaskStartScheduler+0xb4>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa5c:	4b10      	ldr	r3, [pc, #64]	; (800faa0 <vTaskStartScheduler+0xb8>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa62:	f000 fe95 	bl	8010790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa66:	e00d      	b.n	800fa84 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa6e:	d109      	bne.n	800fa84 <vTaskStartScheduler+0x9c>
 800fa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa74:	f383 8811 	msr	BASEPRI, r3
 800fa78:	f3bf 8f6f 	isb	sy
 800fa7c:	f3bf 8f4f 	dsb	sy
 800fa80:	60fb      	str	r3, [r7, #12]
 800fa82:	e7fe      	b.n	800fa82 <vTaskStartScheduler+0x9a>
}
 800fa84:	bf00      	nop
 800fa86:	3718      	adds	r7, #24
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	0801557c 	.word	0x0801557c
 800fa90:	08010071 	.word	0x08010071
 800fa94:	200005e4 	.word	0x200005e4
 800fa98:	200005e0 	.word	0x200005e0
 800fa9c:	200005cc 	.word	0x200005cc
 800faa0:	200005c4 	.word	0x200005c4

0800faa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800faa4:	b480      	push	{r7}
 800faa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800faa8:	4b04      	ldr	r3, [pc, #16]	; (800fabc <vTaskSuspendAll+0x18>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3301      	adds	r3, #1
 800faae:	4a03      	ldr	r2, [pc, #12]	; (800fabc <vTaskSuspendAll+0x18>)
 800fab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fab2:	bf00      	nop
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	200005e8 	.word	0x200005e8

0800fac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800faca:	2300      	movs	r3, #0
 800facc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800face:	4b41      	ldr	r3, [pc, #260]	; (800fbd4 <xTaskResumeAll+0x114>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d109      	bne.n	800faea <xTaskResumeAll+0x2a>
 800fad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	603b      	str	r3, [r7, #0]
 800fae8:	e7fe      	b.n	800fae8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800faea:	f000 feef 	bl	80108cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800faee:	4b39      	ldr	r3, [pc, #228]	; (800fbd4 <xTaskResumeAll+0x114>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3b01      	subs	r3, #1
 800faf4:	4a37      	ldr	r2, [pc, #220]	; (800fbd4 <xTaskResumeAll+0x114>)
 800faf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800faf8:	4b36      	ldr	r3, [pc, #216]	; (800fbd4 <xTaskResumeAll+0x114>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d161      	bne.n	800fbc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb00:	4b35      	ldr	r3, [pc, #212]	; (800fbd8 <xTaskResumeAll+0x118>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d05d      	beq.n	800fbc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb08:	e02e      	b.n	800fb68 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0a:	4b34      	ldr	r3, [pc, #208]	; (800fbdc <xTaskResumeAll+0x11c>)
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3318      	adds	r3, #24
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fe50 	bl	800e7bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fe fe4b 	bl	800e7bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	409a      	lsls	r2, r3
 800fb2e:	4b2c      	ldr	r3, [pc, #176]	; (800fbe0 <xTaskResumeAll+0x120>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	4a2a      	ldr	r2, [pc, #168]	; (800fbe0 <xTaskResumeAll+0x120>)
 800fb36:	6013      	str	r3, [r2, #0]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	4413      	add	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4a27      	ldr	r2, [pc, #156]	; (800fbe4 <xTaskResumeAll+0x124>)
 800fb46:	441a      	add	r2, r3
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	4610      	mov	r0, r2
 800fb50:	f7fe fdd7 	bl	800e702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb58:	4b23      	ldr	r3, [pc, #140]	; (800fbe8 <xTaskResumeAll+0x128>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d302      	bcc.n	800fb68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800fb62:	4b22      	ldr	r3, [pc, #136]	; (800fbec <xTaskResumeAll+0x12c>)
 800fb64:	2201      	movs	r2, #1
 800fb66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb68:	4b1c      	ldr	r3, [pc, #112]	; (800fbdc <xTaskResumeAll+0x11c>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1cc      	bne.n	800fb0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d001      	beq.n	800fb7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb76:	f000 fb2d 	bl	80101d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fb7a:	4b1d      	ldr	r3, [pc, #116]	; (800fbf0 <xTaskResumeAll+0x130>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d010      	beq.n	800fba8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb86:	f000 f859 	bl	800fc3c <xTaskIncrementTick>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800fb90:	4b16      	ldr	r3, [pc, #88]	; (800fbec <xTaskResumeAll+0x12c>)
 800fb92:	2201      	movs	r2, #1
 800fb94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3b01      	subs	r3, #1
 800fb9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d1f1      	bne.n	800fb86 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800fba2:	4b13      	ldr	r3, [pc, #76]	; (800fbf0 <xTaskResumeAll+0x130>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fba8:	4b10      	ldr	r3, [pc, #64]	; (800fbec <xTaskResumeAll+0x12c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d009      	beq.n	800fbc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fbb4:	4b0f      	ldr	r3, [pc, #60]	; (800fbf4 <xTaskResumeAll+0x134>)
 800fbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbc4:	f000 feb0 	bl	8010928 <vPortExitCritical>

	return xAlreadyYielded;
 800fbc8:	68bb      	ldr	r3, [r7, #8]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	200005e8 	.word	0x200005e8
 800fbd8:	200005c0 	.word	0x200005c0
 800fbdc:	20000580 	.word	0x20000580
 800fbe0:	200005c8 	.word	0x200005c8
 800fbe4:	200004c4 	.word	0x200004c4
 800fbe8:	200004c0 	.word	0x200004c0
 800fbec:	200005d4 	.word	0x200005d4
 800fbf0:	200005d0 	.word	0x200005d0
 800fbf4:	e000ed04 	.word	0xe000ed04

0800fbf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbfe:	4b05      	ldr	r3, [pc, #20]	; (800fc14 <xTaskGetTickCount+0x1c>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc04:	687b      	ldr	r3, [r7, #4]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	200005c4 	.word	0x200005c4

0800fc18 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc1e:	f000 ff31 	bl	8010a84 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fc22:	2300      	movs	r3, #0
 800fc24:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fc26:	4b04      	ldr	r3, [pc, #16]	; (800fc38 <xTaskGetTickCountFromISR+0x20>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc2c:	683b      	ldr	r3, [r7, #0]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	200005c4 	.word	0x200005c4

0800fc3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc42:	2300      	movs	r3, #0
 800fc44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc46:	4b4e      	ldr	r3, [pc, #312]	; (800fd80 <xTaskIncrementTick+0x144>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f040 8087 	bne.w	800fd5e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc50:	4b4c      	ldr	r3, [pc, #304]	; (800fd84 <xTaskIncrementTick+0x148>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3301      	adds	r3, #1
 800fc56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc58:	4a4a      	ldr	r2, [pc, #296]	; (800fd84 <xTaskIncrementTick+0x148>)
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d11f      	bne.n	800fca4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc64:	4b48      	ldr	r3, [pc, #288]	; (800fd88 <xTaskIncrementTick+0x14c>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d009      	beq.n	800fc82 <xTaskIncrementTick+0x46>
 800fc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	e7fe      	b.n	800fc80 <xTaskIncrementTick+0x44>
 800fc82:	4b41      	ldr	r3, [pc, #260]	; (800fd88 <xTaskIncrementTick+0x14c>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	60fb      	str	r3, [r7, #12]
 800fc88:	4b40      	ldr	r3, [pc, #256]	; (800fd8c <xTaskIncrementTick+0x150>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a3e      	ldr	r2, [pc, #248]	; (800fd88 <xTaskIncrementTick+0x14c>)
 800fc8e:	6013      	str	r3, [r2, #0]
 800fc90:	4a3e      	ldr	r2, [pc, #248]	; (800fd8c <xTaskIncrementTick+0x150>)
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6013      	str	r3, [r2, #0]
 800fc96:	4b3e      	ldr	r3, [pc, #248]	; (800fd90 <xTaskIncrementTick+0x154>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	4a3c      	ldr	r2, [pc, #240]	; (800fd90 <xTaskIncrementTick+0x154>)
 800fc9e:	6013      	str	r3, [r2, #0]
 800fca0:	f000 fa98 	bl	80101d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fca4:	4b3b      	ldr	r3, [pc, #236]	; (800fd94 <xTaskIncrementTick+0x158>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	693a      	ldr	r2, [r7, #16]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d348      	bcc.n	800fd40 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcae:	4b36      	ldr	r3, [pc, #216]	; (800fd88 <xTaskIncrementTick+0x14c>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d104      	bne.n	800fcc2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcb8:	4b36      	ldr	r3, [pc, #216]	; (800fd94 <xTaskIncrementTick+0x158>)
 800fcba:	f04f 32ff 	mov.w	r2, #4294967295
 800fcbe:	601a      	str	r2, [r3, #0]
					break;
 800fcc0:	e03e      	b.n	800fd40 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcc2:	4b31      	ldr	r3, [pc, #196]	; (800fd88 <xTaskIncrementTick+0x14c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fcd2:	693a      	ldr	r2, [r7, #16]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d203      	bcs.n	800fce2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fcda:	4a2e      	ldr	r2, [pc, #184]	; (800fd94 <xTaskIncrementTick+0x158>)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fce0:	e02e      	b.n	800fd40 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	3304      	adds	r3, #4
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fe fd68 	bl	800e7bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d004      	beq.n	800fcfe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	3318      	adds	r3, #24
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fe fd5f 	bl	800e7bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd02:	2201      	movs	r2, #1
 800fd04:	409a      	lsls	r2, r3
 800fd06:	4b24      	ldr	r3, [pc, #144]	; (800fd98 <xTaskIncrementTick+0x15c>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	4a22      	ldr	r2, [pc, #136]	; (800fd98 <xTaskIncrementTick+0x15c>)
 800fd0e:	6013      	str	r3, [r2, #0]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd14:	4613      	mov	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	4a1f      	ldr	r2, [pc, #124]	; (800fd9c <xTaskIncrementTick+0x160>)
 800fd1e:	441a      	add	r2, r3
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	3304      	adds	r3, #4
 800fd24:	4619      	mov	r1, r3
 800fd26:	4610      	mov	r0, r2
 800fd28:	f7fe fceb 	bl	800e702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd30:	4b1b      	ldr	r3, [pc, #108]	; (800fda0 <xTaskIncrementTick+0x164>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d3b9      	bcc.n	800fcae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd3e:	e7b6      	b.n	800fcae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd40:	4b17      	ldr	r3, [pc, #92]	; (800fda0 <xTaskIncrementTick+0x164>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd46:	4915      	ldr	r1, [pc, #84]	; (800fd9c <xTaskIncrementTick+0x160>)
 800fd48:	4613      	mov	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	4413      	add	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	440b      	add	r3, r1
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d907      	bls.n	800fd68 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	617b      	str	r3, [r7, #20]
 800fd5c:	e004      	b.n	800fd68 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fd5e:	4b11      	ldr	r3, [pc, #68]	; (800fda4 <xTaskIncrementTick+0x168>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	3301      	adds	r3, #1
 800fd64:	4a0f      	ldr	r2, [pc, #60]	; (800fda4 <xTaskIncrementTick+0x168>)
 800fd66:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fd68:	4b0f      	ldr	r3, [pc, #60]	; (800fda8 <xTaskIncrementTick+0x16c>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d001      	beq.n	800fd74 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800fd70:	2301      	movs	r3, #1
 800fd72:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fd74:	697b      	ldr	r3, [r7, #20]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	200005e8 	.word	0x200005e8
 800fd84:	200005c4 	.word	0x200005c4
 800fd88:	20000578 	.word	0x20000578
 800fd8c:	2000057c 	.word	0x2000057c
 800fd90:	200005d8 	.word	0x200005d8
 800fd94:	200005e0 	.word	0x200005e0
 800fd98:	200005c8 	.word	0x200005c8
 800fd9c:	200004c4 	.word	0x200004c4
 800fda0:	200004c0 	.word	0x200004c0
 800fda4:	200005d0 	.word	0x200005d0
 800fda8:	200005d4 	.word	0x200005d4

0800fdac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdac:	b480      	push	{r7}
 800fdae:	b087      	sub	sp, #28
 800fdb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdb2:	4b26      	ldr	r3, [pc, #152]	; (800fe4c <vTaskSwitchContext+0xa0>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d003      	beq.n	800fdc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdba:	4b25      	ldr	r3, [pc, #148]	; (800fe50 <vTaskSwitchContext+0xa4>)
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fdc0:	e03e      	b.n	800fe40 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800fdc2:	4b23      	ldr	r3, [pc, #140]	; (800fe50 <vTaskSwitchContext+0xa4>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc8:	4b22      	ldr	r3, [pc, #136]	; (800fe54 <vTaskSwitchContext+0xa8>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	fab3 f383 	clz	r3, r3
 800fdd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fdd6:	7afb      	ldrb	r3, [r7, #11]
 800fdd8:	f1c3 031f 	rsb	r3, r3, #31
 800fddc:	617b      	str	r3, [r7, #20]
 800fdde:	491e      	ldr	r1, [pc, #120]	; (800fe58 <vTaskSwitchContext+0xac>)
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	4613      	mov	r3, r2
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	440b      	add	r3, r1
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d109      	bne.n	800fe06 <vTaskSwitchContext+0x5a>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	607b      	str	r3, [r7, #4]
 800fe04:	e7fe      	b.n	800fe04 <vTaskSwitchContext+0x58>
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	009b      	lsls	r3, r3, #2
 800fe0c:	4413      	add	r3, r2
 800fe0e:	009b      	lsls	r3, r3, #2
 800fe10:	4a11      	ldr	r2, [pc, #68]	; (800fe58 <vTaskSwitchContext+0xac>)
 800fe12:	4413      	add	r3, r2
 800fe14:	613b      	str	r3, [r7, #16]
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	685a      	ldr	r2, [r3, #4]
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	605a      	str	r2, [r3, #4]
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	685a      	ldr	r2, [r3, #4]
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	3308      	adds	r3, #8
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d104      	bne.n	800fe36 <vTaskSwitchContext+0x8a>
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	685a      	ldr	r2, [r3, #4]
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	605a      	str	r2, [r3, #4]
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	4a07      	ldr	r2, [pc, #28]	; (800fe5c <vTaskSwitchContext+0xb0>)
 800fe3e:	6013      	str	r3, [r2, #0]
}
 800fe40:	bf00      	nop
 800fe42:	371c      	adds	r7, #28
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr
 800fe4c:	200005e8 	.word	0x200005e8
 800fe50:	200005d4 	.word	0x200005d4
 800fe54:	200005c8 	.word	0x200005c8
 800fe58:	200004c4 	.word	0x200004c4
 800fe5c:	200004c0 	.word	0x200004c0

0800fe60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d109      	bne.n	800fe84 <vTaskPlaceOnEventList+0x24>
 800fe70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe74:	f383 8811 	msr	BASEPRI, r3
 800fe78:	f3bf 8f6f 	isb	sy
 800fe7c:	f3bf 8f4f 	dsb	sy
 800fe80:	60fb      	str	r3, [r7, #12]
 800fe82:	e7fe      	b.n	800fe82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe84:	4b07      	ldr	r3, [pc, #28]	; (800fea4 <vTaskPlaceOnEventList+0x44>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	3318      	adds	r3, #24
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7fe fc5c 	bl	800e74a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe92:	2101      	movs	r1, #1
 800fe94:	6838      	ldr	r0, [r7, #0]
 800fe96:	f000 fb8b 	bl	80105b0 <prvAddCurrentTaskToDelayedList>
}
 800fe9a:	bf00      	nop
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	200004c0 	.word	0x200004c0

0800fea8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b086      	sub	sp, #24
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	68db      	ldr	r3, [r3, #12]
 800feb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d109      	bne.n	800fed2 <xTaskRemoveFromEventList+0x2a>
 800febe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec2:	f383 8811 	msr	BASEPRI, r3
 800fec6:	f3bf 8f6f 	isb	sy
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	60fb      	str	r3, [r7, #12]
 800fed0:	e7fe      	b.n	800fed0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	3318      	adds	r3, #24
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fe fc70 	bl	800e7bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fedc:	4b1d      	ldr	r3, [pc, #116]	; (800ff54 <xTaskRemoveFromEventList+0xac>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d11c      	bne.n	800ff1e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	3304      	adds	r3, #4
 800fee8:	4618      	mov	r0, r3
 800feea:	f7fe fc67 	bl	800e7bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef2:	2201      	movs	r2, #1
 800fef4:	409a      	lsls	r2, r3
 800fef6:	4b18      	ldr	r3, [pc, #96]	; (800ff58 <xTaskRemoveFromEventList+0xb0>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4313      	orrs	r3, r2
 800fefc:	4a16      	ldr	r2, [pc, #88]	; (800ff58 <xTaskRemoveFromEventList+0xb0>)
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff04:	4613      	mov	r3, r2
 800ff06:	009b      	lsls	r3, r3, #2
 800ff08:	4413      	add	r3, r2
 800ff0a:	009b      	lsls	r3, r3, #2
 800ff0c:	4a13      	ldr	r2, [pc, #76]	; (800ff5c <xTaskRemoveFromEventList+0xb4>)
 800ff0e:	441a      	add	r2, r3
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	3304      	adds	r3, #4
 800ff14:	4619      	mov	r1, r3
 800ff16:	4610      	mov	r0, r2
 800ff18:	f7fe fbf3 	bl	800e702 <vListInsertEnd>
 800ff1c:	e005      	b.n	800ff2a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	3318      	adds	r3, #24
 800ff22:	4619      	mov	r1, r3
 800ff24:	480e      	ldr	r0, [pc, #56]	; (800ff60 <xTaskRemoveFromEventList+0xb8>)
 800ff26:	f7fe fbec 	bl	800e702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff2e:	4b0d      	ldr	r3, [pc, #52]	; (800ff64 <xTaskRemoveFromEventList+0xbc>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d905      	bls.n	800ff44 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff3c:	4b0a      	ldr	r3, [pc, #40]	; (800ff68 <xTaskRemoveFromEventList+0xc0>)
 800ff3e:	2201      	movs	r2, #1
 800ff40:	601a      	str	r2, [r3, #0]
 800ff42:	e001      	b.n	800ff48 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ff44:	2300      	movs	r3, #0
 800ff46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff48:	697b      	ldr	r3, [r7, #20]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3718      	adds	r7, #24
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	200005e8 	.word	0x200005e8
 800ff58:	200005c8 	.word	0x200005c8
 800ff5c:	200004c4 	.word	0x200004c4
 800ff60:	20000580 	.word	0x20000580
 800ff64:	200004c0 	.word	0x200004c0
 800ff68:	200005d4 	.word	0x200005d4

0800ff6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff74:	4b06      	ldr	r3, [pc, #24]	; (800ff90 <vTaskInternalSetTimeOutState+0x24>)
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff7c:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <vTaskInternalSetTimeOutState+0x28>)
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	605a      	str	r2, [r3, #4]
}
 800ff84:	bf00      	nop
 800ff86:	370c      	adds	r7, #12
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	200005d8 	.word	0x200005d8
 800ff94:	200005c4 	.word	0x200005c4

0800ff98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b088      	sub	sp, #32
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d109      	bne.n	800ffbc <xTaskCheckForTimeOut+0x24>
 800ffa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffac:	f383 8811 	msr	BASEPRI, r3
 800ffb0:	f3bf 8f6f 	isb	sy
 800ffb4:	f3bf 8f4f 	dsb	sy
 800ffb8:	613b      	str	r3, [r7, #16]
 800ffba:	e7fe      	b.n	800ffba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d109      	bne.n	800ffd6 <xTaskCheckForTimeOut+0x3e>
 800ffc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	60fb      	str	r3, [r7, #12]
 800ffd4:	e7fe      	b.n	800ffd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ffd6:	f000 fc79 	bl	80108cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ffda:	4b1d      	ldr	r3, [pc, #116]	; (8010050 <xTaskCheckForTimeOut+0xb8>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff2:	d102      	bne.n	800fffa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fff4:	2300      	movs	r3, #0
 800fff6:	61fb      	str	r3, [r7, #28]
 800fff8:	e023      	b.n	8010042 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	4b15      	ldr	r3, [pc, #84]	; (8010054 <xTaskCheckForTimeOut+0xbc>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	429a      	cmp	r2, r3
 8010004:	d007      	beq.n	8010016 <xTaskCheckForTimeOut+0x7e>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	69ba      	ldr	r2, [r7, #24]
 801000c:	429a      	cmp	r2, r3
 801000e:	d302      	bcc.n	8010016 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010010:	2301      	movs	r3, #1
 8010012:	61fb      	str	r3, [r7, #28]
 8010014:	e015      	b.n	8010042 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	697a      	ldr	r2, [r7, #20]
 801001c:	429a      	cmp	r2, r3
 801001e:	d20b      	bcs.n	8010038 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	1ad2      	subs	r2, r2, r3
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff ff9d 	bl	800ff6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010032:	2300      	movs	r3, #0
 8010034:	61fb      	str	r3, [r7, #28]
 8010036:	e004      	b.n	8010042 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	2200      	movs	r2, #0
 801003c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801003e:	2301      	movs	r3, #1
 8010040:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010042:	f000 fc71 	bl	8010928 <vPortExitCritical>

	return xReturn;
 8010046:	69fb      	ldr	r3, [r7, #28]
}
 8010048:	4618      	mov	r0, r3
 801004a:	3720      	adds	r7, #32
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	200005c4 	.word	0x200005c4
 8010054:	200005d8 	.word	0x200005d8

08010058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010058:	b480      	push	{r7}
 801005a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801005c:	4b03      	ldr	r3, [pc, #12]	; (801006c <vTaskMissedYield+0x14>)
 801005e:	2201      	movs	r2, #1
 8010060:	601a      	str	r2, [r3, #0]
}
 8010062:	bf00      	nop
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	200005d4 	.word	0x200005d4

08010070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010078:	f000 f852 	bl	8010120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801007c:	4b06      	ldr	r3, [pc, #24]	; (8010098 <prvIdleTask+0x28>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b01      	cmp	r3, #1
 8010082:	d9f9      	bls.n	8010078 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010084:	4b05      	ldr	r3, [pc, #20]	; (801009c <prvIdleTask+0x2c>)
 8010086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010094:	e7f0      	b.n	8010078 <prvIdleTask+0x8>
 8010096:	bf00      	nop
 8010098:	200004c4 	.word	0x200004c4
 801009c:	e000ed04 	.word	0xe000ed04

080100a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100a6:	2300      	movs	r3, #0
 80100a8:	607b      	str	r3, [r7, #4]
 80100aa:	e00c      	b.n	80100c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	4613      	mov	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	4413      	add	r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	4a12      	ldr	r2, [pc, #72]	; (8010100 <prvInitialiseTaskLists+0x60>)
 80100b8:	4413      	add	r3, r2
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7fe faf4 	bl	800e6a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	3301      	adds	r3, #1
 80100c4:	607b      	str	r3, [r7, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2b06      	cmp	r3, #6
 80100ca:	d9ef      	bls.n	80100ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80100cc:	480d      	ldr	r0, [pc, #52]	; (8010104 <prvInitialiseTaskLists+0x64>)
 80100ce:	f7fe faeb 	bl	800e6a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80100d2:	480d      	ldr	r0, [pc, #52]	; (8010108 <prvInitialiseTaskLists+0x68>)
 80100d4:	f7fe fae8 	bl	800e6a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80100d8:	480c      	ldr	r0, [pc, #48]	; (801010c <prvInitialiseTaskLists+0x6c>)
 80100da:	f7fe fae5 	bl	800e6a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80100de:	480c      	ldr	r0, [pc, #48]	; (8010110 <prvInitialiseTaskLists+0x70>)
 80100e0:	f7fe fae2 	bl	800e6a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80100e4:	480b      	ldr	r0, [pc, #44]	; (8010114 <prvInitialiseTaskLists+0x74>)
 80100e6:	f7fe fadf 	bl	800e6a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80100ea:	4b0b      	ldr	r3, [pc, #44]	; (8010118 <prvInitialiseTaskLists+0x78>)
 80100ec:	4a05      	ldr	r2, [pc, #20]	; (8010104 <prvInitialiseTaskLists+0x64>)
 80100ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80100f0:	4b0a      	ldr	r3, [pc, #40]	; (801011c <prvInitialiseTaskLists+0x7c>)
 80100f2:	4a05      	ldr	r2, [pc, #20]	; (8010108 <prvInitialiseTaskLists+0x68>)
 80100f4:	601a      	str	r2, [r3, #0]
}
 80100f6:	bf00      	nop
 80100f8:	3708      	adds	r7, #8
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop
 8010100:	200004c4 	.word	0x200004c4
 8010104:	20000550 	.word	0x20000550
 8010108:	20000564 	.word	0x20000564
 801010c:	20000580 	.word	0x20000580
 8010110:	20000594 	.word	0x20000594
 8010114:	200005ac 	.word	0x200005ac
 8010118:	20000578 	.word	0x20000578
 801011c:	2000057c 	.word	0x2000057c

08010120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010126:	e019      	b.n	801015c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010128:	f000 fbd0 	bl	80108cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801012c:	4b0f      	ldr	r3, [pc, #60]	; (801016c <prvCheckTasksWaitingTermination+0x4c>)
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	3304      	adds	r3, #4
 8010138:	4618      	mov	r0, r3
 801013a:	f7fe fb3f 	bl	800e7bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801013e:	4b0c      	ldr	r3, [pc, #48]	; (8010170 <prvCheckTasksWaitingTermination+0x50>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	3b01      	subs	r3, #1
 8010144:	4a0a      	ldr	r2, [pc, #40]	; (8010170 <prvCheckTasksWaitingTermination+0x50>)
 8010146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010148:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <prvCheckTasksWaitingTermination+0x54>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	3b01      	subs	r3, #1
 801014e:	4a09      	ldr	r2, [pc, #36]	; (8010174 <prvCheckTasksWaitingTermination+0x54>)
 8010150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010152:	f000 fbe9 	bl	8010928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 f80e 	bl	8010178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801015c:	4b05      	ldr	r3, [pc, #20]	; (8010174 <prvCheckTasksWaitingTermination+0x54>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d1e1      	bne.n	8010128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20000594 	.word	0x20000594
 8010170:	200005c0 	.word	0x200005c0
 8010174:	200005a8 	.word	0x200005a8

08010178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8010186:	2b00      	cmp	r3, #0
 8010188:	d108      	bne.n	801019c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018e:	4618      	mov	r0, r3
 8010190:	f000 fd78 	bl	8010c84 <vPortFree>
				vPortFree( pxTCB );
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fd75 	bl	8010c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801019a:	e017      	b.n	80101cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d103      	bne.n	80101ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 fd6c 	bl	8010c84 <vPortFree>
	}
 80101ac:	e00e      	b.n	80101cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d009      	beq.n	80101cc <prvDeleteTCB+0x54>
 80101b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101bc:	f383 8811 	msr	BASEPRI, r3
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	f3bf 8f4f 	dsb	sy
 80101c8:	60fb      	str	r3, [r7, #12]
 80101ca:	e7fe      	b.n	80101ca <prvDeleteTCB+0x52>
	}
 80101cc:	bf00      	nop
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101da:	4b0c      	ldr	r3, [pc, #48]	; (801020c <prvResetNextTaskUnblockTime+0x38>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d104      	bne.n	80101ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80101e4:	4b0a      	ldr	r3, [pc, #40]	; (8010210 <prvResetNextTaskUnblockTime+0x3c>)
 80101e6:	f04f 32ff 	mov.w	r2, #4294967295
 80101ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80101ec:	e008      	b.n	8010200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ee:	4b07      	ldr	r3, [pc, #28]	; (801020c <prvResetNextTaskUnblockTime+0x38>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	4a04      	ldr	r2, [pc, #16]	; (8010210 <prvResetNextTaskUnblockTime+0x3c>)
 80101fe:	6013      	str	r3, [r2, #0]
}
 8010200:	bf00      	nop
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr
 801020c:	20000578 	.word	0x20000578
 8010210:	200005e0 	.word	0x200005e0

08010214 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010214:	b480      	push	{r7}
 8010216:	b083      	sub	sp, #12
 8010218:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801021a:	4b0b      	ldr	r3, [pc, #44]	; (8010248 <xTaskGetSchedulerState+0x34>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d102      	bne.n	8010228 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010222:	2301      	movs	r3, #1
 8010224:	607b      	str	r3, [r7, #4]
 8010226:	e008      	b.n	801023a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010228:	4b08      	ldr	r3, [pc, #32]	; (801024c <xTaskGetSchedulerState+0x38>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d102      	bne.n	8010236 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010230:	2302      	movs	r3, #2
 8010232:	607b      	str	r3, [r7, #4]
 8010234:	e001      	b.n	801023a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010236:	2300      	movs	r3, #0
 8010238:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801023a:	687b      	ldr	r3, [r7, #4]
	}
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	200005cc 	.word	0x200005cc
 801024c:	200005e8 	.word	0x200005e8

08010250 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801025c:	2300      	movs	r3, #0
 801025e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d069      	beq.n	801033a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801026a:	4b36      	ldr	r3, [pc, #216]	; (8010344 <xTaskPriorityInherit+0xf4>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	429a      	cmp	r2, r3
 8010272:	d259      	bcs.n	8010328 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	699b      	ldr	r3, [r3, #24]
 8010278:	2b00      	cmp	r3, #0
 801027a:	db06      	blt.n	801028a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801027c:	4b31      	ldr	r3, [pc, #196]	; (8010344 <xTaskPriorityInherit+0xf4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010282:	f1c3 0207 	rsb	r2, r3, #7
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	6959      	ldr	r1, [r3, #20]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010292:	4613      	mov	r3, r2
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4413      	add	r3, r2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	4a2b      	ldr	r2, [pc, #172]	; (8010348 <xTaskPriorityInherit+0xf8>)
 801029c:	4413      	add	r3, r2
 801029e:	4299      	cmp	r1, r3
 80102a0:	d13a      	bne.n	8010318 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	3304      	adds	r3, #4
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fe fa88 	bl	800e7bc <uxListRemove>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d115      	bne.n	80102de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b6:	4924      	ldr	r1, [pc, #144]	; (8010348 <xTaskPriorityInherit+0xf8>)
 80102b8:	4613      	mov	r3, r2
 80102ba:	009b      	lsls	r3, r3, #2
 80102bc:	4413      	add	r3, r2
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	440b      	add	r3, r1
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10a      	bne.n	80102de <xTaskPriorityInherit+0x8e>
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102cc:	2201      	movs	r2, #1
 80102ce:	fa02 f303 	lsl.w	r3, r2, r3
 80102d2:	43da      	mvns	r2, r3
 80102d4:	4b1d      	ldr	r3, [pc, #116]	; (801034c <xTaskPriorityInherit+0xfc>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4013      	ands	r3, r2
 80102da:	4a1c      	ldr	r2, [pc, #112]	; (801034c <xTaskPriorityInherit+0xfc>)
 80102dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102de:	4b19      	ldr	r3, [pc, #100]	; (8010344 <xTaskPriorityInherit+0xf4>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ec:	2201      	movs	r2, #1
 80102ee:	409a      	lsls	r2, r3
 80102f0:	4b16      	ldr	r3, [pc, #88]	; (801034c <xTaskPriorityInherit+0xfc>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	4a15      	ldr	r2, [pc, #84]	; (801034c <xTaskPriorityInherit+0xfc>)
 80102f8:	6013      	str	r3, [r2, #0]
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fe:	4613      	mov	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4413      	add	r3, r2
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4a10      	ldr	r2, [pc, #64]	; (8010348 <xTaskPriorityInherit+0xf8>)
 8010308:	441a      	add	r2, r3
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	3304      	adds	r3, #4
 801030e:	4619      	mov	r1, r3
 8010310:	4610      	mov	r0, r2
 8010312:	f7fe f9f6 	bl	800e702 <vListInsertEnd>
 8010316:	e004      	b.n	8010322 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010318:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <xTaskPriorityInherit+0xf4>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010322:	2301      	movs	r3, #1
 8010324:	60fb      	str	r3, [r7, #12]
 8010326:	e008      	b.n	801033a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801032c:	4b05      	ldr	r3, [pc, #20]	; (8010344 <xTaskPriorityInherit+0xf4>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010332:	429a      	cmp	r2, r3
 8010334:	d201      	bcs.n	801033a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010336:	2301      	movs	r3, #1
 8010338:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801033a:	68fb      	ldr	r3, [r7, #12]
	}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	200004c0 	.word	0x200004c0
 8010348:	200004c4 	.word	0x200004c4
 801034c:	200005c8 	.word	0x200005c8

08010350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d06c      	beq.n	8010440 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010366:	4b39      	ldr	r3, [pc, #228]	; (801044c <xTaskPriorityDisinherit+0xfc>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	693a      	ldr	r2, [r7, #16]
 801036c:	429a      	cmp	r2, r3
 801036e:	d009      	beq.n	8010384 <xTaskPriorityDisinherit+0x34>
 8010370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010374:	f383 8811 	msr	BASEPRI, r3
 8010378:	f3bf 8f6f 	isb	sy
 801037c:	f3bf 8f4f 	dsb	sy
 8010380:	60fb      	str	r3, [r7, #12]
 8010382:	e7fe      	b.n	8010382 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010388:	2b00      	cmp	r3, #0
 801038a:	d109      	bne.n	80103a0 <xTaskPriorityDisinherit+0x50>
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	60bb      	str	r3, [r7, #8]
 801039e:	e7fe      	b.n	801039e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103a4:	1e5a      	subs	r2, r3, #1
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d044      	beq.n	8010440 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d140      	bne.n	8010440 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	3304      	adds	r3, #4
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe f9fa 	bl	800e7bc <uxListRemove>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d115      	bne.n	80103fa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d2:	491f      	ldr	r1, [pc, #124]	; (8010450 <xTaskPriorityDisinherit+0x100>)
 80103d4:	4613      	mov	r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	4413      	add	r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	440b      	add	r3, r1
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10a      	bne.n	80103fa <xTaskPriorityDisinherit+0xaa>
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e8:	2201      	movs	r2, #1
 80103ea:	fa02 f303 	lsl.w	r3, r2, r3
 80103ee:	43da      	mvns	r2, r3
 80103f0:	4b18      	ldr	r3, [pc, #96]	; (8010454 <xTaskPriorityDisinherit+0x104>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	4013      	ands	r3, r2
 80103f6:	4a17      	ldr	r2, [pc, #92]	; (8010454 <xTaskPriorityDisinherit+0x104>)
 80103f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010406:	f1c3 0207 	rsb	r2, r3, #7
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010412:	2201      	movs	r2, #1
 8010414:	409a      	lsls	r2, r3
 8010416:	4b0f      	ldr	r3, [pc, #60]	; (8010454 <xTaskPriorityDisinherit+0x104>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4313      	orrs	r3, r2
 801041c:	4a0d      	ldr	r2, [pc, #52]	; (8010454 <xTaskPriorityDisinherit+0x104>)
 801041e:	6013      	str	r3, [r2, #0]
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010424:	4613      	mov	r3, r2
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	4413      	add	r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4a08      	ldr	r2, [pc, #32]	; (8010450 <xTaskPriorityDisinherit+0x100>)
 801042e:	441a      	add	r2, r3
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	3304      	adds	r3, #4
 8010434:	4619      	mov	r1, r3
 8010436:	4610      	mov	r0, r2
 8010438:	f7fe f963 	bl	800e702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801043c:	2301      	movs	r3, #1
 801043e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010440:	697b      	ldr	r3, [r7, #20]
	}
 8010442:	4618      	mov	r0, r3
 8010444:	3718      	adds	r7, #24
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	200004c0 	.word	0x200004c0
 8010450:	200004c4 	.word	0x200004c4
 8010454:	200005c8 	.word	0x200005c8

08010458 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010458:	b580      	push	{r7, lr}
 801045a:	b088      	sub	sp, #32
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010466:	2301      	movs	r3, #1
 8010468:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 8081 	beq.w	8010574 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010476:	2b00      	cmp	r3, #0
 8010478:	d109      	bne.n	801048e <vTaskPriorityDisinheritAfterTimeout+0x36>
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	60fb      	str	r3, [r7, #12]
 801048c:	e7fe      	b.n	801048c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010492:	683a      	ldr	r2, [r7, #0]
 8010494:	429a      	cmp	r2, r3
 8010496:	d902      	bls.n	801049e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	61fb      	str	r3, [r7, #28]
 801049c:	e002      	b.n	80104a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a8:	69fa      	ldr	r2, [r7, #28]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d062      	beq.n	8010574 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104b2:	697a      	ldr	r2, [r7, #20]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d15d      	bne.n	8010574 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104b8:	4b30      	ldr	r3, [pc, #192]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	69ba      	ldr	r2, [r7, #24]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d109      	bne.n	80104d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	60bb      	str	r3, [r7, #8]
 80104d4:	e7fe      	b.n	80104d4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	69fa      	ldr	r2, [r7, #28]
 80104e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	699b      	ldr	r3, [r3, #24]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	db04      	blt.n	80104f4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104ea:	69fb      	ldr	r3, [r7, #28]
 80104ec:	f1c3 0207 	rsb	r2, r3, #7
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	6959      	ldr	r1, [r3, #20]
 80104f8:	693a      	ldr	r2, [r7, #16]
 80104fa:	4613      	mov	r3, r2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4a1f      	ldr	r2, [pc, #124]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8010504:	4413      	add	r3, r2
 8010506:	4299      	cmp	r1, r3
 8010508:	d134      	bne.n	8010574 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	3304      	adds	r3, #4
 801050e:	4618      	mov	r0, r3
 8010510:	f7fe f954 	bl	800e7bc <uxListRemove>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d115      	bne.n	8010546 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801051e:	4918      	ldr	r1, [pc, #96]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8010520:	4613      	mov	r3, r2
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	4413      	add	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	440b      	add	r3, r1
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d10a      	bne.n	8010546 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8010530:	69bb      	ldr	r3, [r7, #24]
 8010532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010534:	2201      	movs	r2, #1
 8010536:	fa02 f303 	lsl.w	r3, r2, r3
 801053a:	43da      	mvns	r2, r3
 801053c:	4b11      	ldr	r3, [pc, #68]	; (8010584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4013      	ands	r3, r2
 8010542:	4a10      	ldr	r2, [pc, #64]	; (8010584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8010544:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054a:	2201      	movs	r2, #1
 801054c:	409a      	lsls	r2, r3
 801054e:	4b0d      	ldr	r3, [pc, #52]	; (8010584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	4313      	orrs	r3, r2
 8010554:	4a0b      	ldr	r2, [pc, #44]	; (8010584 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4a06      	ldr	r2, [pc, #24]	; (8010580 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8010566:	441a      	add	r2, r3
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	3304      	adds	r3, #4
 801056c:	4619      	mov	r1, r3
 801056e:	4610      	mov	r0, r2
 8010570:	f7fe f8c7 	bl	800e702 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010574:	bf00      	nop
 8010576:	3720      	adds	r7, #32
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	200004c0 	.word	0x200004c0
 8010580:	200004c4 	.word	0x200004c4
 8010584:	200005c8 	.word	0x200005c8

08010588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010588:	b480      	push	{r7}
 801058a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801058c:	4b07      	ldr	r3, [pc, #28]	; (80105ac <pvTaskIncrementMutexHeldCount+0x24>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d004      	beq.n	801059e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010594:	4b05      	ldr	r3, [pc, #20]	; (80105ac <pvTaskIncrementMutexHeldCount+0x24>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801059a:	3201      	adds	r2, #1
 801059c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801059e:	4b03      	ldr	r3, [pc, #12]	; (80105ac <pvTaskIncrementMutexHeldCount+0x24>)
 80105a0:	681b      	ldr	r3, [r3, #0]
	}
 80105a2:	4618      	mov	r0, r3
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr
 80105ac:	200004c0 	.word	0x200004c0

080105b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105ba:	4b29      	ldr	r3, [pc, #164]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105c0:	4b28      	ldr	r3, [pc, #160]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	3304      	adds	r3, #4
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fe f8f8 	bl	800e7bc <uxListRemove>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d10b      	bne.n	80105ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80105d2:	4b24      	ldr	r3, [pc, #144]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d8:	2201      	movs	r2, #1
 80105da:	fa02 f303 	lsl.w	r3, r2, r3
 80105de:	43da      	mvns	r2, r3
 80105e0:	4b21      	ldr	r3, [pc, #132]	; (8010668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4013      	ands	r3, r2
 80105e6:	4a20      	ldr	r2, [pc, #128]	; (8010668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f0:	d10a      	bne.n	8010608 <prvAddCurrentTaskToDelayedList+0x58>
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d007      	beq.n	8010608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105f8:	4b1a      	ldr	r3, [pc, #104]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3304      	adds	r3, #4
 80105fe:	4619      	mov	r1, r3
 8010600:	481a      	ldr	r0, [pc, #104]	; (801066c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010602:	f7fe f87e 	bl	800e702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010606:	e026      	b.n	8010656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4413      	add	r3, r2
 801060e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010610:	4b14      	ldr	r3, [pc, #80]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	68ba      	ldr	r2, [r7, #8]
 8010616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	429a      	cmp	r2, r3
 801061e:	d209      	bcs.n	8010634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010620:	4b13      	ldr	r3, [pc, #76]	; (8010670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	4b0f      	ldr	r3, [pc, #60]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	3304      	adds	r3, #4
 801062a:	4619      	mov	r1, r3
 801062c:	4610      	mov	r0, r2
 801062e:	f7fe f88c 	bl	800e74a <vListInsert>
}
 8010632:	e010      	b.n	8010656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010634:	4b0f      	ldr	r3, [pc, #60]	; (8010674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <prvAddCurrentTaskToDelayedList+0xb4>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	3304      	adds	r3, #4
 801063e:	4619      	mov	r1, r3
 8010640:	4610      	mov	r0, r2
 8010642:	f7fe f882 	bl	800e74a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010646:	4b0c      	ldr	r3, [pc, #48]	; (8010678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	68ba      	ldr	r2, [r7, #8]
 801064c:	429a      	cmp	r2, r3
 801064e:	d202      	bcs.n	8010656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010650:	4a09      	ldr	r2, [pc, #36]	; (8010678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	6013      	str	r3, [r2, #0]
}
 8010656:	bf00      	nop
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	200005c4 	.word	0x200005c4
 8010664:	200004c0 	.word	0x200004c0
 8010668:	200005c8 	.word	0x200005c8
 801066c:	200005ac 	.word	0x200005ac
 8010670:	2000057c 	.word	0x2000057c
 8010674:	20000578 	.word	0x20000578
 8010678:	200005e0 	.word	0x200005e0

0801067c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3b04      	subs	r3, #4
 801068c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	3b04      	subs	r3, #4
 801069a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	f023 0201 	bic.w	r2, r3, #1
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3b04      	subs	r3, #4
 80106aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106ac:	4a0c      	ldr	r2, [pc, #48]	; (80106e0 <pxPortInitialiseStack+0x64>)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	3b14      	subs	r3, #20
 80106b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3b04      	subs	r3, #4
 80106c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f06f 0202 	mvn.w	r2, #2
 80106ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	3b20      	subs	r3, #32
 80106d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80106d2:	68fb      	ldr	r3, [r7, #12]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	080106e5 	.word	0x080106e5

080106e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80106ee:	4b11      	ldr	r3, [pc, #68]	; (8010734 <prvTaskExitError+0x50>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f6:	d009      	beq.n	801070c <prvTaskExitError+0x28>
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	60fb      	str	r3, [r7, #12]
 801070a:	e7fe      	b.n	801070a <prvTaskExitError+0x26>
 801070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010710:	f383 8811 	msr	BASEPRI, r3
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801071e:	bf00      	nop
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d0fc      	beq.n	8010720 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010726:	bf00      	nop
 8010728:	3714      	adds	r7, #20
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	2000000c 	.word	0x2000000c
	...

08010740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010740:	4b07      	ldr	r3, [pc, #28]	; (8010760 <pxCurrentTCBConst2>)
 8010742:	6819      	ldr	r1, [r3, #0]
 8010744:	6808      	ldr	r0, [r1, #0]
 8010746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074a:	f380 8809 	msr	PSP, r0
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f04f 0000 	mov.w	r0, #0
 8010756:	f380 8811 	msr	BASEPRI, r0
 801075a:	4770      	bx	lr
 801075c:	f3af 8000 	nop.w

08010760 <pxCurrentTCBConst2>:
 8010760:	200004c0 	.word	0x200004c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010768:	4808      	ldr	r0, [pc, #32]	; (801078c <prvPortStartFirstTask+0x24>)
 801076a:	6800      	ldr	r0, [r0, #0]
 801076c:	6800      	ldr	r0, [r0, #0]
 801076e:	f380 8808 	msr	MSP, r0
 8010772:	f04f 0000 	mov.w	r0, #0
 8010776:	f380 8814 	msr	CONTROL, r0
 801077a:	b662      	cpsie	i
 801077c:	b661      	cpsie	f
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	df00      	svc	0
 8010788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801078a:	bf00      	nop
 801078c:	e000ed08 	.word	0xe000ed08

08010790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010796:	4b44      	ldr	r3, [pc, #272]	; (80108a8 <xPortStartScheduler+0x118>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a44      	ldr	r2, [pc, #272]	; (80108ac <xPortStartScheduler+0x11c>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d109      	bne.n	80107b4 <xPortStartScheduler+0x24>
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	613b      	str	r3, [r7, #16]
 80107b2:	e7fe      	b.n	80107b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80107b4:	4b3c      	ldr	r3, [pc, #240]	; (80108a8 <xPortStartScheduler+0x118>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	4a3d      	ldr	r2, [pc, #244]	; (80108b0 <xPortStartScheduler+0x120>)
 80107ba:	4293      	cmp	r3, r2
 80107bc:	d109      	bne.n	80107d2 <xPortStartScheduler+0x42>
 80107be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	60fb      	str	r3, [r7, #12]
 80107d0:	e7fe      	b.n	80107d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80107d2:	4b38      	ldr	r3, [pc, #224]	; (80108b4 <xPortStartScheduler+0x124>)
 80107d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	22ff      	movs	r2, #255	; 0xff
 80107e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80107ec:	78fb      	ldrb	r3, [r7, #3]
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80107f4:	b2da      	uxtb	r2, r3
 80107f6:	4b30      	ldr	r3, [pc, #192]	; (80108b8 <xPortStartScheduler+0x128>)
 80107f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80107fa:	4b30      	ldr	r3, [pc, #192]	; (80108bc <xPortStartScheduler+0x12c>)
 80107fc:	2207      	movs	r2, #7
 80107fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010800:	e009      	b.n	8010816 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010802:	4b2e      	ldr	r3, [pc, #184]	; (80108bc <xPortStartScheduler+0x12c>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	3b01      	subs	r3, #1
 8010808:	4a2c      	ldr	r2, [pc, #176]	; (80108bc <xPortStartScheduler+0x12c>)
 801080a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801080c:	78fb      	ldrb	r3, [r7, #3]
 801080e:	b2db      	uxtb	r3, r3
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	b2db      	uxtb	r3, r3
 8010814:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010816:	78fb      	ldrb	r3, [r7, #3]
 8010818:	b2db      	uxtb	r3, r3
 801081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801081e:	2b80      	cmp	r3, #128	; 0x80
 8010820:	d0ef      	beq.n	8010802 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010822:	4b26      	ldr	r3, [pc, #152]	; (80108bc <xPortStartScheduler+0x12c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f1c3 0307 	rsb	r3, r3, #7
 801082a:	2b04      	cmp	r3, #4
 801082c:	d009      	beq.n	8010842 <xPortStartScheduler+0xb2>
 801082e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	60bb      	str	r3, [r7, #8]
 8010840:	e7fe      	b.n	8010840 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010842:	4b1e      	ldr	r3, [pc, #120]	; (80108bc <xPortStartScheduler+0x12c>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	021b      	lsls	r3, r3, #8
 8010848:	4a1c      	ldr	r2, [pc, #112]	; (80108bc <xPortStartScheduler+0x12c>)
 801084a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801084c:	4b1b      	ldr	r3, [pc, #108]	; (80108bc <xPortStartScheduler+0x12c>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010854:	4a19      	ldr	r2, [pc, #100]	; (80108bc <xPortStartScheduler+0x12c>)
 8010856:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	b2da      	uxtb	r2, r3
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010860:	4b17      	ldr	r3, [pc, #92]	; (80108c0 <xPortStartScheduler+0x130>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a16      	ldr	r2, [pc, #88]	; (80108c0 <xPortStartScheduler+0x130>)
 8010866:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801086a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801086c:	4b14      	ldr	r3, [pc, #80]	; (80108c0 <xPortStartScheduler+0x130>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a13      	ldr	r2, [pc, #76]	; (80108c0 <xPortStartScheduler+0x130>)
 8010872:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010876:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010878:	f000 f8d6 	bl	8010a28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801087c:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <xPortStartScheduler+0x134>)
 801087e:	2200      	movs	r2, #0
 8010880:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010882:	f000 f8f5 	bl	8010a70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010886:	4b10      	ldr	r3, [pc, #64]	; (80108c8 <xPortStartScheduler+0x138>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4a0f      	ldr	r2, [pc, #60]	; (80108c8 <xPortStartScheduler+0x138>)
 801088c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010890:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010892:	f7ff ff69 	bl	8010768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010896:	f7ff fa89 	bl	800fdac <vTaskSwitchContext>
	prvTaskExitError();
 801089a:	f7ff ff23 	bl	80106e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3718      	adds	r7, #24
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	e000ed00 	.word	0xe000ed00
 80108ac:	410fc271 	.word	0x410fc271
 80108b0:	410fc270 	.word	0x410fc270
 80108b4:	e000e400 	.word	0xe000e400
 80108b8:	200005ec 	.word	0x200005ec
 80108bc:	200005f0 	.word	0x200005f0
 80108c0:	e000ed20 	.word	0xe000ed20
 80108c4:	2000000c 	.word	0x2000000c
 80108c8:	e000ef34 	.word	0xe000ef34

080108cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d6:	f383 8811 	msr	BASEPRI, r3
 80108da:	f3bf 8f6f 	isb	sy
 80108de:	f3bf 8f4f 	dsb	sy
 80108e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80108e4:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <vPortEnterCritical+0x54>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	3301      	adds	r3, #1
 80108ea:	4a0d      	ldr	r2, [pc, #52]	; (8010920 <vPortEnterCritical+0x54>)
 80108ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80108ee:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <vPortEnterCritical+0x54>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d10e      	bne.n	8010914 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80108f6:	4b0b      	ldr	r3, [pc, #44]	; (8010924 <vPortEnterCritical+0x58>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d009      	beq.n	8010914 <vPortEnterCritical+0x48>
 8010900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010904:	f383 8811 	msr	BASEPRI, r3
 8010908:	f3bf 8f6f 	isb	sy
 801090c:	f3bf 8f4f 	dsb	sy
 8010910:	603b      	str	r3, [r7, #0]
 8010912:	e7fe      	b.n	8010912 <vPortEnterCritical+0x46>
	}
}
 8010914:	bf00      	nop
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr
 8010920:	2000000c 	.word	0x2000000c
 8010924:	e000ed04 	.word	0xe000ed04

08010928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801092e:	4b11      	ldr	r3, [pc, #68]	; (8010974 <vPortExitCritical+0x4c>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d109      	bne.n	801094a <vPortExitCritical+0x22>
 8010936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093a:	f383 8811 	msr	BASEPRI, r3
 801093e:	f3bf 8f6f 	isb	sy
 8010942:	f3bf 8f4f 	dsb	sy
 8010946:	607b      	str	r3, [r7, #4]
 8010948:	e7fe      	b.n	8010948 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801094a:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <vPortExitCritical+0x4c>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	3b01      	subs	r3, #1
 8010950:	4a08      	ldr	r2, [pc, #32]	; (8010974 <vPortExitCritical+0x4c>)
 8010952:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010954:	4b07      	ldr	r3, [pc, #28]	; (8010974 <vPortExitCritical+0x4c>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d104      	bne.n	8010966 <vPortExitCritical+0x3e>
 801095c:	2300      	movs	r3, #0
 801095e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010966:	bf00      	nop
 8010968:	370c      	adds	r7, #12
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr
 8010972:	bf00      	nop
 8010974:	2000000c 	.word	0x2000000c
	...

08010980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010980:	f3ef 8009 	mrs	r0, PSP
 8010984:	f3bf 8f6f 	isb	sy
 8010988:	4b15      	ldr	r3, [pc, #84]	; (80109e0 <pxCurrentTCBConst>)
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	f01e 0f10 	tst.w	lr, #16
 8010990:	bf08      	it	eq
 8010992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099a:	6010      	str	r0, [r2, #0]
 801099c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80109a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80109a4:	f380 8811 	msr	BASEPRI, r0
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	f3bf 8f6f 	isb	sy
 80109b0:	f7ff f9fc 	bl	800fdac <vTaskSwitchContext>
 80109b4:	f04f 0000 	mov.w	r0, #0
 80109b8:	f380 8811 	msr	BASEPRI, r0
 80109bc:	bc09      	pop	{r0, r3}
 80109be:	6819      	ldr	r1, [r3, #0]
 80109c0:	6808      	ldr	r0, [r1, #0]
 80109c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c6:	f01e 0f10 	tst.w	lr, #16
 80109ca:	bf08      	it	eq
 80109cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80109d0:	f380 8809 	msr	PSP, r0
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	f3af 8000 	nop.w

080109e0 <pxCurrentTCBConst>:
 80109e0:	200004c0 	.word	0x200004c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80109e4:	bf00      	nop
 80109e6:	bf00      	nop

080109e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
	__asm volatile
 80109ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f2:	f383 8811 	msr	BASEPRI, r3
 80109f6:	f3bf 8f6f 	isb	sy
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a00:	f7ff f91c 	bl	800fc3c <xTaskIncrementTick>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d003      	beq.n	8010a12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a0a:	4b06      	ldr	r3, [pc, #24]	; (8010a24 <SysTick_Handler+0x3c>)
 8010a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	2300      	movs	r3, #0
 8010a14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a1c:	bf00      	nop
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	e000ed04 	.word	0xe000ed04

08010a28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a28:	b480      	push	{r7}
 8010a2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a2c:	4b0b      	ldr	r3, [pc, #44]	; (8010a5c <vPortSetupTimerInterrupt+0x34>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a32:	4b0b      	ldr	r3, [pc, #44]	; (8010a60 <vPortSetupTimerInterrupt+0x38>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a38:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <vPortSetupTimerInterrupt+0x3c>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4a0a      	ldr	r2, [pc, #40]	; (8010a68 <vPortSetupTimerInterrupt+0x40>)
 8010a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a42:	099b      	lsrs	r3, r3, #6
 8010a44:	4a09      	ldr	r2, [pc, #36]	; (8010a6c <vPortSetupTimerInterrupt+0x44>)
 8010a46:	3b01      	subs	r3, #1
 8010a48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010a4a:	4b04      	ldr	r3, [pc, #16]	; (8010a5c <vPortSetupTimerInterrupt+0x34>)
 8010a4c:	2207      	movs	r2, #7
 8010a4e:	601a      	str	r2, [r3, #0]
}
 8010a50:	bf00      	nop
 8010a52:	46bd      	mov	sp, r7
 8010a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop
 8010a5c:	e000e010 	.word	0xe000e010
 8010a60:	e000e018 	.word	0xe000e018
 8010a64:	20000000 	.word	0x20000000
 8010a68:	10624dd3 	.word	0x10624dd3
 8010a6c:	e000e014 	.word	0xe000e014

08010a70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010a80 <vPortEnableVFP+0x10>
 8010a74:	6801      	ldr	r1, [r0, #0]
 8010a76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010a7a:	6001      	str	r1, [r0, #0]
 8010a7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a7e:	bf00      	nop
 8010a80:	e000ed88 	.word	0xe000ed88

08010a84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010a8a:	f3ef 8305 	mrs	r3, IPSR
 8010a8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b0f      	cmp	r3, #15
 8010a94:	d913      	bls.n	8010abe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010a96:	4a16      	ldr	r2, [pc, #88]	; (8010af0 <vPortValidateInterruptPriority+0x6c>)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	4413      	add	r3, r2
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010aa0:	4b14      	ldr	r3, [pc, #80]	; (8010af4 <vPortValidateInterruptPriority+0x70>)
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	7afa      	ldrb	r2, [r7, #11]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d209      	bcs.n	8010abe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	607b      	str	r3, [r7, #4]
 8010abc:	e7fe      	b.n	8010abc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010abe:	4b0e      	ldr	r3, [pc, #56]	; (8010af8 <vPortValidateInterruptPriority+0x74>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ac6:	4b0d      	ldr	r3, [pc, #52]	; (8010afc <vPortValidateInterruptPriority+0x78>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d909      	bls.n	8010ae2 <vPortValidateInterruptPriority+0x5e>
 8010ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	603b      	str	r3, [r7, #0]
 8010ae0:	e7fe      	b.n	8010ae0 <vPortValidateInterruptPriority+0x5c>
	}
 8010ae2:	bf00      	nop
 8010ae4:	3714      	adds	r7, #20
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	e000e3f0 	.word	0xe000e3f0
 8010af4:	200005ec 	.word	0x200005ec
 8010af8:	e000ed0c 	.word	0xe000ed0c
 8010afc:	200005f0 	.word	0x200005f0

08010b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b08a      	sub	sp, #40	; 0x28
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b0c:	f7fe ffca 	bl	800faa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b10:	4b57      	ldr	r3, [pc, #348]	; (8010c70 <pvPortMalloc+0x170>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d101      	bne.n	8010b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b18:	f000 f90c 	bl	8010d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b1c:	4b55      	ldr	r3, [pc, #340]	; (8010c74 <pvPortMalloc+0x174>)
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	4013      	ands	r3, r2
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f040 808c 	bne.w	8010c42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d01c      	beq.n	8010b6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010b30:	2208      	movs	r2, #8
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4413      	add	r3, r2
 8010b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f003 0307 	and.w	r3, r3, #7
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d013      	beq.n	8010b6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f023 0307 	bic.w	r3, r3, #7
 8010b48:	3308      	adds	r3, #8
 8010b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f003 0307 	and.w	r3, r3, #7
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d009      	beq.n	8010b6a <pvPortMalloc+0x6a>
 8010b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5a:	f383 8811 	msr	BASEPRI, r3
 8010b5e:	f3bf 8f6f 	isb	sy
 8010b62:	f3bf 8f4f 	dsb	sy
 8010b66:	617b      	str	r3, [r7, #20]
 8010b68:	e7fe      	b.n	8010b68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d068      	beq.n	8010c42 <pvPortMalloc+0x142>
 8010b70:	4b41      	ldr	r3, [pc, #260]	; (8010c78 <pvPortMalloc+0x178>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d863      	bhi.n	8010c42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b7a:	4b40      	ldr	r3, [pc, #256]	; (8010c7c <pvPortMalloc+0x17c>)
 8010b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010b7e:	4b3f      	ldr	r3, [pc, #252]	; (8010c7c <pvPortMalloc+0x17c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b84:	e004      	b.n	8010b90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d903      	bls.n	8010ba2 <pvPortMalloc+0xa2>
 8010b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d1f1      	bne.n	8010b86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ba2:	4b33      	ldr	r3, [pc, #204]	; (8010c70 <pvPortMalloc+0x170>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d04a      	beq.n	8010c42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010bac:	6a3b      	ldr	r3, [r7, #32]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2208      	movs	r2, #8
 8010bb2:	4413      	add	r3, r2
 8010bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	1ad2      	subs	r2, r2, r3
 8010bc6:	2308      	movs	r3, #8
 8010bc8:	005b      	lsls	r3, r3, #1
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d91e      	bls.n	8010c0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	f003 0307 	and.w	r3, r3, #7
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d009      	beq.n	8010bf4 <pvPortMalloc+0xf4>
 8010be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be4:	f383 8811 	msr	BASEPRI, r3
 8010be8:	f3bf 8f6f 	isb	sy
 8010bec:	f3bf 8f4f 	dsb	sy
 8010bf0:	613b      	str	r3, [r7, #16]
 8010bf2:	e7fe      	b.n	8010bf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	685a      	ldr	r2, [r3, #4]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	1ad2      	subs	r2, r2, r3
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c06:	69b8      	ldr	r0, [r7, #24]
 8010c08:	f000 f8f6 	bl	8010df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c0c:	4b1a      	ldr	r3, [pc, #104]	; (8010c78 <pvPortMalloc+0x178>)
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	4a18      	ldr	r2, [pc, #96]	; (8010c78 <pvPortMalloc+0x178>)
 8010c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c1a:	4b17      	ldr	r3, [pc, #92]	; (8010c78 <pvPortMalloc+0x178>)
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	4b18      	ldr	r3, [pc, #96]	; (8010c80 <pvPortMalloc+0x180>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d203      	bcs.n	8010c2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c26:	4b14      	ldr	r3, [pc, #80]	; (8010c78 <pvPortMalloc+0x178>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a15      	ldr	r2, [pc, #84]	; (8010c80 <pvPortMalloc+0x180>)
 8010c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	685a      	ldr	r2, [r3, #4]
 8010c32:	4b10      	ldr	r3, [pc, #64]	; (8010c74 <pvPortMalloc+0x174>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	431a      	orrs	r2, r3
 8010c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	2200      	movs	r2, #0
 8010c40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c42:	f7fe ff3d 	bl	800fac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	f003 0307 	and.w	r3, r3, #7
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d009      	beq.n	8010c64 <pvPortMalloc+0x164>
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	60fb      	str	r3, [r7, #12]
 8010c62:	e7fe      	b.n	8010c62 <pvPortMalloc+0x162>
	return pvReturn;
 8010c64:	69fb      	ldr	r3, [r7, #28]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3728      	adds	r7, #40	; 0x28
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	200041fc 	.word	0x200041fc
 8010c74:	20004208 	.word	0x20004208
 8010c78:	20004200 	.word	0x20004200
 8010c7c:	200041f4 	.word	0x200041f4
 8010c80:	20004204 	.word	0x20004204

08010c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d046      	beq.n	8010d24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c96:	2308      	movs	r3, #8
 8010c98:	425b      	negs	r3, r3
 8010c9a:	697a      	ldr	r2, [r7, #20]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	685a      	ldr	r2, [r3, #4]
 8010ca8:	4b20      	ldr	r3, [pc, #128]	; (8010d2c <vPortFree+0xa8>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4013      	ands	r3, r2
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d109      	bne.n	8010cc6 <vPortFree+0x42>
 8010cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb6:	f383 8811 	msr	BASEPRI, r3
 8010cba:	f3bf 8f6f 	isb	sy
 8010cbe:	f3bf 8f4f 	dsb	sy
 8010cc2:	60fb      	str	r3, [r7, #12]
 8010cc4:	e7fe      	b.n	8010cc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d009      	beq.n	8010ce2 <vPortFree+0x5e>
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	60bb      	str	r3, [r7, #8]
 8010ce0:	e7fe      	b.n	8010ce0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	4b11      	ldr	r3, [pc, #68]	; (8010d2c <vPortFree+0xa8>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4013      	ands	r3, r2
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d019      	beq.n	8010d24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d115      	bne.n	8010d24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <vPortFree+0xa8>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	43db      	mvns	r3, r3
 8010d02:	401a      	ands	r2, r3
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d08:	f7fe fecc 	bl	800faa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	4b07      	ldr	r3, [pc, #28]	; (8010d30 <vPortFree+0xac>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4413      	add	r3, r2
 8010d16:	4a06      	ldr	r2, [pc, #24]	; (8010d30 <vPortFree+0xac>)
 8010d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d1a:	6938      	ldr	r0, [r7, #16]
 8010d1c:	f000 f86c 	bl	8010df8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010d20:	f7fe fece 	bl	800fac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d24:	bf00      	nop
 8010d26:	3718      	adds	r7, #24
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	20004208 	.word	0x20004208
 8010d30:	20004200 	.word	0x20004200

08010d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010d40:	4b27      	ldr	r3, [pc, #156]	; (8010de0 <prvHeapInit+0xac>)
 8010d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d00c      	beq.n	8010d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	3307      	adds	r3, #7
 8010d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f023 0307 	bic.w	r3, r3, #7
 8010d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010d5c:	68ba      	ldr	r2, [r7, #8]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	1ad3      	subs	r3, r2, r3
 8010d62:	4a1f      	ldr	r2, [pc, #124]	; (8010de0 <prvHeapInit+0xac>)
 8010d64:	4413      	add	r3, r2
 8010d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010d6c:	4a1d      	ldr	r2, [pc, #116]	; (8010de4 <prvHeapInit+0xb0>)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010d72:	4b1c      	ldr	r3, [pc, #112]	; (8010de4 <prvHeapInit+0xb0>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	68ba      	ldr	r2, [r7, #8]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010d80:	2208      	movs	r2, #8
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	1a9b      	subs	r3, r3, r2
 8010d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f023 0307 	bic.w	r3, r3, #7
 8010d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	4a15      	ldr	r2, [pc, #84]	; (8010de8 <prvHeapInit+0xb4>)
 8010d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010d96:	4b14      	ldr	r3, [pc, #80]	; (8010de8 <prvHeapInit+0xb4>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d9e:	4b12      	ldr	r3, [pc, #72]	; (8010de8 <prvHeapInit+0xb4>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2200      	movs	r2, #0
 8010da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	68fa      	ldr	r2, [r7, #12]
 8010dae:	1ad2      	subs	r2, r2, r3
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010db4:	4b0c      	ldr	r3, [pc, #48]	; (8010de8 <prvHeapInit+0xb4>)
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	4a0a      	ldr	r2, [pc, #40]	; (8010dec <prvHeapInit+0xb8>)
 8010dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	4a09      	ldr	r2, [pc, #36]	; (8010df0 <prvHeapInit+0xbc>)
 8010dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010dcc:	4b09      	ldr	r3, [pc, #36]	; (8010df4 <prvHeapInit+0xc0>)
 8010dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010dd2:	601a      	str	r2, [r3, #0]
}
 8010dd4:	bf00      	nop
 8010dd6:	3714      	adds	r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr
 8010de0:	200005f4 	.word	0x200005f4
 8010de4:	200041f4 	.word	0x200041f4
 8010de8:	200041fc 	.word	0x200041fc
 8010dec:	20004204 	.word	0x20004204
 8010df0:	20004200 	.word	0x20004200
 8010df4:	20004208 	.word	0x20004208

08010df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e00:	4b28      	ldr	r3, [pc, #160]	; (8010ea4 <prvInsertBlockIntoFreeList+0xac>)
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	e002      	b.n	8010e0c <prvInsertBlockIntoFreeList+0x14>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	60fb      	str	r3, [r7, #12]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d8f7      	bhi.n	8010e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	68ba      	ldr	r2, [r7, #8]
 8010e20:	4413      	add	r3, r2
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d108      	bne.n	8010e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	685a      	ldr	r2, [r3, #4]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	441a      	add	r2, r3
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	441a      	add	r2, r3
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d118      	bne.n	8010e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	4b15      	ldr	r3, [pc, #84]	; (8010ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d00d      	beq.n	8010e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	685a      	ldr	r2, [r3, #4]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	441a      	add	r2, r3
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	601a      	str	r2, [r3, #0]
 8010e74:	e008      	b.n	8010e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e76:	4b0c      	ldr	r3, [pc, #48]	; (8010ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	601a      	str	r2, [r3, #0]
 8010e7e:	e003      	b.n	8010e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d002      	beq.n	8010e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e96:	bf00      	nop
 8010e98:	3714      	adds	r7, #20
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	200041f4 	.word	0x200041f4
 8010ea8:	200041fc 	.word	0x200041fc

08010eac <__errno>:
 8010eac:	4b01      	ldr	r3, [pc, #4]	; (8010eb4 <__errno+0x8>)
 8010eae:	6818      	ldr	r0, [r3, #0]
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	20000010 	.word	0x20000010

08010eb8 <__libc_init_array>:
 8010eb8:	b570      	push	{r4, r5, r6, lr}
 8010eba:	4e0d      	ldr	r6, [pc, #52]	; (8010ef0 <__libc_init_array+0x38>)
 8010ebc:	4c0d      	ldr	r4, [pc, #52]	; (8010ef4 <__libc_init_array+0x3c>)
 8010ebe:	1ba4      	subs	r4, r4, r6
 8010ec0:	10a4      	asrs	r4, r4, #2
 8010ec2:	2500      	movs	r5, #0
 8010ec4:	42a5      	cmp	r5, r4
 8010ec6:	d109      	bne.n	8010edc <__libc_init_array+0x24>
 8010ec8:	4e0b      	ldr	r6, [pc, #44]	; (8010ef8 <__libc_init_array+0x40>)
 8010eca:	4c0c      	ldr	r4, [pc, #48]	; (8010efc <__libc_init_array+0x44>)
 8010ecc:	f004 fa28 	bl	8015320 <_init>
 8010ed0:	1ba4      	subs	r4, r4, r6
 8010ed2:	10a4      	asrs	r4, r4, #2
 8010ed4:	2500      	movs	r5, #0
 8010ed6:	42a5      	cmp	r5, r4
 8010ed8:	d105      	bne.n	8010ee6 <__libc_init_array+0x2e>
 8010eda:	bd70      	pop	{r4, r5, r6, pc}
 8010edc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ee0:	4798      	blx	r3
 8010ee2:	3501      	adds	r5, #1
 8010ee4:	e7ee      	b.n	8010ec4 <__libc_init_array+0xc>
 8010ee6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010eea:	4798      	blx	r3
 8010eec:	3501      	adds	r5, #1
 8010eee:	e7f2      	b.n	8010ed6 <__libc_init_array+0x1e>
 8010ef0:	08015d40 	.word	0x08015d40
 8010ef4:	08015d40 	.word	0x08015d40
 8010ef8:	08015d40 	.word	0x08015d40
 8010efc:	08015d44 	.word	0x08015d44

08010f00 <memcpy>:
 8010f00:	b510      	push	{r4, lr}
 8010f02:	1e43      	subs	r3, r0, #1
 8010f04:	440a      	add	r2, r1
 8010f06:	4291      	cmp	r1, r2
 8010f08:	d100      	bne.n	8010f0c <memcpy+0xc>
 8010f0a:	bd10      	pop	{r4, pc}
 8010f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f14:	e7f7      	b.n	8010f06 <memcpy+0x6>

08010f16 <memset>:
 8010f16:	4402      	add	r2, r0
 8010f18:	4603      	mov	r3, r0
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d100      	bne.n	8010f20 <memset+0xa>
 8010f1e:	4770      	bx	lr
 8010f20:	f803 1b01 	strb.w	r1, [r3], #1
 8010f24:	e7f9      	b.n	8010f1a <memset+0x4>

08010f26 <__cvt>:
 8010f26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f2a:	ec55 4b10 	vmov	r4, r5, d0
 8010f2e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010f30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010f34:	2d00      	cmp	r5, #0
 8010f36:	460e      	mov	r6, r1
 8010f38:	4691      	mov	r9, r2
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	bfb8      	it	lt
 8010f3e:	4622      	movlt	r2, r4
 8010f40:	462b      	mov	r3, r5
 8010f42:	f027 0720 	bic.w	r7, r7, #32
 8010f46:	bfbb      	ittet	lt
 8010f48:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010f4c:	461d      	movlt	r5, r3
 8010f4e:	2300      	movge	r3, #0
 8010f50:	232d      	movlt	r3, #45	; 0x2d
 8010f52:	bfb8      	it	lt
 8010f54:	4614      	movlt	r4, r2
 8010f56:	2f46      	cmp	r7, #70	; 0x46
 8010f58:	700b      	strb	r3, [r1, #0]
 8010f5a:	d004      	beq.n	8010f66 <__cvt+0x40>
 8010f5c:	2f45      	cmp	r7, #69	; 0x45
 8010f5e:	d100      	bne.n	8010f62 <__cvt+0x3c>
 8010f60:	3601      	adds	r6, #1
 8010f62:	2102      	movs	r1, #2
 8010f64:	e000      	b.n	8010f68 <__cvt+0x42>
 8010f66:	2103      	movs	r1, #3
 8010f68:	ab03      	add	r3, sp, #12
 8010f6a:	9301      	str	r3, [sp, #4]
 8010f6c:	ab02      	add	r3, sp, #8
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4632      	mov	r2, r6
 8010f72:	4653      	mov	r3, sl
 8010f74:	ec45 4b10 	vmov	d0, r4, r5
 8010f78:	f001 fdba 	bl	8012af0 <_dtoa_r>
 8010f7c:	2f47      	cmp	r7, #71	; 0x47
 8010f7e:	4680      	mov	r8, r0
 8010f80:	d102      	bne.n	8010f88 <__cvt+0x62>
 8010f82:	f019 0f01 	tst.w	r9, #1
 8010f86:	d026      	beq.n	8010fd6 <__cvt+0xb0>
 8010f88:	2f46      	cmp	r7, #70	; 0x46
 8010f8a:	eb08 0906 	add.w	r9, r8, r6
 8010f8e:	d111      	bne.n	8010fb4 <__cvt+0x8e>
 8010f90:	f898 3000 	ldrb.w	r3, [r8]
 8010f94:	2b30      	cmp	r3, #48	; 0x30
 8010f96:	d10a      	bne.n	8010fae <__cvt+0x88>
 8010f98:	2200      	movs	r2, #0
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	f7ef fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fa4:	b918      	cbnz	r0, 8010fae <__cvt+0x88>
 8010fa6:	f1c6 0601 	rsb	r6, r6, #1
 8010faa:	f8ca 6000 	str.w	r6, [sl]
 8010fae:	f8da 3000 	ldr.w	r3, [sl]
 8010fb2:	4499      	add	r9, r3
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	4620      	mov	r0, r4
 8010fba:	4629      	mov	r1, r5
 8010fbc:	f7ef fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fc0:	b938      	cbnz	r0, 8010fd2 <__cvt+0xac>
 8010fc2:	2230      	movs	r2, #48	; 0x30
 8010fc4:	9b03      	ldr	r3, [sp, #12]
 8010fc6:	454b      	cmp	r3, r9
 8010fc8:	d205      	bcs.n	8010fd6 <__cvt+0xb0>
 8010fca:	1c59      	adds	r1, r3, #1
 8010fcc:	9103      	str	r1, [sp, #12]
 8010fce:	701a      	strb	r2, [r3, #0]
 8010fd0:	e7f8      	b.n	8010fc4 <__cvt+0x9e>
 8010fd2:	f8cd 900c 	str.w	r9, [sp, #12]
 8010fd6:	9b03      	ldr	r3, [sp, #12]
 8010fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fda:	eba3 0308 	sub.w	r3, r3, r8
 8010fde:	4640      	mov	r0, r8
 8010fe0:	6013      	str	r3, [r2, #0]
 8010fe2:	b004      	add	sp, #16
 8010fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010fe8 <__exponent>:
 8010fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fea:	2900      	cmp	r1, #0
 8010fec:	4604      	mov	r4, r0
 8010fee:	bfba      	itte	lt
 8010ff0:	4249      	neglt	r1, r1
 8010ff2:	232d      	movlt	r3, #45	; 0x2d
 8010ff4:	232b      	movge	r3, #43	; 0x2b
 8010ff6:	2909      	cmp	r1, #9
 8010ff8:	f804 2b02 	strb.w	r2, [r4], #2
 8010ffc:	7043      	strb	r3, [r0, #1]
 8010ffe:	dd20      	ble.n	8011042 <__exponent+0x5a>
 8011000:	f10d 0307 	add.w	r3, sp, #7
 8011004:	461f      	mov	r7, r3
 8011006:	260a      	movs	r6, #10
 8011008:	fb91 f5f6 	sdiv	r5, r1, r6
 801100c:	fb06 1115 	mls	r1, r6, r5, r1
 8011010:	3130      	adds	r1, #48	; 0x30
 8011012:	2d09      	cmp	r5, #9
 8011014:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011018:	f103 32ff 	add.w	r2, r3, #4294967295
 801101c:	4629      	mov	r1, r5
 801101e:	dc09      	bgt.n	8011034 <__exponent+0x4c>
 8011020:	3130      	adds	r1, #48	; 0x30
 8011022:	3b02      	subs	r3, #2
 8011024:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011028:	42bb      	cmp	r3, r7
 801102a:	4622      	mov	r2, r4
 801102c:	d304      	bcc.n	8011038 <__exponent+0x50>
 801102e:	1a10      	subs	r0, r2, r0
 8011030:	b003      	add	sp, #12
 8011032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011034:	4613      	mov	r3, r2
 8011036:	e7e7      	b.n	8011008 <__exponent+0x20>
 8011038:	f813 2b01 	ldrb.w	r2, [r3], #1
 801103c:	f804 2b01 	strb.w	r2, [r4], #1
 8011040:	e7f2      	b.n	8011028 <__exponent+0x40>
 8011042:	2330      	movs	r3, #48	; 0x30
 8011044:	4419      	add	r1, r3
 8011046:	7083      	strb	r3, [r0, #2]
 8011048:	1d02      	adds	r2, r0, #4
 801104a:	70c1      	strb	r1, [r0, #3]
 801104c:	e7ef      	b.n	801102e <__exponent+0x46>
	...

08011050 <_printf_float>:
 8011050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011054:	b08d      	sub	sp, #52	; 0x34
 8011056:	460c      	mov	r4, r1
 8011058:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801105c:	4616      	mov	r6, r2
 801105e:	461f      	mov	r7, r3
 8011060:	4605      	mov	r5, r0
 8011062:	f002 fef3 	bl	8013e4c <_localeconv_r>
 8011066:	6803      	ldr	r3, [r0, #0]
 8011068:	9304      	str	r3, [sp, #16]
 801106a:	4618      	mov	r0, r3
 801106c:	f7ef f8b0 	bl	80001d0 <strlen>
 8011070:	2300      	movs	r3, #0
 8011072:	930a      	str	r3, [sp, #40]	; 0x28
 8011074:	f8d8 3000 	ldr.w	r3, [r8]
 8011078:	9005      	str	r0, [sp, #20]
 801107a:	3307      	adds	r3, #7
 801107c:	f023 0307 	bic.w	r3, r3, #7
 8011080:	f103 0208 	add.w	r2, r3, #8
 8011084:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011088:	f8d4 b000 	ldr.w	fp, [r4]
 801108c:	f8c8 2000 	str.w	r2, [r8]
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011098:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801109c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80110a0:	9307      	str	r3, [sp, #28]
 80110a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80110a6:	f04f 32ff 	mov.w	r2, #4294967295
 80110aa:	4ba7      	ldr	r3, [pc, #668]	; (8011348 <_printf_float+0x2f8>)
 80110ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110b0:	f7ef fd3c 	bl	8000b2c <__aeabi_dcmpun>
 80110b4:	bb70      	cbnz	r0, 8011114 <_printf_float+0xc4>
 80110b6:	f04f 32ff 	mov.w	r2, #4294967295
 80110ba:	4ba3      	ldr	r3, [pc, #652]	; (8011348 <_printf_float+0x2f8>)
 80110bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110c0:	f7ef fd16 	bl	8000af0 <__aeabi_dcmple>
 80110c4:	bb30      	cbnz	r0, 8011114 <_printf_float+0xc4>
 80110c6:	2200      	movs	r2, #0
 80110c8:	2300      	movs	r3, #0
 80110ca:	4640      	mov	r0, r8
 80110cc:	4649      	mov	r1, r9
 80110ce:	f7ef fd05 	bl	8000adc <__aeabi_dcmplt>
 80110d2:	b110      	cbz	r0, 80110da <_printf_float+0x8a>
 80110d4:	232d      	movs	r3, #45	; 0x2d
 80110d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110da:	4a9c      	ldr	r2, [pc, #624]	; (801134c <_printf_float+0x2fc>)
 80110dc:	4b9c      	ldr	r3, [pc, #624]	; (8011350 <_printf_float+0x300>)
 80110de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80110e2:	bf8c      	ite	hi
 80110e4:	4690      	movhi	r8, r2
 80110e6:	4698      	movls	r8, r3
 80110e8:	2303      	movs	r3, #3
 80110ea:	f02b 0204 	bic.w	r2, fp, #4
 80110ee:	6123      	str	r3, [r4, #16]
 80110f0:	6022      	str	r2, [r4, #0]
 80110f2:	f04f 0900 	mov.w	r9, #0
 80110f6:	9700      	str	r7, [sp, #0]
 80110f8:	4633      	mov	r3, r6
 80110fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80110fc:	4621      	mov	r1, r4
 80110fe:	4628      	mov	r0, r5
 8011100:	f000 f9e6 	bl	80114d0 <_printf_common>
 8011104:	3001      	adds	r0, #1
 8011106:	f040 808d 	bne.w	8011224 <_printf_float+0x1d4>
 801110a:	f04f 30ff 	mov.w	r0, #4294967295
 801110e:	b00d      	add	sp, #52	; 0x34
 8011110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	4642      	mov	r2, r8
 8011116:	464b      	mov	r3, r9
 8011118:	4640      	mov	r0, r8
 801111a:	4649      	mov	r1, r9
 801111c:	f7ef fd06 	bl	8000b2c <__aeabi_dcmpun>
 8011120:	b110      	cbz	r0, 8011128 <_printf_float+0xd8>
 8011122:	4a8c      	ldr	r2, [pc, #560]	; (8011354 <_printf_float+0x304>)
 8011124:	4b8c      	ldr	r3, [pc, #560]	; (8011358 <_printf_float+0x308>)
 8011126:	e7da      	b.n	80110de <_printf_float+0x8e>
 8011128:	6861      	ldr	r1, [r4, #4]
 801112a:	1c4b      	adds	r3, r1, #1
 801112c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011130:	a80a      	add	r0, sp, #40	; 0x28
 8011132:	d13e      	bne.n	80111b2 <_printf_float+0x162>
 8011134:	2306      	movs	r3, #6
 8011136:	6063      	str	r3, [r4, #4]
 8011138:	2300      	movs	r3, #0
 801113a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801113e:	ab09      	add	r3, sp, #36	; 0x24
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	ec49 8b10 	vmov	d0, r8, r9
 8011146:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801114a:	6022      	str	r2, [r4, #0]
 801114c:	f8cd a004 	str.w	sl, [sp, #4]
 8011150:	6861      	ldr	r1, [r4, #4]
 8011152:	4628      	mov	r0, r5
 8011154:	f7ff fee7 	bl	8010f26 <__cvt>
 8011158:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801115c:	2b47      	cmp	r3, #71	; 0x47
 801115e:	4680      	mov	r8, r0
 8011160:	d109      	bne.n	8011176 <_printf_float+0x126>
 8011162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011164:	1cd8      	adds	r0, r3, #3
 8011166:	db02      	blt.n	801116e <_printf_float+0x11e>
 8011168:	6862      	ldr	r2, [r4, #4]
 801116a:	4293      	cmp	r3, r2
 801116c:	dd47      	ble.n	80111fe <_printf_float+0x1ae>
 801116e:	f1aa 0a02 	sub.w	sl, sl, #2
 8011172:	fa5f fa8a 	uxtb.w	sl, sl
 8011176:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801117a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801117c:	d824      	bhi.n	80111c8 <_printf_float+0x178>
 801117e:	3901      	subs	r1, #1
 8011180:	4652      	mov	r2, sl
 8011182:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011186:	9109      	str	r1, [sp, #36]	; 0x24
 8011188:	f7ff ff2e 	bl	8010fe8 <__exponent>
 801118c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801118e:	1813      	adds	r3, r2, r0
 8011190:	2a01      	cmp	r2, #1
 8011192:	4681      	mov	r9, r0
 8011194:	6123      	str	r3, [r4, #16]
 8011196:	dc02      	bgt.n	801119e <_printf_float+0x14e>
 8011198:	6822      	ldr	r2, [r4, #0]
 801119a:	07d1      	lsls	r1, r2, #31
 801119c:	d501      	bpl.n	80111a2 <_printf_float+0x152>
 801119e:	3301      	adds	r3, #1
 80111a0:	6123      	str	r3, [r4, #16]
 80111a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d0a5      	beq.n	80110f6 <_printf_float+0xa6>
 80111aa:	232d      	movs	r3, #45	; 0x2d
 80111ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111b0:	e7a1      	b.n	80110f6 <_printf_float+0xa6>
 80111b2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80111b6:	f000 8177 	beq.w	80114a8 <_printf_float+0x458>
 80111ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80111be:	d1bb      	bne.n	8011138 <_printf_float+0xe8>
 80111c0:	2900      	cmp	r1, #0
 80111c2:	d1b9      	bne.n	8011138 <_printf_float+0xe8>
 80111c4:	2301      	movs	r3, #1
 80111c6:	e7b6      	b.n	8011136 <_printf_float+0xe6>
 80111c8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80111cc:	d119      	bne.n	8011202 <_printf_float+0x1b2>
 80111ce:	2900      	cmp	r1, #0
 80111d0:	6863      	ldr	r3, [r4, #4]
 80111d2:	dd0c      	ble.n	80111ee <_printf_float+0x19e>
 80111d4:	6121      	str	r1, [r4, #16]
 80111d6:	b913      	cbnz	r3, 80111de <_printf_float+0x18e>
 80111d8:	6822      	ldr	r2, [r4, #0]
 80111da:	07d2      	lsls	r2, r2, #31
 80111dc:	d502      	bpl.n	80111e4 <_printf_float+0x194>
 80111de:	3301      	adds	r3, #1
 80111e0:	440b      	add	r3, r1
 80111e2:	6123      	str	r3, [r4, #16]
 80111e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80111e8:	f04f 0900 	mov.w	r9, #0
 80111ec:	e7d9      	b.n	80111a2 <_printf_float+0x152>
 80111ee:	b913      	cbnz	r3, 80111f6 <_printf_float+0x1a6>
 80111f0:	6822      	ldr	r2, [r4, #0]
 80111f2:	07d0      	lsls	r0, r2, #31
 80111f4:	d501      	bpl.n	80111fa <_printf_float+0x1aa>
 80111f6:	3302      	adds	r3, #2
 80111f8:	e7f3      	b.n	80111e2 <_printf_float+0x192>
 80111fa:	2301      	movs	r3, #1
 80111fc:	e7f1      	b.n	80111e2 <_printf_float+0x192>
 80111fe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011202:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011206:	4293      	cmp	r3, r2
 8011208:	db05      	blt.n	8011216 <_printf_float+0x1c6>
 801120a:	6822      	ldr	r2, [r4, #0]
 801120c:	6123      	str	r3, [r4, #16]
 801120e:	07d1      	lsls	r1, r2, #31
 8011210:	d5e8      	bpl.n	80111e4 <_printf_float+0x194>
 8011212:	3301      	adds	r3, #1
 8011214:	e7e5      	b.n	80111e2 <_printf_float+0x192>
 8011216:	2b00      	cmp	r3, #0
 8011218:	bfd4      	ite	le
 801121a:	f1c3 0302 	rsble	r3, r3, #2
 801121e:	2301      	movgt	r3, #1
 8011220:	4413      	add	r3, r2
 8011222:	e7de      	b.n	80111e2 <_printf_float+0x192>
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	055a      	lsls	r2, r3, #21
 8011228:	d407      	bmi.n	801123a <_printf_float+0x1ea>
 801122a:	6923      	ldr	r3, [r4, #16]
 801122c:	4642      	mov	r2, r8
 801122e:	4631      	mov	r1, r6
 8011230:	4628      	mov	r0, r5
 8011232:	47b8      	blx	r7
 8011234:	3001      	adds	r0, #1
 8011236:	d12b      	bne.n	8011290 <_printf_float+0x240>
 8011238:	e767      	b.n	801110a <_printf_float+0xba>
 801123a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801123e:	f240 80dc 	bls.w	80113fa <_printf_float+0x3aa>
 8011242:	2200      	movs	r2, #0
 8011244:	2300      	movs	r3, #0
 8011246:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801124a:	f7ef fc3d 	bl	8000ac8 <__aeabi_dcmpeq>
 801124e:	2800      	cmp	r0, #0
 8011250:	d033      	beq.n	80112ba <_printf_float+0x26a>
 8011252:	2301      	movs	r3, #1
 8011254:	4a41      	ldr	r2, [pc, #260]	; (801135c <_printf_float+0x30c>)
 8011256:	4631      	mov	r1, r6
 8011258:	4628      	mov	r0, r5
 801125a:	47b8      	blx	r7
 801125c:	3001      	adds	r0, #1
 801125e:	f43f af54 	beq.w	801110a <_printf_float+0xba>
 8011262:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011266:	429a      	cmp	r2, r3
 8011268:	db02      	blt.n	8011270 <_printf_float+0x220>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	07d8      	lsls	r0, r3, #31
 801126e:	d50f      	bpl.n	8011290 <_printf_float+0x240>
 8011270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011274:	4631      	mov	r1, r6
 8011276:	4628      	mov	r0, r5
 8011278:	47b8      	blx	r7
 801127a:	3001      	adds	r0, #1
 801127c:	f43f af45 	beq.w	801110a <_printf_float+0xba>
 8011280:	f04f 0800 	mov.w	r8, #0
 8011284:	f104 091a 	add.w	r9, r4, #26
 8011288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801128a:	3b01      	subs	r3, #1
 801128c:	4543      	cmp	r3, r8
 801128e:	dc09      	bgt.n	80112a4 <_printf_float+0x254>
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	079b      	lsls	r3, r3, #30
 8011294:	f100 8103 	bmi.w	801149e <_printf_float+0x44e>
 8011298:	68e0      	ldr	r0, [r4, #12]
 801129a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801129c:	4298      	cmp	r0, r3
 801129e:	bfb8      	it	lt
 80112a0:	4618      	movlt	r0, r3
 80112a2:	e734      	b.n	801110e <_printf_float+0xbe>
 80112a4:	2301      	movs	r3, #1
 80112a6:	464a      	mov	r2, r9
 80112a8:	4631      	mov	r1, r6
 80112aa:	4628      	mov	r0, r5
 80112ac:	47b8      	blx	r7
 80112ae:	3001      	adds	r0, #1
 80112b0:	f43f af2b 	beq.w	801110a <_printf_float+0xba>
 80112b4:	f108 0801 	add.w	r8, r8, #1
 80112b8:	e7e6      	b.n	8011288 <_printf_float+0x238>
 80112ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112bc:	2b00      	cmp	r3, #0
 80112be:	dc2b      	bgt.n	8011318 <_printf_float+0x2c8>
 80112c0:	2301      	movs	r3, #1
 80112c2:	4a26      	ldr	r2, [pc, #152]	; (801135c <_printf_float+0x30c>)
 80112c4:	4631      	mov	r1, r6
 80112c6:	4628      	mov	r0, r5
 80112c8:	47b8      	blx	r7
 80112ca:	3001      	adds	r0, #1
 80112cc:	f43f af1d 	beq.w	801110a <_printf_float+0xba>
 80112d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d2:	b923      	cbnz	r3, 80112de <_printf_float+0x28e>
 80112d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112d6:	b913      	cbnz	r3, 80112de <_printf_float+0x28e>
 80112d8:	6823      	ldr	r3, [r4, #0]
 80112da:	07d9      	lsls	r1, r3, #31
 80112dc:	d5d8      	bpl.n	8011290 <_printf_float+0x240>
 80112de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112e2:	4631      	mov	r1, r6
 80112e4:	4628      	mov	r0, r5
 80112e6:	47b8      	blx	r7
 80112e8:	3001      	adds	r0, #1
 80112ea:	f43f af0e 	beq.w	801110a <_printf_float+0xba>
 80112ee:	f04f 0900 	mov.w	r9, #0
 80112f2:	f104 0a1a 	add.w	sl, r4, #26
 80112f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f8:	425b      	negs	r3, r3
 80112fa:	454b      	cmp	r3, r9
 80112fc:	dc01      	bgt.n	8011302 <_printf_float+0x2b2>
 80112fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011300:	e794      	b.n	801122c <_printf_float+0x1dc>
 8011302:	2301      	movs	r3, #1
 8011304:	4652      	mov	r2, sl
 8011306:	4631      	mov	r1, r6
 8011308:	4628      	mov	r0, r5
 801130a:	47b8      	blx	r7
 801130c:	3001      	adds	r0, #1
 801130e:	f43f aefc 	beq.w	801110a <_printf_float+0xba>
 8011312:	f109 0901 	add.w	r9, r9, #1
 8011316:	e7ee      	b.n	80112f6 <_printf_float+0x2a6>
 8011318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801131a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801131c:	429a      	cmp	r2, r3
 801131e:	bfa8      	it	ge
 8011320:	461a      	movge	r2, r3
 8011322:	2a00      	cmp	r2, #0
 8011324:	4691      	mov	r9, r2
 8011326:	dd07      	ble.n	8011338 <_printf_float+0x2e8>
 8011328:	4613      	mov	r3, r2
 801132a:	4631      	mov	r1, r6
 801132c:	4642      	mov	r2, r8
 801132e:	4628      	mov	r0, r5
 8011330:	47b8      	blx	r7
 8011332:	3001      	adds	r0, #1
 8011334:	f43f aee9 	beq.w	801110a <_printf_float+0xba>
 8011338:	f104 031a 	add.w	r3, r4, #26
 801133c:	f04f 0b00 	mov.w	fp, #0
 8011340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011344:	9306      	str	r3, [sp, #24]
 8011346:	e015      	b.n	8011374 <_printf_float+0x324>
 8011348:	7fefffff 	.word	0x7fefffff
 801134c:	08015a20 	.word	0x08015a20
 8011350:	08015a1c 	.word	0x08015a1c
 8011354:	08015a28 	.word	0x08015a28
 8011358:	08015a24 	.word	0x08015a24
 801135c:	08015a2c 	.word	0x08015a2c
 8011360:	2301      	movs	r3, #1
 8011362:	9a06      	ldr	r2, [sp, #24]
 8011364:	4631      	mov	r1, r6
 8011366:	4628      	mov	r0, r5
 8011368:	47b8      	blx	r7
 801136a:	3001      	adds	r0, #1
 801136c:	f43f aecd 	beq.w	801110a <_printf_float+0xba>
 8011370:	f10b 0b01 	add.w	fp, fp, #1
 8011374:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011378:	ebaa 0309 	sub.w	r3, sl, r9
 801137c:	455b      	cmp	r3, fp
 801137e:	dcef      	bgt.n	8011360 <_printf_float+0x310>
 8011380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011384:	429a      	cmp	r2, r3
 8011386:	44d0      	add	r8, sl
 8011388:	db15      	blt.n	80113b6 <_printf_float+0x366>
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	07da      	lsls	r2, r3, #31
 801138e:	d412      	bmi.n	80113b6 <_printf_float+0x366>
 8011390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011392:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011394:	eba3 020a 	sub.w	r2, r3, sl
 8011398:	eba3 0a01 	sub.w	sl, r3, r1
 801139c:	4592      	cmp	sl, r2
 801139e:	bfa8      	it	ge
 80113a0:	4692      	movge	sl, r2
 80113a2:	f1ba 0f00 	cmp.w	sl, #0
 80113a6:	dc0e      	bgt.n	80113c6 <_printf_float+0x376>
 80113a8:	f04f 0800 	mov.w	r8, #0
 80113ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80113b0:	f104 091a 	add.w	r9, r4, #26
 80113b4:	e019      	b.n	80113ea <_printf_float+0x39a>
 80113b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113ba:	4631      	mov	r1, r6
 80113bc:	4628      	mov	r0, r5
 80113be:	47b8      	blx	r7
 80113c0:	3001      	adds	r0, #1
 80113c2:	d1e5      	bne.n	8011390 <_printf_float+0x340>
 80113c4:	e6a1      	b.n	801110a <_printf_float+0xba>
 80113c6:	4653      	mov	r3, sl
 80113c8:	4642      	mov	r2, r8
 80113ca:	4631      	mov	r1, r6
 80113cc:	4628      	mov	r0, r5
 80113ce:	47b8      	blx	r7
 80113d0:	3001      	adds	r0, #1
 80113d2:	d1e9      	bne.n	80113a8 <_printf_float+0x358>
 80113d4:	e699      	b.n	801110a <_printf_float+0xba>
 80113d6:	2301      	movs	r3, #1
 80113d8:	464a      	mov	r2, r9
 80113da:	4631      	mov	r1, r6
 80113dc:	4628      	mov	r0, r5
 80113de:	47b8      	blx	r7
 80113e0:	3001      	adds	r0, #1
 80113e2:	f43f ae92 	beq.w	801110a <_printf_float+0xba>
 80113e6:	f108 0801 	add.w	r8, r8, #1
 80113ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80113ee:	1a9b      	subs	r3, r3, r2
 80113f0:	eba3 030a 	sub.w	r3, r3, sl
 80113f4:	4543      	cmp	r3, r8
 80113f6:	dcee      	bgt.n	80113d6 <_printf_float+0x386>
 80113f8:	e74a      	b.n	8011290 <_printf_float+0x240>
 80113fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113fc:	2a01      	cmp	r2, #1
 80113fe:	dc01      	bgt.n	8011404 <_printf_float+0x3b4>
 8011400:	07db      	lsls	r3, r3, #31
 8011402:	d53a      	bpl.n	801147a <_printf_float+0x42a>
 8011404:	2301      	movs	r3, #1
 8011406:	4642      	mov	r2, r8
 8011408:	4631      	mov	r1, r6
 801140a:	4628      	mov	r0, r5
 801140c:	47b8      	blx	r7
 801140e:	3001      	adds	r0, #1
 8011410:	f43f ae7b 	beq.w	801110a <_printf_float+0xba>
 8011414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011418:	4631      	mov	r1, r6
 801141a:	4628      	mov	r0, r5
 801141c:	47b8      	blx	r7
 801141e:	3001      	adds	r0, #1
 8011420:	f108 0801 	add.w	r8, r8, #1
 8011424:	f43f ae71 	beq.w	801110a <_printf_float+0xba>
 8011428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801142a:	2200      	movs	r2, #0
 801142c:	f103 3aff 	add.w	sl, r3, #4294967295
 8011430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011434:	2300      	movs	r3, #0
 8011436:	f7ef fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 801143a:	b9c8      	cbnz	r0, 8011470 <_printf_float+0x420>
 801143c:	4653      	mov	r3, sl
 801143e:	4642      	mov	r2, r8
 8011440:	4631      	mov	r1, r6
 8011442:	4628      	mov	r0, r5
 8011444:	47b8      	blx	r7
 8011446:	3001      	adds	r0, #1
 8011448:	d10e      	bne.n	8011468 <_printf_float+0x418>
 801144a:	e65e      	b.n	801110a <_printf_float+0xba>
 801144c:	2301      	movs	r3, #1
 801144e:	4652      	mov	r2, sl
 8011450:	4631      	mov	r1, r6
 8011452:	4628      	mov	r0, r5
 8011454:	47b8      	blx	r7
 8011456:	3001      	adds	r0, #1
 8011458:	f43f ae57 	beq.w	801110a <_printf_float+0xba>
 801145c:	f108 0801 	add.w	r8, r8, #1
 8011460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011462:	3b01      	subs	r3, #1
 8011464:	4543      	cmp	r3, r8
 8011466:	dcf1      	bgt.n	801144c <_printf_float+0x3fc>
 8011468:	464b      	mov	r3, r9
 801146a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801146e:	e6de      	b.n	801122e <_printf_float+0x1de>
 8011470:	f04f 0800 	mov.w	r8, #0
 8011474:	f104 0a1a 	add.w	sl, r4, #26
 8011478:	e7f2      	b.n	8011460 <_printf_float+0x410>
 801147a:	2301      	movs	r3, #1
 801147c:	e7df      	b.n	801143e <_printf_float+0x3ee>
 801147e:	2301      	movs	r3, #1
 8011480:	464a      	mov	r2, r9
 8011482:	4631      	mov	r1, r6
 8011484:	4628      	mov	r0, r5
 8011486:	47b8      	blx	r7
 8011488:	3001      	adds	r0, #1
 801148a:	f43f ae3e 	beq.w	801110a <_printf_float+0xba>
 801148e:	f108 0801 	add.w	r8, r8, #1
 8011492:	68e3      	ldr	r3, [r4, #12]
 8011494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011496:	1a9b      	subs	r3, r3, r2
 8011498:	4543      	cmp	r3, r8
 801149a:	dcf0      	bgt.n	801147e <_printf_float+0x42e>
 801149c:	e6fc      	b.n	8011298 <_printf_float+0x248>
 801149e:	f04f 0800 	mov.w	r8, #0
 80114a2:	f104 0919 	add.w	r9, r4, #25
 80114a6:	e7f4      	b.n	8011492 <_printf_float+0x442>
 80114a8:	2900      	cmp	r1, #0
 80114aa:	f43f ae8b 	beq.w	80111c4 <_printf_float+0x174>
 80114ae:	2300      	movs	r3, #0
 80114b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80114b4:	ab09      	add	r3, sp, #36	; 0x24
 80114b6:	9300      	str	r3, [sp, #0]
 80114b8:	ec49 8b10 	vmov	d0, r8, r9
 80114bc:	6022      	str	r2, [r4, #0]
 80114be:	f8cd a004 	str.w	sl, [sp, #4]
 80114c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80114c6:	4628      	mov	r0, r5
 80114c8:	f7ff fd2d 	bl	8010f26 <__cvt>
 80114cc:	4680      	mov	r8, r0
 80114ce:	e648      	b.n	8011162 <_printf_float+0x112>

080114d0 <_printf_common>:
 80114d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d4:	4691      	mov	r9, r2
 80114d6:	461f      	mov	r7, r3
 80114d8:	688a      	ldr	r2, [r1, #8]
 80114da:	690b      	ldr	r3, [r1, #16]
 80114dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114e0:	4293      	cmp	r3, r2
 80114e2:	bfb8      	it	lt
 80114e4:	4613      	movlt	r3, r2
 80114e6:	f8c9 3000 	str.w	r3, [r9]
 80114ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114ee:	4606      	mov	r6, r0
 80114f0:	460c      	mov	r4, r1
 80114f2:	b112      	cbz	r2, 80114fa <_printf_common+0x2a>
 80114f4:	3301      	adds	r3, #1
 80114f6:	f8c9 3000 	str.w	r3, [r9]
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	0699      	lsls	r1, r3, #26
 80114fe:	bf42      	ittt	mi
 8011500:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011504:	3302      	addmi	r3, #2
 8011506:	f8c9 3000 	strmi.w	r3, [r9]
 801150a:	6825      	ldr	r5, [r4, #0]
 801150c:	f015 0506 	ands.w	r5, r5, #6
 8011510:	d107      	bne.n	8011522 <_printf_common+0x52>
 8011512:	f104 0a19 	add.w	sl, r4, #25
 8011516:	68e3      	ldr	r3, [r4, #12]
 8011518:	f8d9 2000 	ldr.w	r2, [r9]
 801151c:	1a9b      	subs	r3, r3, r2
 801151e:	42ab      	cmp	r3, r5
 8011520:	dc28      	bgt.n	8011574 <_printf_common+0xa4>
 8011522:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011526:	6822      	ldr	r2, [r4, #0]
 8011528:	3300      	adds	r3, #0
 801152a:	bf18      	it	ne
 801152c:	2301      	movne	r3, #1
 801152e:	0692      	lsls	r2, r2, #26
 8011530:	d42d      	bmi.n	801158e <_printf_common+0xbe>
 8011532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011536:	4639      	mov	r1, r7
 8011538:	4630      	mov	r0, r6
 801153a:	47c0      	blx	r8
 801153c:	3001      	adds	r0, #1
 801153e:	d020      	beq.n	8011582 <_printf_common+0xb2>
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	68e5      	ldr	r5, [r4, #12]
 8011544:	f8d9 2000 	ldr.w	r2, [r9]
 8011548:	f003 0306 	and.w	r3, r3, #6
 801154c:	2b04      	cmp	r3, #4
 801154e:	bf08      	it	eq
 8011550:	1aad      	subeq	r5, r5, r2
 8011552:	68a3      	ldr	r3, [r4, #8]
 8011554:	6922      	ldr	r2, [r4, #16]
 8011556:	bf0c      	ite	eq
 8011558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801155c:	2500      	movne	r5, #0
 801155e:	4293      	cmp	r3, r2
 8011560:	bfc4      	itt	gt
 8011562:	1a9b      	subgt	r3, r3, r2
 8011564:	18ed      	addgt	r5, r5, r3
 8011566:	f04f 0900 	mov.w	r9, #0
 801156a:	341a      	adds	r4, #26
 801156c:	454d      	cmp	r5, r9
 801156e:	d11a      	bne.n	80115a6 <_printf_common+0xd6>
 8011570:	2000      	movs	r0, #0
 8011572:	e008      	b.n	8011586 <_printf_common+0xb6>
 8011574:	2301      	movs	r3, #1
 8011576:	4652      	mov	r2, sl
 8011578:	4639      	mov	r1, r7
 801157a:	4630      	mov	r0, r6
 801157c:	47c0      	blx	r8
 801157e:	3001      	adds	r0, #1
 8011580:	d103      	bne.n	801158a <_printf_common+0xba>
 8011582:	f04f 30ff 	mov.w	r0, #4294967295
 8011586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801158a:	3501      	adds	r5, #1
 801158c:	e7c3      	b.n	8011516 <_printf_common+0x46>
 801158e:	18e1      	adds	r1, r4, r3
 8011590:	1c5a      	adds	r2, r3, #1
 8011592:	2030      	movs	r0, #48	; 0x30
 8011594:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011598:	4422      	add	r2, r4
 801159a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801159e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115a2:	3302      	adds	r3, #2
 80115a4:	e7c5      	b.n	8011532 <_printf_common+0x62>
 80115a6:	2301      	movs	r3, #1
 80115a8:	4622      	mov	r2, r4
 80115aa:	4639      	mov	r1, r7
 80115ac:	4630      	mov	r0, r6
 80115ae:	47c0      	blx	r8
 80115b0:	3001      	adds	r0, #1
 80115b2:	d0e6      	beq.n	8011582 <_printf_common+0xb2>
 80115b4:	f109 0901 	add.w	r9, r9, #1
 80115b8:	e7d8      	b.n	801156c <_printf_common+0x9c>
	...

080115bc <_printf_i>:
 80115bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80115c4:	460c      	mov	r4, r1
 80115c6:	7e09      	ldrb	r1, [r1, #24]
 80115c8:	b085      	sub	sp, #20
 80115ca:	296e      	cmp	r1, #110	; 0x6e
 80115cc:	4617      	mov	r7, r2
 80115ce:	4606      	mov	r6, r0
 80115d0:	4698      	mov	r8, r3
 80115d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115d4:	f000 80b3 	beq.w	801173e <_printf_i+0x182>
 80115d8:	d822      	bhi.n	8011620 <_printf_i+0x64>
 80115da:	2963      	cmp	r1, #99	; 0x63
 80115dc:	d036      	beq.n	801164c <_printf_i+0x90>
 80115de:	d80a      	bhi.n	80115f6 <_printf_i+0x3a>
 80115e0:	2900      	cmp	r1, #0
 80115e2:	f000 80b9 	beq.w	8011758 <_printf_i+0x19c>
 80115e6:	2958      	cmp	r1, #88	; 0x58
 80115e8:	f000 8083 	beq.w	80116f2 <_printf_i+0x136>
 80115ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80115f4:	e032      	b.n	801165c <_printf_i+0xa0>
 80115f6:	2964      	cmp	r1, #100	; 0x64
 80115f8:	d001      	beq.n	80115fe <_printf_i+0x42>
 80115fa:	2969      	cmp	r1, #105	; 0x69
 80115fc:	d1f6      	bne.n	80115ec <_printf_i+0x30>
 80115fe:	6820      	ldr	r0, [r4, #0]
 8011600:	6813      	ldr	r3, [r2, #0]
 8011602:	0605      	lsls	r5, r0, #24
 8011604:	f103 0104 	add.w	r1, r3, #4
 8011608:	d52a      	bpl.n	8011660 <_printf_i+0xa4>
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	6011      	str	r1, [r2, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	da03      	bge.n	801161a <_printf_i+0x5e>
 8011612:	222d      	movs	r2, #45	; 0x2d
 8011614:	425b      	negs	r3, r3
 8011616:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801161a:	486f      	ldr	r0, [pc, #444]	; (80117d8 <_printf_i+0x21c>)
 801161c:	220a      	movs	r2, #10
 801161e:	e039      	b.n	8011694 <_printf_i+0xd8>
 8011620:	2973      	cmp	r1, #115	; 0x73
 8011622:	f000 809d 	beq.w	8011760 <_printf_i+0x1a4>
 8011626:	d808      	bhi.n	801163a <_printf_i+0x7e>
 8011628:	296f      	cmp	r1, #111	; 0x6f
 801162a:	d020      	beq.n	801166e <_printf_i+0xb2>
 801162c:	2970      	cmp	r1, #112	; 0x70
 801162e:	d1dd      	bne.n	80115ec <_printf_i+0x30>
 8011630:	6823      	ldr	r3, [r4, #0]
 8011632:	f043 0320 	orr.w	r3, r3, #32
 8011636:	6023      	str	r3, [r4, #0]
 8011638:	e003      	b.n	8011642 <_printf_i+0x86>
 801163a:	2975      	cmp	r1, #117	; 0x75
 801163c:	d017      	beq.n	801166e <_printf_i+0xb2>
 801163e:	2978      	cmp	r1, #120	; 0x78
 8011640:	d1d4      	bne.n	80115ec <_printf_i+0x30>
 8011642:	2378      	movs	r3, #120	; 0x78
 8011644:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011648:	4864      	ldr	r0, [pc, #400]	; (80117dc <_printf_i+0x220>)
 801164a:	e055      	b.n	80116f8 <_printf_i+0x13c>
 801164c:	6813      	ldr	r3, [r2, #0]
 801164e:	1d19      	adds	r1, r3, #4
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	6011      	str	r1, [r2, #0]
 8011654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801165c:	2301      	movs	r3, #1
 801165e:	e08c      	b.n	801177a <_printf_i+0x1be>
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	6011      	str	r1, [r2, #0]
 8011664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011668:	bf18      	it	ne
 801166a:	b21b      	sxthne	r3, r3
 801166c:	e7cf      	b.n	801160e <_printf_i+0x52>
 801166e:	6813      	ldr	r3, [r2, #0]
 8011670:	6825      	ldr	r5, [r4, #0]
 8011672:	1d18      	adds	r0, r3, #4
 8011674:	6010      	str	r0, [r2, #0]
 8011676:	0628      	lsls	r0, r5, #24
 8011678:	d501      	bpl.n	801167e <_printf_i+0xc2>
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	e002      	b.n	8011684 <_printf_i+0xc8>
 801167e:	0668      	lsls	r0, r5, #25
 8011680:	d5fb      	bpl.n	801167a <_printf_i+0xbe>
 8011682:	881b      	ldrh	r3, [r3, #0]
 8011684:	4854      	ldr	r0, [pc, #336]	; (80117d8 <_printf_i+0x21c>)
 8011686:	296f      	cmp	r1, #111	; 0x6f
 8011688:	bf14      	ite	ne
 801168a:	220a      	movne	r2, #10
 801168c:	2208      	moveq	r2, #8
 801168e:	2100      	movs	r1, #0
 8011690:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011694:	6865      	ldr	r5, [r4, #4]
 8011696:	60a5      	str	r5, [r4, #8]
 8011698:	2d00      	cmp	r5, #0
 801169a:	f2c0 8095 	blt.w	80117c8 <_printf_i+0x20c>
 801169e:	6821      	ldr	r1, [r4, #0]
 80116a0:	f021 0104 	bic.w	r1, r1, #4
 80116a4:	6021      	str	r1, [r4, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d13d      	bne.n	8011726 <_printf_i+0x16a>
 80116aa:	2d00      	cmp	r5, #0
 80116ac:	f040 808e 	bne.w	80117cc <_printf_i+0x210>
 80116b0:	4665      	mov	r5, ip
 80116b2:	2a08      	cmp	r2, #8
 80116b4:	d10b      	bne.n	80116ce <_printf_i+0x112>
 80116b6:	6823      	ldr	r3, [r4, #0]
 80116b8:	07db      	lsls	r3, r3, #31
 80116ba:	d508      	bpl.n	80116ce <_printf_i+0x112>
 80116bc:	6923      	ldr	r3, [r4, #16]
 80116be:	6862      	ldr	r2, [r4, #4]
 80116c0:	429a      	cmp	r2, r3
 80116c2:	bfde      	ittt	le
 80116c4:	2330      	movle	r3, #48	; 0x30
 80116c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80116ce:	ebac 0305 	sub.w	r3, ip, r5
 80116d2:	6123      	str	r3, [r4, #16]
 80116d4:	f8cd 8000 	str.w	r8, [sp]
 80116d8:	463b      	mov	r3, r7
 80116da:	aa03      	add	r2, sp, #12
 80116dc:	4621      	mov	r1, r4
 80116de:	4630      	mov	r0, r6
 80116e0:	f7ff fef6 	bl	80114d0 <_printf_common>
 80116e4:	3001      	adds	r0, #1
 80116e6:	d14d      	bne.n	8011784 <_printf_i+0x1c8>
 80116e8:	f04f 30ff 	mov.w	r0, #4294967295
 80116ec:	b005      	add	sp, #20
 80116ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116f2:	4839      	ldr	r0, [pc, #228]	; (80117d8 <_printf_i+0x21c>)
 80116f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80116f8:	6813      	ldr	r3, [r2, #0]
 80116fa:	6821      	ldr	r1, [r4, #0]
 80116fc:	1d1d      	adds	r5, r3, #4
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	6015      	str	r5, [r2, #0]
 8011702:	060a      	lsls	r2, r1, #24
 8011704:	d50b      	bpl.n	801171e <_printf_i+0x162>
 8011706:	07ca      	lsls	r2, r1, #31
 8011708:	bf44      	itt	mi
 801170a:	f041 0120 	orrmi.w	r1, r1, #32
 801170e:	6021      	strmi	r1, [r4, #0]
 8011710:	b91b      	cbnz	r3, 801171a <_printf_i+0x15e>
 8011712:	6822      	ldr	r2, [r4, #0]
 8011714:	f022 0220 	bic.w	r2, r2, #32
 8011718:	6022      	str	r2, [r4, #0]
 801171a:	2210      	movs	r2, #16
 801171c:	e7b7      	b.n	801168e <_printf_i+0xd2>
 801171e:	064d      	lsls	r5, r1, #25
 8011720:	bf48      	it	mi
 8011722:	b29b      	uxthmi	r3, r3
 8011724:	e7ef      	b.n	8011706 <_printf_i+0x14a>
 8011726:	4665      	mov	r5, ip
 8011728:	fbb3 f1f2 	udiv	r1, r3, r2
 801172c:	fb02 3311 	mls	r3, r2, r1, r3
 8011730:	5cc3      	ldrb	r3, [r0, r3]
 8011732:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011736:	460b      	mov	r3, r1
 8011738:	2900      	cmp	r1, #0
 801173a:	d1f5      	bne.n	8011728 <_printf_i+0x16c>
 801173c:	e7b9      	b.n	80116b2 <_printf_i+0xf6>
 801173e:	6813      	ldr	r3, [r2, #0]
 8011740:	6825      	ldr	r5, [r4, #0]
 8011742:	6961      	ldr	r1, [r4, #20]
 8011744:	1d18      	adds	r0, r3, #4
 8011746:	6010      	str	r0, [r2, #0]
 8011748:	0628      	lsls	r0, r5, #24
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	d501      	bpl.n	8011752 <_printf_i+0x196>
 801174e:	6019      	str	r1, [r3, #0]
 8011750:	e002      	b.n	8011758 <_printf_i+0x19c>
 8011752:	066a      	lsls	r2, r5, #25
 8011754:	d5fb      	bpl.n	801174e <_printf_i+0x192>
 8011756:	8019      	strh	r1, [r3, #0]
 8011758:	2300      	movs	r3, #0
 801175a:	6123      	str	r3, [r4, #16]
 801175c:	4665      	mov	r5, ip
 801175e:	e7b9      	b.n	80116d4 <_printf_i+0x118>
 8011760:	6813      	ldr	r3, [r2, #0]
 8011762:	1d19      	adds	r1, r3, #4
 8011764:	6011      	str	r1, [r2, #0]
 8011766:	681d      	ldr	r5, [r3, #0]
 8011768:	6862      	ldr	r2, [r4, #4]
 801176a:	2100      	movs	r1, #0
 801176c:	4628      	mov	r0, r5
 801176e:	f7ee fd37 	bl	80001e0 <memchr>
 8011772:	b108      	cbz	r0, 8011778 <_printf_i+0x1bc>
 8011774:	1b40      	subs	r0, r0, r5
 8011776:	6060      	str	r0, [r4, #4]
 8011778:	6863      	ldr	r3, [r4, #4]
 801177a:	6123      	str	r3, [r4, #16]
 801177c:	2300      	movs	r3, #0
 801177e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011782:	e7a7      	b.n	80116d4 <_printf_i+0x118>
 8011784:	6923      	ldr	r3, [r4, #16]
 8011786:	462a      	mov	r2, r5
 8011788:	4639      	mov	r1, r7
 801178a:	4630      	mov	r0, r6
 801178c:	47c0      	blx	r8
 801178e:	3001      	adds	r0, #1
 8011790:	d0aa      	beq.n	80116e8 <_printf_i+0x12c>
 8011792:	6823      	ldr	r3, [r4, #0]
 8011794:	079b      	lsls	r3, r3, #30
 8011796:	d413      	bmi.n	80117c0 <_printf_i+0x204>
 8011798:	68e0      	ldr	r0, [r4, #12]
 801179a:	9b03      	ldr	r3, [sp, #12]
 801179c:	4298      	cmp	r0, r3
 801179e:	bfb8      	it	lt
 80117a0:	4618      	movlt	r0, r3
 80117a2:	e7a3      	b.n	80116ec <_printf_i+0x130>
 80117a4:	2301      	movs	r3, #1
 80117a6:	464a      	mov	r2, r9
 80117a8:	4639      	mov	r1, r7
 80117aa:	4630      	mov	r0, r6
 80117ac:	47c0      	blx	r8
 80117ae:	3001      	adds	r0, #1
 80117b0:	d09a      	beq.n	80116e8 <_printf_i+0x12c>
 80117b2:	3501      	adds	r5, #1
 80117b4:	68e3      	ldr	r3, [r4, #12]
 80117b6:	9a03      	ldr	r2, [sp, #12]
 80117b8:	1a9b      	subs	r3, r3, r2
 80117ba:	42ab      	cmp	r3, r5
 80117bc:	dcf2      	bgt.n	80117a4 <_printf_i+0x1e8>
 80117be:	e7eb      	b.n	8011798 <_printf_i+0x1dc>
 80117c0:	2500      	movs	r5, #0
 80117c2:	f104 0919 	add.w	r9, r4, #25
 80117c6:	e7f5      	b.n	80117b4 <_printf_i+0x1f8>
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1ac      	bne.n	8011726 <_printf_i+0x16a>
 80117cc:	7803      	ldrb	r3, [r0, #0]
 80117ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80117d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117d6:	e76c      	b.n	80116b2 <_printf_i+0xf6>
 80117d8:	08015a2e 	.word	0x08015a2e
 80117dc:	08015a3f 	.word	0x08015a3f

080117e0 <_scanf_float>:
 80117e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e4:	469a      	mov	sl, r3
 80117e6:	688b      	ldr	r3, [r1, #8]
 80117e8:	4616      	mov	r6, r2
 80117ea:	1e5a      	subs	r2, r3, #1
 80117ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80117f0:	b087      	sub	sp, #28
 80117f2:	bf83      	ittte	hi
 80117f4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80117f8:	189b      	addhi	r3, r3, r2
 80117fa:	9301      	strhi	r3, [sp, #4]
 80117fc:	2300      	movls	r3, #0
 80117fe:	bf86      	itte	hi
 8011800:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011804:	608b      	strhi	r3, [r1, #8]
 8011806:	9301      	strls	r3, [sp, #4]
 8011808:	680b      	ldr	r3, [r1, #0]
 801180a:	4688      	mov	r8, r1
 801180c:	f04f 0b00 	mov.w	fp, #0
 8011810:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011814:	f848 3b1c 	str.w	r3, [r8], #28
 8011818:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801181c:	4607      	mov	r7, r0
 801181e:	460c      	mov	r4, r1
 8011820:	4645      	mov	r5, r8
 8011822:	465a      	mov	r2, fp
 8011824:	46d9      	mov	r9, fp
 8011826:	f8cd b008 	str.w	fp, [sp, #8]
 801182a:	68a1      	ldr	r1, [r4, #8]
 801182c:	b181      	cbz	r1, 8011850 <_scanf_float+0x70>
 801182e:	6833      	ldr	r3, [r6, #0]
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	2b49      	cmp	r3, #73	; 0x49
 8011834:	d071      	beq.n	801191a <_scanf_float+0x13a>
 8011836:	d84d      	bhi.n	80118d4 <_scanf_float+0xf4>
 8011838:	2b39      	cmp	r3, #57	; 0x39
 801183a:	d840      	bhi.n	80118be <_scanf_float+0xde>
 801183c:	2b31      	cmp	r3, #49	; 0x31
 801183e:	f080 8088 	bcs.w	8011952 <_scanf_float+0x172>
 8011842:	2b2d      	cmp	r3, #45	; 0x2d
 8011844:	f000 8090 	beq.w	8011968 <_scanf_float+0x188>
 8011848:	d815      	bhi.n	8011876 <_scanf_float+0x96>
 801184a:	2b2b      	cmp	r3, #43	; 0x2b
 801184c:	f000 808c 	beq.w	8011968 <_scanf_float+0x188>
 8011850:	f1b9 0f00 	cmp.w	r9, #0
 8011854:	d003      	beq.n	801185e <_scanf_float+0x7e>
 8011856:	6823      	ldr	r3, [r4, #0]
 8011858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801185c:	6023      	str	r3, [r4, #0]
 801185e:	3a01      	subs	r2, #1
 8011860:	2a01      	cmp	r2, #1
 8011862:	f200 80ea 	bhi.w	8011a3a <_scanf_float+0x25a>
 8011866:	4545      	cmp	r5, r8
 8011868:	f200 80dc 	bhi.w	8011a24 <_scanf_float+0x244>
 801186c:	2601      	movs	r6, #1
 801186e:	4630      	mov	r0, r6
 8011870:	b007      	add	sp, #28
 8011872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011876:	2b2e      	cmp	r3, #46	; 0x2e
 8011878:	f000 809f 	beq.w	80119ba <_scanf_float+0x1da>
 801187c:	2b30      	cmp	r3, #48	; 0x30
 801187e:	d1e7      	bne.n	8011850 <_scanf_float+0x70>
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011886:	d064      	beq.n	8011952 <_scanf_float+0x172>
 8011888:	9b01      	ldr	r3, [sp, #4]
 801188a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801188e:	6020      	str	r0, [r4, #0]
 8011890:	f109 0901 	add.w	r9, r9, #1
 8011894:	b11b      	cbz	r3, 801189e <_scanf_float+0xbe>
 8011896:	3b01      	subs	r3, #1
 8011898:	3101      	adds	r1, #1
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	60a1      	str	r1, [r4, #8]
 801189e:	68a3      	ldr	r3, [r4, #8]
 80118a0:	3b01      	subs	r3, #1
 80118a2:	60a3      	str	r3, [r4, #8]
 80118a4:	6923      	ldr	r3, [r4, #16]
 80118a6:	3301      	adds	r3, #1
 80118a8:	6123      	str	r3, [r4, #16]
 80118aa:	6873      	ldr	r3, [r6, #4]
 80118ac:	3b01      	subs	r3, #1
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	6073      	str	r3, [r6, #4]
 80118b2:	f340 80ac 	ble.w	8011a0e <_scanf_float+0x22e>
 80118b6:	6833      	ldr	r3, [r6, #0]
 80118b8:	3301      	adds	r3, #1
 80118ba:	6033      	str	r3, [r6, #0]
 80118bc:	e7b5      	b.n	801182a <_scanf_float+0x4a>
 80118be:	2b45      	cmp	r3, #69	; 0x45
 80118c0:	f000 8085 	beq.w	80119ce <_scanf_float+0x1ee>
 80118c4:	2b46      	cmp	r3, #70	; 0x46
 80118c6:	d06a      	beq.n	801199e <_scanf_float+0x1be>
 80118c8:	2b41      	cmp	r3, #65	; 0x41
 80118ca:	d1c1      	bne.n	8011850 <_scanf_float+0x70>
 80118cc:	2a01      	cmp	r2, #1
 80118ce:	d1bf      	bne.n	8011850 <_scanf_float+0x70>
 80118d0:	2202      	movs	r2, #2
 80118d2:	e046      	b.n	8011962 <_scanf_float+0x182>
 80118d4:	2b65      	cmp	r3, #101	; 0x65
 80118d6:	d07a      	beq.n	80119ce <_scanf_float+0x1ee>
 80118d8:	d818      	bhi.n	801190c <_scanf_float+0x12c>
 80118da:	2b54      	cmp	r3, #84	; 0x54
 80118dc:	d066      	beq.n	80119ac <_scanf_float+0x1cc>
 80118de:	d811      	bhi.n	8011904 <_scanf_float+0x124>
 80118e0:	2b4e      	cmp	r3, #78	; 0x4e
 80118e2:	d1b5      	bne.n	8011850 <_scanf_float+0x70>
 80118e4:	2a00      	cmp	r2, #0
 80118e6:	d146      	bne.n	8011976 <_scanf_float+0x196>
 80118e8:	f1b9 0f00 	cmp.w	r9, #0
 80118ec:	d145      	bne.n	801197a <_scanf_float+0x19a>
 80118ee:	6821      	ldr	r1, [r4, #0]
 80118f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80118f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80118f8:	d13f      	bne.n	801197a <_scanf_float+0x19a>
 80118fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80118fe:	6021      	str	r1, [r4, #0]
 8011900:	2201      	movs	r2, #1
 8011902:	e02e      	b.n	8011962 <_scanf_float+0x182>
 8011904:	2b59      	cmp	r3, #89	; 0x59
 8011906:	d01e      	beq.n	8011946 <_scanf_float+0x166>
 8011908:	2b61      	cmp	r3, #97	; 0x61
 801190a:	e7de      	b.n	80118ca <_scanf_float+0xea>
 801190c:	2b6e      	cmp	r3, #110	; 0x6e
 801190e:	d0e9      	beq.n	80118e4 <_scanf_float+0x104>
 8011910:	d815      	bhi.n	801193e <_scanf_float+0x15e>
 8011912:	2b66      	cmp	r3, #102	; 0x66
 8011914:	d043      	beq.n	801199e <_scanf_float+0x1be>
 8011916:	2b69      	cmp	r3, #105	; 0x69
 8011918:	d19a      	bne.n	8011850 <_scanf_float+0x70>
 801191a:	f1bb 0f00 	cmp.w	fp, #0
 801191e:	d138      	bne.n	8011992 <_scanf_float+0x1b2>
 8011920:	f1b9 0f00 	cmp.w	r9, #0
 8011924:	d197      	bne.n	8011856 <_scanf_float+0x76>
 8011926:	6821      	ldr	r1, [r4, #0]
 8011928:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801192c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011930:	d195      	bne.n	801185e <_scanf_float+0x7e>
 8011932:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011936:	6021      	str	r1, [r4, #0]
 8011938:	f04f 0b01 	mov.w	fp, #1
 801193c:	e011      	b.n	8011962 <_scanf_float+0x182>
 801193e:	2b74      	cmp	r3, #116	; 0x74
 8011940:	d034      	beq.n	80119ac <_scanf_float+0x1cc>
 8011942:	2b79      	cmp	r3, #121	; 0x79
 8011944:	d184      	bne.n	8011850 <_scanf_float+0x70>
 8011946:	f1bb 0f07 	cmp.w	fp, #7
 801194a:	d181      	bne.n	8011850 <_scanf_float+0x70>
 801194c:	f04f 0b08 	mov.w	fp, #8
 8011950:	e007      	b.n	8011962 <_scanf_float+0x182>
 8011952:	eb12 0f0b 	cmn.w	r2, fp
 8011956:	f47f af7b 	bne.w	8011850 <_scanf_float+0x70>
 801195a:	6821      	ldr	r1, [r4, #0]
 801195c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011960:	6021      	str	r1, [r4, #0]
 8011962:	702b      	strb	r3, [r5, #0]
 8011964:	3501      	adds	r5, #1
 8011966:	e79a      	b.n	801189e <_scanf_float+0xbe>
 8011968:	6821      	ldr	r1, [r4, #0]
 801196a:	0608      	lsls	r0, r1, #24
 801196c:	f57f af70 	bpl.w	8011850 <_scanf_float+0x70>
 8011970:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011974:	e7f4      	b.n	8011960 <_scanf_float+0x180>
 8011976:	2a02      	cmp	r2, #2
 8011978:	d047      	beq.n	8011a0a <_scanf_float+0x22a>
 801197a:	f1bb 0f01 	cmp.w	fp, #1
 801197e:	d003      	beq.n	8011988 <_scanf_float+0x1a8>
 8011980:	f1bb 0f04 	cmp.w	fp, #4
 8011984:	f47f af64 	bne.w	8011850 <_scanf_float+0x70>
 8011988:	f10b 0b01 	add.w	fp, fp, #1
 801198c:	fa5f fb8b 	uxtb.w	fp, fp
 8011990:	e7e7      	b.n	8011962 <_scanf_float+0x182>
 8011992:	f1bb 0f03 	cmp.w	fp, #3
 8011996:	d0f7      	beq.n	8011988 <_scanf_float+0x1a8>
 8011998:	f1bb 0f05 	cmp.w	fp, #5
 801199c:	e7f2      	b.n	8011984 <_scanf_float+0x1a4>
 801199e:	f1bb 0f02 	cmp.w	fp, #2
 80119a2:	f47f af55 	bne.w	8011850 <_scanf_float+0x70>
 80119a6:	f04f 0b03 	mov.w	fp, #3
 80119aa:	e7da      	b.n	8011962 <_scanf_float+0x182>
 80119ac:	f1bb 0f06 	cmp.w	fp, #6
 80119b0:	f47f af4e 	bne.w	8011850 <_scanf_float+0x70>
 80119b4:	f04f 0b07 	mov.w	fp, #7
 80119b8:	e7d3      	b.n	8011962 <_scanf_float+0x182>
 80119ba:	6821      	ldr	r1, [r4, #0]
 80119bc:	0588      	lsls	r0, r1, #22
 80119be:	f57f af47 	bpl.w	8011850 <_scanf_float+0x70>
 80119c2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80119c6:	6021      	str	r1, [r4, #0]
 80119c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80119cc:	e7c9      	b.n	8011962 <_scanf_float+0x182>
 80119ce:	6821      	ldr	r1, [r4, #0]
 80119d0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80119d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80119d8:	d006      	beq.n	80119e8 <_scanf_float+0x208>
 80119da:	0548      	lsls	r0, r1, #21
 80119dc:	f57f af38 	bpl.w	8011850 <_scanf_float+0x70>
 80119e0:	f1b9 0f00 	cmp.w	r9, #0
 80119e4:	f43f af3b 	beq.w	801185e <_scanf_float+0x7e>
 80119e8:	0588      	lsls	r0, r1, #22
 80119ea:	bf58      	it	pl
 80119ec:	9802      	ldrpl	r0, [sp, #8]
 80119ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80119f2:	bf58      	it	pl
 80119f4:	eba9 0000 	subpl.w	r0, r9, r0
 80119f8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80119fc:	bf58      	it	pl
 80119fe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011a02:	6021      	str	r1, [r4, #0]
 8011a04:	f04f 0900 	mov.w	r9, #0
 8011a08:	e7ab      	b.n	8011962 <_scanf_float+0x182>
 8011a0a:	2203      	movs	r2, #3
 8011a0c:	e7a9      	b.n	8011962 <_scanf_float+0x182>
 8011a0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011a12:	9205      	str	r2, [sp, #20]
 8011a14:	4631      	mov	r1, r6
 8011a16:	4638      	mov	r0, r7
 8011a18:	4798      	blx	r3
 8011a1a:	9a05      	ldr	r2, [sp, #20]
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	f43f af04 	beq.w	801182a <_scanf_float+0x4a>
 8011a22:	e715      	b.n	8011850 <_scanf_float+0x70>
 8011a24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a28:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	4638      	mov	r0, r7
 8011a30:	4798      	blx	r3
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	3b01      	subs	r3, #1
 8011a36:	6123      	str	r3, [r4, #16]
 8011a38:	e715      	b.n	8011866 <_scanf_float+0x86>
 8011a3a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011a3e:	2b06      	cmp	r3, #6
 8011a40:	d80a      	bhi.n	8011a58 <_scanf_float+0x278>
 8011a42:	f1bb 0f02 	cmp.w	fp, #2
 8011a46:	d968      	bls.n	8011b1a <_scanf_float+0x33a>
 8011a48:	f1ab 0b03 	sub.w	fp, fp, #3
 8011a4c:	fa5f fb8b 	uxtb.w	fp, fp
 8011a50:	eba5 0b0b 	sub.w	fp, r5, fp
 8011a54:	455d      	cmp	r5, fp
 8011a56:	d14b      	bne.n	8011af0 <_scanf_float+0x310>
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	05da      	lsls	r2, r3, #23
 8011a5c:	d51f      	bpl.n	8011a9e <_scanf_float+0x2be>
 8011a5e:	055b      	lsls	r3, r3, #21
 8011a60:	d468      	bmi.n	8011b34 <_scanf_float+0x354>
 8011a62:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011a66:	6923      	ldr	r3, [r4, #16]
 8011a68:	2965      	cmp	r1, #101	; 0x65
 8011a6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a6e:	f105 3bff 	add.w	fp, r5, #4294967295
 8011a72:	6123      	str	r3, [r4, #16]
 8011a74:	d00d      	beq.n	8011a92 <_scanf_float+0x2b2>
 8011a76:	2945      	cmp	r1, #69	; 0x45
 8011a78:	d00b      	beq.n	8011a92 <_scanf_float+0x2b2>
 8011a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a7e:	4632      	mov	r2, r6
 8011a80:	4638      	mov	r0, r7
 8011a82:	4798      	blx	r3
 8011a84:	6923      	ldr	r3, [r4, #16]
 8011a86:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	f1a5 0b02 	sub.w	fp, r5, #2
 8011a90:	6123      	str	r3, [r4, #16]
 8011a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011a96:	4632      	mov	r2, r6
 8011a98:	4638      	mov	r0, r7
 8011a9a:	4798      	blx	r3
 8011a9c:	465d      	mov	r5, fp
 8011a9e:	6826      	ldr	r6, [r4, #0]
 8011aa0:	f016 0610 	ands.w	r6, r6, #16
 8011aa4:	d17a      	bne.n	8011b9c <_scanf_float+0x3bc>
 8011aa6:	702e      	strb	r6, [r5, #0]
 8011aa8:	6823      	ldr	r3, [r4, #0]
 8011aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ab2:	d142      	bne.n	8011b3a <_scanf_float+0x35a>
 8011ab4:	9b02      	ldr	r3, [sp, #8]
 8011ab6:	eba9 0303 	sub.w	r3, r9, r3
 8011aba:	425a      	negs	r2, r3
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d149      	bne.n	8011b54 <_scanf_float+0x374>
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	4641      	mov	r1, r8
 8011ac4:	4638      	mov	r0, r7
 8011ac6:	f000 fee7 	bl	8012898 <_strtod_r>
 8011aca:	6825      	ldr	r5, [r4, #0]
 8011acc:	f8da 3000 	ldr.w	r3, [sl]
 8011ad0:	f015 0f02 	tst.w	r5, #2
 8011ad4:	f103 0204 	add.w	r2, r3, #4
 8011ad8:	ec59 8b10 	vmov	r8, r9, d0
 8011adc:	f8ca 2000 	str.w	r2, [sl]
 8011ae0:	d043      	beq.n	8011b6a <_scanf_float+0x38a>
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	e9c3 8900 	strd	r8, r9, [r3]
 8011ae8:	68e3      	ldr	r3, [r4, #12]
 8011aea:	3301      	adds	r3, #1
 8011aec:	60e3      	str	r3, [r4, #12]
 8011aee:	e6be      	b.n	801186e <_scanf_float+0x8e>
 8011af0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011af4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011af8:	4632      	mov	r2, r6
 8011afa:	4638      	mov	r0, r7
 8011afc:	4798      	blx	r3
 8011afe:	6923      	ldr	r3, [r4, #16]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	6123      	str	r3, [r4, #16]
 8011b04:	e7a6      	b.n	8011a54 <_scanf_float+0x274>
 8011b06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b0a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011b0e:	4632      	mov	r2, r6
 8011b10:	4638      	mov	r0, r7
 8011b12:	4798      	blx	r3
 8011b14:	6923      	ldr	r3, [r4, #16]
 8011b16:	3b01      	subs	r3, #1
 8011b18:	6123      	str	r3, [r4, #16]
 8011b1a:	4545      	cmp	r5, r8
 8011b1c:	d8f3      	bhi.n	8011b06 <_scanf_float+0x326>
 8011b1e:	e6a5      	b.n	801186c <_scanf_float+0x8c>
 8011b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011b28:	4632      	mov	r2, r6
 8011b2a:	4638      	mov	r0, r7
 8011b2c:	4798      	blx	r3
 8011b2e:	6923      	ldr	r3, [r4, #16]
 8011b30:	3b01      	subs	r3, #1
 8011b32:	6123      	str	r3, [r4, #16]
 8011b34:	4545      	cmp	r5, r8
 8011b36:	d8f3      	bhi.n	8011b20 <_scanf_float+0x340>
 8011b38:	e698      	b.n	801186c <_scanf_float+0x8c>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d0bf      	beq.n	8011ac0 <_scanf_float+0x2e0>
 8011b40:	9904      	ldr	r1, [sp, #16]
 8011b42:	230a      	movs	r3, #10
 8011b44:	4632      	mov	r2, r6
 8011b46:	3101      	adds	r1, #1
 8011b48:	4638      	mov	r0, r7
 8011b4a:	f000 ff31 	bl	80129b0 <_strtol_r>
 8011b4e:	9b03      	ldr	r3, [sp, #12]
 8011b50:	9d04      	ldr	r5, [sp, #16]
 8011b52:	1ac2      	subs	r2, r0, r3
 8011b54:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011b58:	429d      	cmp	r5, r3
 8011b5a:	bf28      	it	cs
 8011b5c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011b60:	490f      	ldr	r1, [pc, #60]	; (8011ba0 <_scanf_float+0x3c0>)
 8011b62:	4628      	mov	r0, r5
 8011b64:	f000 f83c 	bl	8011be0 <siprintf>
 8011b68:	e7aa      	b.n	8011ac0 <_scanf_float+0x2e0>
 8011b6a:	f015 0504 	ands.w	r5, r5, #4
 8011b6e:	d1b8      	bne.n	8011ae2 <_scanf_float+0x302>
 8011b70:	681f      	ldr	r7, [r3, #0]
 8011b72:	ee10 2a10 	vmov	r2, s0
 8011b76:	464b      	mov	r3, r9
 8011b78:	ee10 0a10 	vmov	r0, s0
 8011b7c:	4649      	mov	r1, r9
 8011b7e:	f7ee ffd5 	bl	8000b2c <__aeabi_dcmpun>
 8011b82:	b128      	cbz	r0, 8011b90 <_scanf_float+0x3b0>
 8011b84:	4628      	mov	r0, r5
 8011b86:	f000 f825 	bl	8011bd4 <nanf>
 8011b8a:	ed87 0a00 	vstr	s0, [r7]
 8011b8e:	e7ab      	b.n	8011ae8 <_scanf_float+0x308>
 8011b90:	4640      	mov	r0, r8
 8011b92:	4649      	mov	r1, r9
 8011b94:	f7ef f828 	bl	8000be8 <__aeabi_d2f>
 8011b98:	6038      	str	r0, [r7, #0]
 8011b9a:	e7a5      	b.n	8011ae8 <_scanf_float+0x308>
 8011b9c:	2600      	movs	r6, #0
 8011b9e:	e666      	b.n	801186e <_scanf_float+0x8e>
 8011ba0:	08015a50 	.word	0x08015a50

08011ba4 <iprintf>:
 8011ba4:	b40f      	push	{r0, r1, r2, r3}
 8011ba6:	4b0a      	ldr	r3, [pc, #40]	; (8011bd0 <iprintf+0x2c>)
 8011ba8:	b513      	push	{r0, r1, r4, lr}
 8011baa:	681c      	ldr	r4, [r3, #0]
 8011bac:	b124      	cbz	r4, 8011bb8 <iprintf+0x14>
 8011bae:	69a3      	ldr	r3, [r4, #24]
 8011bb0:	b913      	cbnz	r3, 8011bb8 <iprintf+0x14>
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	f001 fd94 	bl	80136e0 <__sinit>
 8011bb8:	ab05      	add	r3, sp, #20
 8011bba:	9a04      	ldr	r2, [sp, #16]
 8011bbc:	68a1      	ldr	r1, [r4, #8]
 8011bbe:	9301      	str	r3, [sp, #4]
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f002 ff9d 	bl	8014b00 <_vfiprintf_r>
 8011bc6:	b002      	add	sp, #8
 8011bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bcc:	b004      	add	sp, #16
 8011bce:	4770      	bx	lr
 8011bd0:	20000010 	.word	0x20000010

08011bd4 <nanf>:
 8011bd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011bdc <nanf+0x8>
 8011bd8:	4770      	bx	lr
 8011bda:	bf00      	nop
 8011bdc:	7fc00000 	.word	0x7fc00000

08011be0 <siprintf>:
 8011be0:	b40e      	push	{r1, r2, r3}
 8011be2:	b500      	push	{lr}
 8011be4:	b09c      	sub	sp, #112	; 0x70
 8011be6:	ab1d      	add	r3, sp, #116	; 0x74
 8011be8:	9002      	str	r0, [sp, #8]
 8011bea:	9006      	str	r0, [sp, #24]
 8011bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bf0:	4809      	ldr	r0, [pc, #36]	; (8011c18 <siprintf+0x38>)
 8011bf2:	9107      	str	r1, [sp, #28]
 8011bf4:	9104      	str	r1, [sp, #16]
 8011bf6:	4909      	ldr	r1, [pc, #36]	; (8011c1c <siprintf+0x3c>)
 8011bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bfc:	9105      	str	r1, [sp, #20]
 8011bfe:	6800      	ldr	r0, [r0, #0]
 8011c00:	9301      	str	r3, [sp, #4]
 8011c02:	a902      	add	r1, sp, #8
 8011c04:	f002 fe5a 	bl	80148bc <_svfiprintf_r>
 8011c08:	9b02      	ldr	r3, [sp, #8]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	701a      	strb	r2, [r3, #0]
 8011c0e:	b01c      	add	sp, #112	; 0x70
 8011c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c14:	b003      	add	sp, #12
 8011c16:	4770      	bx	lr
 8011c18:	20000010 	.word	0x20000010
 8011c1c:	ffff0208 	.word	0xffff0208

08011c20 <strcat>:
 8011c20:	b510      	push	{r4, lr}
 8011c22:	4603      	mov	r3, r0
 8011c24:	781a      	ldrb	r2, [r3, #0]
 8011c26:	1c5c      	adds	r4, r3, #1
 8011c28:	b93a      	cbnz	r2, 8011c3a <strcat+0x1a>
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c34:	2a00      	cmp	r2, #0
 8011c36:	d1f9      	bne.n	8011c2c <strcat+0xc>
 8011c38:	bd10      	pop	{r4, pc}
 8011c3a:	4623      	mov	r3, r4
 8011c3c:	e7f2      	b.n	8011c24 <strcat+0x4>

08011c3e <strstr>:
 8011c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c40:	7803      	ldrb	r3, [r0, #0]
 8011c42:	b17b      	cbz	r3, 8011c64 <strstr+0x26>
 8011c44:	4604      	mov	r4, r0
 8011c46:	7823      	ldrb	r3, [r4, #0]
 8011c48:	4620      	mov	r0, r4
 8011c4a:	1c66      	adds	r6, r4, #1
 8011c4c:	b17b      	cbz	r3, 8011c6e <strstr+0x30>
 8011c4e:	1e4a      	subs	r2, r1, #1
 8011c50:	1e63      	subs	r3, r4, #1
 8011c52:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011c56:	b14d      	cbz	r5, 8011c6c <strstr+0x2e>
 8011c58:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8011c5c:	42af      	cmp	r7, r5
 8011c5e:	4634      	mov	r4, r6
 8011c60:	d0f7      	beq.n	8011c52 <strstr+0x14>
 8011c62:	e7f0      	b.n	8011c46 <strstr+0x8>
 8011c64:	780b      	ldrb	r3, [r1, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	bf18      	it	ne
 8011c6a:	2000      	movne	r0, #0
 8011c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	e7fc      	b.n	8011c6c <strstr+0x2e>

08011c72 <sulp>:
 8011c72:	b570      	push	{r4, r5, r6, lr}
 8011c74:	4604      	mov	r4, r0
 8011c76:	460d      	mov	r5, r1
 8011c78:	ec45 4b10 	vmov	d0, r4, r5
 8011c7c:	4616      	mov	r6, r2
 8011c7e:	f002 fbd9 	bl	8014434 <__ulp>
 8011c82:	ec51 0b10 	vmov	r0, r1, d0
 8011c86:	b17e      	cbz	r6, 8011ca8 <sulp+0x36>
 8011c88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	dd09      	ble.n	8011ca8 <sulp+0x36>
 8011c94:	051b      	lsls	r3, r3, #20
 8011c96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011c9a:	2400      	movs	r4, #0
 8011c9c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	462b      	mov	r3, r5
 8011ca4:	f7ee fca8 	bl	80005f8 <__aeabi_dmul>
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
 8011caa:	0000      	movs	r0, r0
 8011cac:	0000      	movs	r0, r0
	...

08011cb0 <_strtod_l>:
 8011cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb4:	461f      	mov	r7, r3
 8011cb6:	b0a1      	sub	sp, #132	; 0x84
 8011cb8:	2300      	movs	r3, #0
 8011cba:	4681      	mov	r9, r0
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	460e      	mov	r6, r1
 8011cc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8011cc2:	931c      	str	r3, [sp, #112]	; 0x70
 8011cc4:	f002 f8bf 	bl	8013e46 <__localeconv_l>
 8011cc8:	4680      	mov	r8, r0
 8011cca:	6800      	ldr	r0, [r0, #0]
 8011ccc:	f7ee fa80 	bl	80001d0 <strlen>
 8011cd0:	f04f 0a00 	mov.w	sl, #0
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	f04f 0b00 	mov.w	fp, #0
 8011cda:	961b      	str	r6, [sp, #108]	; 0x6c
 8011cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cde:	781a      	ldrb	r2, [r3, #0]
 8011ce0:	2a0d      	cmp	r2, #13
 8011ce2:	d832      	bhi.n	8011d4a <_strtod_l+0x9a>
 8011ce4:	2a09      	cmp	r2, #9
 8011ce6:	d236      	bcs.n	8011d56 <_strtod_l+0xa6>
 8011ce8:	2a00      	cmp	r2, #0
 8011cea:	d03e      	beq.n	8011d6a <_strtod_l+0xba>
 8011cec:	2300      	movs	r3, #0
 8011cee:	930d      	str	r3, [sp, #52]	; 0x34
 8011cf0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011cf2:	782b      	ldrb	r3, [r5, #0]
 8011cf4:	2b30      	cmp	r3, #48	; 0x30
 8011cf6:	f040 80ac 	bne.w	8011e52 <_strtod_l+0x1a2>
 8011cfa:	786b      	ldrb	r3, [r5, #1]
 8011cfc:	2b58      	cmp	r3, #88	; 0x58
 8011cfe:	d001      	beq.n	8011d04 <_strtod_l+0x54>
 8011d00:	2b78      	cmp	r3, #120	; 0x78
 8011d02:	d167      	bne.n	8011dd4 <_strtod_l+0x124>
 8011d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d06:	9301      	str	r3, [sp, #4]
 8011d08:	ab1c      	add	r3, sp, #112	; 0x70
 8011d0a:	9300      	str	r3, [sp, #0]
 8011d0c:	9702      	str	r7, [sp, #8]
 8011d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8011d10:	4a88      	ldr	r2, [pc, #544]	; (8011f34 <_strtod_l+0x284>)
 8011d12:	a91b      	add	r1, sp, #108	; 0x6c
 8011d14:	4648      	mov	r0, r9
 8011d16:	f001 fdbc 	bl	8013892 <__gethex>
 8011d1a:	f010 0407 	ands.w	r4, r0, #7
 8011d1e:	4606      	mov	r6, r0
 8011d20:	d005      	beq.n	8011d2e <_strtod_l+0x7e>
 8011d22:	2c06      	cmp	r4, #6
 8011d24:	d12b      	bne.n	8011d7e <_strtod_l+0xce>
 8011d26:	3501      	adds	r5, #1
 8011d28:	2300      	movs	r3, #0
 8011d2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8011d2c:	930d      	str	r3, [sp, #52]	; 0x34
 8011d2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f040 859a 	bne.w	801286a <_strtod_l+0xbba>
 8011d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d38:	b1e3      	cbz	r3, 8011d74 <_strtod_l+0xc4>
 8011d3a:	4652      	mov	r2, sl
 8011d3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011d40:	ec43 2b10 	vmov	d0, r2, r3
 8011d44:	b021      	add	sp, #132	; 0x84
 8011d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4a:	2a2b      	cmp	r2, #43	; 0x2b
 8011d4c:	d015      	beq.n	8011d7a <_strtod_l+0xca>
 8011d4e:	2a2d      	cmp	r2, #45	; 0x2d
 8011d50:	d004      	beq.n	8011d5c <_strtod_l+0xac>
 8011d52:	2a20      	cmp	r2, #32
 8011d54:	d1ca      	bne.n	8011cec <_strtod_l+0x3c>
 8011d56:	3301      	adds	r3, #1
 8011d58:	931b      	str	r3, [sp, #108]	; 0x6c
 8011d5a:	e7bf      	b.n	8011cdc <_strtod_l+0x2c>
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	920d      	str	r2, [sp, #52]	; 0x34
 8011d60:	1c5a      	adds	r2, r3, #1
 8011d62:	921b      	str	r2, [sp, #108]	; 0x6c
 8011d64:	785b      	ldrb	r3, [r3, #1]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d1c2      	bne.n	8011cf0 <_strtod_l+0x40>
 8011d6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f040 8579 	bne.w	8012866 <_strtod_l+0xbb6>
 8011d74:	4652      	mov	r2, sl
 8011d76:	465b      	mov	r3, fp
 8011d78:	e7e2      	b.n	8011d40 <_strtod_l+0x90>
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	e7ef      	b.n	8011d5e <_strtod_l+0xae>
 8011d7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011d80:	b13a      	cbz	r2, 8011d92 <_strtod_l+0xe2>
 8011d82:	2135      	movs	r1, #53	; 0x35
 8011d84:	a81e      	add	r0, sp, #120	; 0x78
 8011d86:	f002 fc4d 	bl	8014624 <__copybits>
 8011d8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d8c:	4648      	mov	r0, r9
 8011d8e:	f002 f8b9 	bl	8013f04 <_Bfree>
 8011d92:	3c01      	subs	r4, #1
 8011d94:	2c04      	cmp	r4, #4
 8011d96:	d806      	bhi.n	8011da6 <_strtod_l+0xf6>
 8011d98:	e8df f004 	tbb	[pc, r4]
 8011d9c:	1714030a 	.word	0x1714030a
 8011da0:	0a          	.byte	0x0a
 8011da1:	00          	.byte	0x00
 8011da2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8011da6:	0730      	lsls	r0, r6, #28
 8011da8:	d5c1      	bpl.n	8011d2e <_strtod_l+0x7e>
 8011daa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011dae:	e7be      	b.n	8011d2e <_strtod_l+0x7e>
 8011db0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8011db4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011db6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011dba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011dbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011dc2:	e7f0      	b.n	8011da6 <_strtod_l+0xf6>
 8011dc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011f38 <_strtod_l+0x288>
 8011dc8:	e7ed      	b.n	8011da6 <_strtod_l+0xf6>
 8011dca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011dce:	f04f 3aff 	mov.w	sl, #4294967295
 8011dd2:	e7e8      	b.n	8011da6 <_strtod_l+0xf6>
 8011dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011dd6:	1c5a      	adds	r2, r3, #1
 8011dd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8011dda:	785b      	ldrb	r3, [r3, #1]
 8011ddc:	2b30      	cmp	r3, #48	; 0x30
 8011dde:	d0f9      	beq.n	8011dd4 <_strtod_l+0x124>
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d0a4      	beq.n	8011d2e <_strtod_l+0x7e>
 8011de4:	2301      	movs	r3, #1
 8011de6:	2500      	movs	r5, #0
 8011de8:	9306      	str	r3, [sp, #24]
 8011dea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011dec:	9308      	str	r3, [sp, #32]
 8011dee:	9507      	str	r5, [sp, #28]
 8011df0:	9505      	str	r5, [sp, #20]
 8011df2:	220a      	movs	r2, #10
 8011df4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011df6:	7807      	ldrb	r7, [r0, #0]
 8011df8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011dfc:	b2d9      	uxtb	r1, r3
 8011dfe:	2909      	cmp	r1, #9
 8011e00:	d929      	bls.n	8011e56 <_strtod_l+0x1a6>
 8011e02:	4622      	mov	r2, r4
 8011e04:	f8d8 1000 	ldr.w	r1, [r8]
 8011e08:	f002 ffe3 	bl	8014dd2 <strncmp>
 8011e0c:	2800      	cmp	r0, #0
 8011e0e:	d031      	beq.n	8011e74 <_strtod_l+0x1c4>
 8011e10:	2000      	movs	r0, #0
 8011e12:	9c05      	ldr	r4, [sp, #20]
 8011e14:	9004      	str	r0, [sp, #16]
 8011e16:	463b      	mov	r3, r7
 8011e18:	4602      	mov	r2, r0
 8011e1a:	2b65      	cmp	r3, #101	; 0x65
 8011e1c:	d001      	beq.n	8011e22 <_strtod_l+0x172>
 8011e1e:	2b45      	cmp	r3, #69	; 0x45
 8011e20:	d114      	bne.n	8011e4c <_strtod_l+0x19c>
 8011e22:	b924      	cbnz	r4, 8011e2e <_strtod_l+0x17e>
 8011e24:	b910      	cbnz	r0, 8011e2c <_strtod_l+0x17c>
 8011e26:	9b06      	ldr	r3, [sp, #24]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d09e      	beq.n	8011d6a <_strtod_l+0xba>
 8011e2c:	2400      	movs	r4, #0
 8011e2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011e30:	1c73      	adds	r3, r6, #1
 8011e32:	931b      	str	r3, [sp, #108]	; 0x6c
 8011e34:	7873      	ldrb	r3, [r6, #1]
 8011e36:	2b2b      	cmp	r3, #43	; 0x2b
 8011e38:	d078      	beq.n	8011f2c <_strtod_l+0x27c>
 8011e3a:	2b2d      	cmp	r3, #45	; 0x2d
 8011e3c:	d070      	beq.n	8011f20 <_strtod_l+0x270>
 8011e3e:	f04f 0c00 	mov.w	ip, #0
 8011e42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011e46:	2f09      	cmp	r7, #9
 8011e48:	d97c      	bls.n	8011f44 <_strtod_l+0x294>
 8011e4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8011e4c:	f04f 0e00 	mov.w	lr, #0
 8011e50:	e09a      	b.n	8011f88 <_strtod_l+0x2d8>
 8011e52:	2300      	movs	r3, #0
 8011e54:	e7c7      	b.n	8011de6 <_strtod_l+0x136>
 8011e56:	9905      	ldr	r1, [sp, #20]
 8011e58:	2908      	cmp	r1, #8
 8011e5a:	bfdd      	ittte	le
 8011e5c:	9907      	ldrle	r1, [sp, #28]
 8011e5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e62:	9307      	strle	r3, [sp, #28]
 8011e64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011e68:	9b05      	ldr	r3, [sp, #20]
 8011e6a:	3001      	adds	r0, #1
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	9305      	str	r3, [sp, #20]
 8011e70:	901b      	str	r0, [sp, #108]	; 0x6c
 8011e72:	e7bf      	b.n	8011df4 <_strtod_l+0x144>
 8011e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e76:	191a      	adds	r2, r3, r4
 8011e78:	921b      	str	r2, [sp, #108]	; 0x6c
 8011e7a:	9a05      	ldr	r2, [sp, #20]
 8011e7c:	5d1b      	ldrb	r3, [r3, r4]
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	d037      	beq.n	8011ef2 <_strtod_l+0x242>
 8011e82:	9c05      	ldr	r4, [sp, #20]
 8011e84:	4602      	mov	r2, r0
 8011e86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011e8a:	2909      	cmp	r1, #9
 8011e8c:	d913      	bls.n	8011eb6 <_strtod_l+0x206>
 8011e8e:	2101      	movs	r1, #1
 8011e90:	9104      	str	r1, [sp, #16]
 8011e92:	e7c2      	b.n	8011e1a <_strtod_l+0x16a>
 8011e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	921b      	str	r2, [sp, #108]	; 0x6c
 8011e9a:	785b      	ldrb	r3, [r3, #1]
 8011e9c:	3001      	adds	r0, #1
 8011e9e:	2b30      	cmp	r3, #48	; 0x30
 8011ea0:	d0f8      	beq.n	8011e94 <_strtod_l+0x1e4>
 8011ea2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011ea6:	2a08      	cmp	r2, #8
 8011ea8:	f200 84e4 	bhi.w	8012874 <_strtod_l+0xbc4>
 8011eac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011eae:	9208      	str	r2, [sp, #32]
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011eba:	f100 0101 	add.w	r1, r0, #1
 8011ebe:	d012      	beq.n	8011ee6 <_strtod_l+0x236>
 8011ec0:	440a      	add	r2, r1
 8011ec2:	eb00 0c04 	add.w	ip, r0, r4
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	270a      	movs	r7, #10
 8011eca:	458c      	cmp	ip, r1
 8011ecc:	d113      	bne.n	8011ef6 <_strtod_l+0x246>
 8011ece:	1821      	adds	r1, r4, r0
 8011ed0:	2908      	cmp	r1, #8
 8011ed2:	f104 0401 	add.w	r4, r4, #1
 8011ed6:	4404      	add	r4, r0
 8011ed8:	dc19      	bgt.n	8011f0e <_strtod_l+0x25e>
 8011eda:	9b07      	ldr	r3, [sp, #28]
 8011edc:	210a      	movs	r1, #10
 8011ede:	fb01 e303 	mla	r3, r1, r3, lr
 8011ee2:	9307      	str	r3, [sp, #28]
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ee8:	1c58      	adds	r0, r3, #1
 8011eea:	901b      	str	r0, [sp, #108]	; 0x6c
 8011eec:	785b      	ldrb	r3, [r3, #1]
 8011eee:	4608      	mov	r0, r1
 8011ef0:	e7c9      	b.n	8011e86 <_strtod_l+0x1d6>
 8011ef2:	9805      	ldr	r0, [sp, #20]
 8011ef4:	e7d3      	b.n	8011e9e <_strtod_l+0x1ee>
 8011ef6:	2908      	cmp	r1, #8
 8011ef8:	f101 0101 	add.w	r1, r1, #1
 8011efc:	dc03      	bgt.n	8011f06 <_strtod_l+0x256>
 8011efe:	9b07      	ldr	r3, [sp, #28]
 8011f00:	437b      	muls	r3, r7
 8011f02:	9307      	str	r3, [sp, #28]
 8011f04:	e7e1      	b.n	8011eca <_strtod_l+0x21a>
 8011f06:	2910      	cmp	r1, #16
 8011f08:	bfd8      	it	le
 8011f0a:	437d      	mulle	r5, r7
 8011f0c:	e7dd      	b.n	8011eca <_strtod_l+0x21a>
 8011f0e:	2c10      	cmp	r4, #16
 8011f10:	bfdc      	itt	le
 8011f12:	210a      	movle	r1, #10
 8011f14:	fb01 e505 	mlale	r5, r1, r5, lr
 8011f18:	e7e4      	b.n	8011ee4 <_strtod_l+0x234>
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	e781      	b.n	8011e24 <_strtod_l+0x174>
 8011f20:	f04f 0c01 	mov.w	ip, #1
 8011f24:	1cb3      	adds	r3, r6, #2
 8011f26:	931b      	str	r3, [sp, #108]	; 0x6c
 8011f28:	78b3      	ldrb	r3, [r6, #2]
 8011f2a:	e78a      	b.n	8011e42 <_strtod_l+0x192>
 8011f2c:	f04f 0c00 	mov.w	ip, #0
 8011f30:	e7f8      	b.n	8011f24 <_strtod_l+0x274>
 8011f32:	bf00      	nop
 8011f34:	08015a58 	.word	0x08015a58
 8011f38:	7ff00000 	.word	0x7ff00000
 8011f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f3e:	1c5f      	adds	r7, r3, #1
 8011f40:	971b      	str	r7, [sp, #108]	; 0x6c
 8011f42:	785b      	ldrb	r3, [r3, #1]
 8011f44:	2b30      	cmp	r3, #48	; 0x30
 8011f46:	d0f9      	beq.n	8011f3c <_strtod_l+0x28c>
 8011f48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011f4c:	2f08      	cmp	r7, #8
 8011f4e:	f63f af7d 	bhi.w	8011e4c <_strtod_l+0x19c>
 8011f52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f58:	930a      	str	r3, [sp, #40]	; 0x28
 8011f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f5c:	1c5f      	adds	r7, r3, #1
 8011f5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8011f60:	785b      	ldrb	r3, [r3, #1]
 8011f62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011f66:	f1b8 0f09 	cmp.w	r8, #9
 8011f6a:	d937      	bls.n	8011fdc <_strtod_l+0x32c>
 8011f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f6e:	1a7f      	subs	r7, r7, r1
 8011f70:	2f08      	cmp	r7, #8
 8011f72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011f76:	dc37      	bgt.n	8011fe8 <_strtod_l+0x338>
 8011f78:	45be      	cmp	lr, r7
 8011f7a:	bfa8      	it	ge
 8011f7c:	46be      	movge	lr, r7
 8011f7e:	f1bc 0f00 	cmp.w	ip, #0
 8011f82:	d001      	beq.n	8011f88 <_strtod_l+0x2d8>
 8011f84:	f1ce 0e00 	rsb	lr, lr, #0
 8011f88:	2c00      	cmp	r4, #0
 8011f8a:	d151      	bne.n	8012030 <_strtod_l+0x380>
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	f47f aece 	bne.w	8011d2e <_strtod_l+0x7e>
 8011f92:	9a06      	ldr	r2, [sp, #24]
 8011f94:	2a00      	cmp	r2, #0
 8011f96:	f47f aeca 	bne.w	8011d2e <_strtod_l+0x7e>
 8011f9a:	9a04      	ldr	r2, [sp, #16]
 8011f9c:	2a00      	cmp	r2, #0
 8011f9e:	f47f aee4 	bne.w	8011d6a <_strtod_l+0xba>
 8011fa2:	2b4e      	cmp	r3, #78	; 0x4e
 8011fa4:	d027      	beq.n	8011ff6 <_strtod_l+0x346>
 8011fa6:	dc21      	bgt.n	8011fec <_strtod_l+0x33c>
 8011fa8:	2b49      	cmp	r3, #73	; 0x49
 8011faa:	f47f aede 	bne.w	8011d6a <_strtod_l+0xba>
 8011fae:	49a0      	ldr	r1, [pc, #640]	; (8012230 <_strtod_l+0x580>)
 8011fb0:	a81b      	add	r0, sp, #108	; 0x6c
 8011fb2:	f001 fea1 	bl	8013cf8 <__match>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	f43f aed7 	beq.w	8011d6a <_strtod_l+0xba>
 8011fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fbe:	499d      	ldr	r1, [pc, #628]	; (8012234 <_strtod_l+0x584>)
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	a81b      	add	r0, sp, #108	; 0x6c
 8011fc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fc6:	f001 fe97 	bl	8013cf8 <__match>
 8011fca:	b910      	cbnz	r0, 8011fd2 <_strtod_l+0x322>
 8011fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011fce:	3301      	adds	r3, #1
 8011fd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8011fd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8012248 <_strtod_l+0x598>
 8011fd6:	f04f 0a00 	mov.w	sl, #0
 8011fda:	e6a8      	b.n	8011d2e <_strtod_l+0x7e>
 8011fdc:	210a      	movs	r1, #10
 8011fde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011fe2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011fe6:	e7b8      	b.n	8011f5a <_strtod_l+0x2aa>
 8011fe8:	46be      	mov	lr, r7
 8011fea:	e7c8      	b.n	8011f7e <_strtod_l+0x2ce>
 8011fec:	2b69      	cmp	r3, #105	; 0x69
 8011fee:	d0de      	beq.n	8011fae <_strtod_l+0x2fe>
 8011ff0:	2b6e      	cmp	r3, #110	; 0x6e
 8011ff2:	f47f aeba 	bne.w	8011d6a <_strtod_l+0xba>
 8011ff6:	4990      	ldr	r1, [pc, #576]	; (8012238 <_strtod_l+0x588>)
 8011ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8011ffa:	f001 fe7d 	bl	8013cf8 <__match>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	f43f aeb3 	beq.w	8011d6a <_strtod_l+0xba>
 8012004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	2b28      	cmp	r3, #40	; 0x28
 801200a:	d10e      	bne.n	801202a <_strtod_l+0x37a>
 801200c:	aa1e      	add	r2, sp, #120	; 0x78
 801200e:	498b      	ldr	r1, [pc, #556]	; (801223c <_strtod_l+0x58c>)
 8012010:	a81b      	add	r0, sp, #108	; 0x6c
 8012012:	f001 fe85 	bl	8013d20 <__hexnan>
 8012016:	2805      	cmp	r0, #5
 8012018:	d107      	bne.n	801202a <_strtod_l+0x37a>
 801201a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801201c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012020:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012024:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012028:	e681      	b.n	8011d2e <_strtod_l+0x7e>
 801202a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8012250 <_strtod_l+0x5a0>
 801202e:	e7d2      	b.n	8011fd6 <_strtod_l+0x326>
 8012030:	ebae 0302 	sub.w	r3, lr, r2
 8012034:	9306      	str	r3, [sp, #24]
 8012036:	9b05      	ldr	r3, [sp, #20]
 8012038:	9807      	ldr	r0, [sp, #28]
 801203a:	2b00      	cmp	r3, #0
 801203c:	bf08      	it	eq
 801203e:	4623      	moveq	r3, r4
 8012040:	2c10      	cmp	r4, #16
 8012042:	9305      	str	r3, [sp, #20]
 8012044:	46a0      	mov	r8, r4
 8012046:	bfa8      	it	ge
 8012048:	f04f 0810 	movge.w	r8, #16
 801204c:	f7ee fa5a 	bl	8000504 <__aeabi_ui2d>
 8012050:	2c09      	cmp	r4, #9
 8012052:	4682      	mov	sl, r0
 8012054:	468b      	mov	fp, r1
 8012056:	dc13      	bgt.n	8012080 <_strtod_l+0x3d0>
 8012058:	9b06      	ldr	r3, [sp, #24]
 801205a:	2b00      	cmp	r3, #0
 801205c:	f43f ae67 	beq.w	8011d2e <_strtod_l+0x7e>
 8012060:	9b06      	ldr	r3, [sp, #24]
 8012062:	dd7a      	ble.n	801215a <_strtod_l+0x4aa>
 8012064:	2b16      	cmp	r3, #22
 8012066:	dc61      	bgt.n	801212c <_strtod_l+0x47c>
 8012068:	4a75      	ldr	r2, [pc, #468]	; (8012240 <_strtod_l+0x590>)
 801206a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801206e:	e9de 0100 	ldrd	r0, r1, [lr]
 8012072:	4652      	mov	r2, sl
 8012074:	465b      	mov	r3, fp
 8012076:	f7ee fabf 	bl	80005f8 <__aeabi_dmul>
 801207a:	4682      	mov	sl, r0
 801207c:	468b      	mov	fp, r1
 801207e:	e656      	b.n	8011d2e <_strtod_l+0x7e>
 8012080:	4b6f      	ldr	r3, [pc, #444]	; (8012240 <_strtod_l+0x590>)
 8012082:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012086:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801208a:	f7ee fab5 	bl	80005f8 <__aeabi_dmul>
 801208e:	4606      	mov	r6, r0
 8012090:	4628      	mov	r0, r5
 8012092:	460f      	mov	r7, r1
 8012094:	f7ee fa36 	bl	8000504 <__aeabi_ui2d>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	4630      	mov	r0, r6
 801209e:	4639      	mov	r1, r7
 80120a0:	f7ee f8f4 	bl	800028c <__adddf3>
 80120a4:	2c0f      	cmp	r4, #15
 80120a6:	4682      	mov	sl, r0
 80120a8:	468b      	mov	fp, r1
 80120aa:	ddd5      	ble.n	8012058 <_strtod_l+0x3a8>
 80120ac:	9b06      	ldr	r3, [sp, #24]
 80120ae:	eba4 0808 	sub.w	r8, r4, r8
 80120b2:	4498      	add	r8, r3
 80120b4:	f1b8 0f00 	cmp.w	r8, #0
 80120b8:	f340 8096 	ble.w	80121e8 <_strtod_l+0x538>
 80120bc:	f018 030f 	ands.w	r3, r8, #15
 80120c0:	d00a      	beq.n	80120d8 <_strtod_l+0x428>
 80120c2:	495f      	ldr	r1, [pc, #380]	; (8012240 <_strtod_l+0x590>)
 80120c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80120c8:	4652      	mov	r2, sl
 80120ca:	465b      	mov	r3, fp
 80120cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120d0:	f7ee fa92 	bl	80005f8 <__aeabi_dmul>
 80120d4:	4682      	mov	sl, r0
 80120d6:	468b      	mov	fp, r1
 80120d8:	f038 080f 	bics.w	r8, r8, #15
 80120dc:	d073      	beq.n	80121c6 <_strtod_l+0x516>
 80120de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80120e2:	dd47      	ble.n	8012174 <_strtod_l+0x4c4>
 80120e4:	2400      	movs	r4, #0
 80120e6:	46a0      	mov	r8, r4
 80120e8:	9407      	str	r4, [sp, #28]
 80120ea:	9405      	str	r4, [sp, #20]
 80120ec:	2322      	movs	r3, #34	; 0x22
 80120ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8012248 <_strtod_l+0x598>
 80120f2:	f8c9 3000 	str.w	r3, [r9]
 80120f6:	f04f 0a00 	mov.w	sl, #0
 80120fa:	9b07      	ldr	r3, [sp, #28]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f43f ae16 	beq.w	8011d2e <_strtod_l+0x7e>
 8012102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012104:	4648      	mov	r0, r9
 8012106:	f001 fefd 	bl	8013f04 <_Bfree>
 801210a:	9905      	ldr	r1, [sp, #20]
 801210c:	4648      	mov	r0, r9
 801210e:	f001 fef9 	bl	8013f04 <_Bfree>
 8012112:	4641      	mov	r1, r8
 8012114:	4648      	mov	r0, r9
 8012116:	f001 fef5 	bl	8013f04 <_Bfree>
 801211a:	9907      	ldr	r1, [sp, #28]
 801211c:	4648      	mov	r0, r9
 801211e:	f001 fef1 	bl	8013f04 <_Bfree>
 8012122:	4621      	mov	r1, r4
 8012124:	4648      	mov	r0, r9
 8012126:	f001 feed 	bl	8013f04 <_Bfree>
 801212a:	e600      	b.n	8011d2e <_strtod_l+0x7e>
 801212c:	9a06      	ldr	r2, [sp, #24]
 801212e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8012132:	4293      	cmp	r3, r2
 8012134:	dbba      	blt.n	80120ac <_strtod_l+0x3fc>
 8012136:	4d42      	ldr	r5, [pc, #264]	; (8012240 <_strtod_l+0x590>)
 8012138:	f1c4 040f 	rsb	r4, r4, #15
 801213c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8012140:	4652      	mov	r2, sl
 8012142:	465b      	mov	r3, fp
 8012144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012148:	f7ee fa56 	bl	80005f8 <__aeabi_dmul>
 801214c:	9b06      	ldr	r3, [sp, #24]
 801214e:	1b1c      	subs	r4, r3, r4
 8012150:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8012154:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012158:	e78d      	b.n	8012076 <_strtod_l+0x3c6>
 801215a:	f113 0f16 	cmn.w	r3, #22
 801215e:	dba5      	blt.n	80120ac <_strtod_l+0x3fc>
 8012160:	4a37      	ldr	r2, [pc, #220]	; (8012240 <_strtod_l+0x590>)
 8012162:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8012166:	e9d2 2300 	ldrd	r2, r3, [r2]
 801216a:	4650      	mov	r0, sl
 801216c:	4659      	mov	r1, fp
 801216e:	f7ee fb6d 	bl	800084c <__aeabi_ddiv>
 8012172:	e782      	b.n	801207a <_strtod_l+0x3ca>
 8012174:	2300      	movs	r3, #0
 8012176:	4e33      	ldr	r6, [pc, #204]	; (8012244 <_strtod_l+0x594>)
 8012178:	ea4f 1828 	mov.w	r8, r8, asr #4
 801217c:	4650      	mov	r0, sl
 801217e:	4659      	mov	r1, fp
 8012180:	461d      	mov	r5, r3
 8012182:	f1b8 0f01 	cmp.w	r8, #1
 8012186:	dc21      	bgt.n	80121cc <_strtod_l+0x51c>
 8012188:	b10b      	cbz	r3, 801218e <_strtod_l+0x4de>
 801218a:	4682      	mov	sl, r0
 801218c:	468b      	mov	fp, r1
 801218e:	4b2d      	ldr	r3, [pc, #180]	; (8012244 <_strtod_l+0x594>)
 8012190:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012194:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012198:	4652      	mov	r2, sl
 801219a:	465b      	mov	r3, fp
 801219c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80121a0:	f7ee fa2a 	bl	80005f8 <__aeabi_dmul>
 80121a4:	4b28      	ldr	r3, [pc, #160]	; (8012248 <_strtod_l+0x598>)
 80121a6:	460a      	mov	r2, r1
 80121a8:	400b      	ands	r3, r1
 80121aa:	4928      	ldr	r1, [pc, #160]	; (801224c <_strtod_l+0x59c>)
 80121ac:	428b      	cmp	r3, r1
 80121ae:	4682      	mov	sl, r0
 80121b0:	d898      	bhi.n	80120e4 <_strtod_l+0x434>
 80121b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80121b6:	428b      	cmp	r3, r1
 80121b8:	bf86      	itte	hi
 80121ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012254 <_strtod_l+0x5a4>
 80121be:	f04f 3aff 	movhi.w	sl, #4294967295
 80121c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80121c6:	2300      	movs	r3, #0
 80121c8:	9304      	str	r3, [sp, #16]
 80121ca:	e077      	b.n	80122bc <_strtod_l+0x60c>
 80121cc:	f018 0f01 	tst.w	r8, #1
 80121d0:	d006      	beq.n	80121e0 <_strtod_l+0x530>
 80121d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	f7ee fa0d 	bl	80005f8 <__aeabi_dmul>
 80121de:	2301      	movs	r3, #1
 80121e0:	3501      	adds	r5, #1
 80121e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80121e6:	e7cc      	b.n	8012182 <_strtod_l+0x4d2>
 80121e8:	d0ed      	beq.n	80121c6 <_strtod_l+0x516>
 80121ea:	f1c8 0800 	rsb	r8, r8, #0
 80121ee:	f018 020f 	ands.w	r2, r8, #15
 80121f2:	d00a      	beq.n	801220a <_strtod_l+0x55a>
 80121f4:	4b12      	ldr	r3, [pc, #72]	; (8012240 <_strtod_l+0x590>)
 80121f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121fa:	4650      	mov	r0, sl
 80121fc:	4659      	mov	r1, fp
 80121fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012202:	f7ee fb23 	bl	800084c <__aeabi_ddiv>
 8012206:	4682      	mov	sl, r0
 8012208:	468b      	mov	fp, r1
 801220a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801220e:	d0da      	beq.n	80121c6 <_strtod_l+0x516>
 8012210:	f1b8 0f1f 	cmp.w	r8, #31
 8012214:	dd20      	ble.n	8012258 <_strtod_l+0x5a8>
 8012216:	2400      	movs	r4, #0
 8012218:	46a0      	mov	r8, r4
 801221a:	9407      	str	r4, [sp, #28]
 801221c:	9405      	str	r4, [sp, #20]
 801221e:	2322      	movs	r3, #34	; 0x22
 8012220:	f04f 0a00 	mov.w	sl, #0
 8012224:	f04f 0b00 	mov.w	fp, #0
 8012228:	f8c9 3000 	str.w	r3, [r9]
 801222c:	e765      	b.n	80120fa <_strtod_l+0x44a>
 801222e:	bf00      	nop
 8012230:	08015a21 	.word	0x08015a21
 8012234:	08015aab 	.word	0x08015aab
 8012238:	08015a29 	.word	0x08015a29
 801223c:	08015a6c 	.word	0x08015a6c
 8012240:	08015b50 	.word	0x08015b50
 8012244:	08015b28 	.word	0x08015b28
 8012248:	7ff00000 	.word	0x7ff00000
 801224c:	7ca00000 	.word	0x7ca00000
 8012250:	fff80000 	.word	0xfff80000
 8012254:	7fefffff 	.word	0x7fefffff
 8012258:	f018 0310 	ands.w	r3, r8, #16
 801225c:	bf18      	it	ne
 801225e:	236a      	movne	r3, #106	; 0x6a
 8012260:	4da0      	ldr	r5, [pc, #640]	; (80124e4 <_strtod_l+0x834>)
 8012262:	9304      	str	r3, [sp, #16]
 8012264:	4650      	mov	r0, sl
 8012266:	4659      	mov	r1, fp
 8012268:	2300      	movs	r3, #0
 801226a:	f1b8 0f00 	cmp.w	r8, #0
 801226e:	f300 810a 	bgt.w	8012486 <_strtod_l+0x7d6>
 8012272:	b10b      	cbz	r3, 8012278 <_strtod_l+0x5c8>
 8012274:	4682      	mov	sl, r0
 8012276:	468b      	mov	fp, r1
 8012278:	9b04      	ldr	r3, [sp, #16]
 801227a:	b1bb      	cbz	r3, 80122ac <_strtod_l+0x5fc>
 801227c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012280:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012284:	2b00      	cmp	r3, #0
 8012286:	4659      	mov	r1, fp
 8012288:	dd10      	ble.n	80122ac <_strtod_l+0x5fc>
 801228a:	2b1f      	cmp	r3, #31
 801228c:	f340 8107 	ble.w	801249e <_strtod_l+0x7ee>
 8012290:	2b34      	cmp	r3, #52	; 0x34
 8012292:	bfde      	ittt	le
 8012294:	3b20      	suble	r3, #32
 8012296:	f04f 32ff 	movle.w	r2, #4294967295
 801229a:	fa02 f303 	lslle.w	r3, r2, r3
 801229e:	f04f 0a00 	mov.w	sl, #0
 80122a2:	bfcc      	ite	gt
 80122a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80122a8:	ea03 0b01 	andle.w	fp, r3, r1
 80122ac:	2200      	movs	r2, #0
 80122ae:	2300      	movs	r3, #0
 80122b0:	4650      	mov	r0, sl
 80122b2:	4659      	mov	r1, fp
 80122b4:	f7ee fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d1ac      	bne.n	8012216 <_strtod_l+0x566>
 80122bc:	9b07      	ldr	r3, [sp, #28]
 80122be:	9300      	str	r3, [sp, #0]
 80122c0:	9a05      	ldr	r2, [sp, #20]
 80122c2:	9908      	ldr	r1, [sp, #32]
 80122c4:	4623      	mov	r3, r4
 80122c6:	4648      	mov	r0, r9
 80122c8:	f001 fe6e 	bl	8013fa8 <__s2b>
 80122cc:	9007      	str	r0, [sp, #28]
 80122ce:	2800      	cmp	r0, #0
 80122d0:	f43f af08 	beq.w	80120e4 <_strtod_l+0x434>
 80122d4:	9a06      	ldr	r2, [sp, #24]
 80122d6:	9b06      	ldr	r3, [sp, #24]
 80122d8:	2a00      	cmp	r2, #0
 80122da:	f1c3 0300 	rsb	r3, r3, #0
 80122de:	bfa8      	it	ge
 80122e0:	2300      	movge	r3, #0
 80122e2:	930e      	str	r3, [sp, #56]	; 0x38
 80122e4:	2400      	movs	r4, #0
 80122e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80122ea:	9316      	str	r3, [sp, #88]	; 0x58
 80122ec:	46a0      	mov	r8, r4
 80122ee:	9b07      	ldr	r3, [sp, #28]
 80122f0:	4648      	mov	r0, r9
 80122f2:	6859      	ldr	r1, [r3, #4]
 80122f4:	f001 fdd2 	bl	8013e9c <_Balloc>
 80122f8:	9005      	str	r0, [sp, #20]
 80122fa:	2800      	cmp	r0, #0
 80122fc:	f43f aef6 	beq.w	80120ec <_strtod_l+0x43c>
 8012300:	9b07      	ldr	r3, [sp, #28]
 8012302:	691a      	ldr	r2, [r3, #16]
 8012304:	3202      	adds	r2, #2
 8012306:	f103 010c 	add.w	r1, r3, #12
 801230a:	0092      	lsls	r2, r2, #2
 801230c:	300c      	adds	r0, #12
 801230e:	f7fe fdf7 	bl	8010f00 <memcpy>
 8012312:	aa1e      	add	r2, sp, #120	; 0x78
 8012314:	a91d      	add	r1, sp, #116	; 0x74
 8012316:	ec4b ab10 	vmov	d0, sl, fp
 801231a:	4648      	mov	r0, r9
 801231c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012320:	f002 f8fe 	bl	8014520 <__d2b>
 8012324:	901c      	str	r0, [sp, #112]	; 0x70
 8012326:	2800      	cmp	r0, #0
 8012328:	f43f aee0 	beq.w	80120ec <_strtod_l+0x43c>
 801232c:	2101      	movs	r1, #1
 801232e:	4648      	mov	r0, r9
 8012330:	f001 fec6 	bl	80140c0 <__i2b>
 8012334:	4680      	mov	r8, r0
 8012336:	2800      	cmp	r0, #0
 8012338:	f43f aed8 	beq.w	80120ec <_strtod_l+0x43c>
 801233c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801233e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012340:	2e00      	cmp	r6, #0
 8012342:	bfab      	itete	ge
 8012344:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012346:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8012348:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801234a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801234c:	bfac      	ite	ge
 801234e:	18f7      	addge	r7, r6, r3
 8012350:	1b9d      	sublt	r5, r3, r6
 8012352:	9b04      	ldr	r3, [sp, #16]
 8012354:	1af6      	subs	r6, r6, r3
 8012356:	4416      	add	r6, r2
 8012358:	4b63      	ldr	r3, [pc, #396]	; (80124e8 <_strtod_l+0x838>)
 801235a:	3e01      	subs	r6, #1
 801235c:	429e      	cmp	r6, r3
 801235e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012362:	f280 80af 	bge.w	80124c4 <_strtod_l+0x814>
 8012366:	1b9b      	subs	r3, r3, r6
 8012368:	2b1f      	cmp	r3, #31
 801236a:	eba2 0203 	sub.w	r2, r2, r3
 801236e:	f04f 0101 	mov.w	r1, #1
 8012372:	f300 809b 	bgt.w	80124ac <_strtod_l+0x7fc>
 8012376:	fa01 f303 	lsl.w	r3, r1, r3
 801237a:	930f      	str	r3, [sp, #60]	; 0x3c
 801237c:	2300      	movs	r3, #0
 801237e:	930a      	str	r3, [sp, #40]	; 0x28
 8012380:	18be      	adds	r6, r7, r2
 8012382:	9b04      	ldr	r3, [sp, #16]
 8012384:	42b7      	cmp	r7, r6
 8012386:	4415      	add	r5, r2
 8012388:	441d      	add	r5, r3
 801238a:	463b      	mov	r3, r7
 801238c:	bfa8      	it	ge
 801238e:	4633      	movge	r3, r6
 8012390:	42ab      	cmp	r3, r5
 8012392:	bfa8      	it	ge
 8012394:	462b      	movge	r3, r5
 8012396:	2b00      	cmp	r3, #0
 8012398:	bfc2      	ittt	gt
 801239a:	1af6      	subgt	r6, r6, r3
 801239c:	1aed      	subgt	r5, r5, r3
 801239e:	1aff      	subgt	r7, r7, r3
 80123a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123a2:	b1bb      	cbz	r3, 80123d4 <_strtod_l+0x724>
 80123a4:	4641      	mov	r1, r8
 80123a6:	461a      	mov	r2, r3
 80123a8:	4648      	mov	r0, r9
 80123aa:	f001 ff29 	bl	8014200 <__pow5mult>
 80123ae:	4680      	mov	r8, r0
 80123b0:	2800      	cmp	r0, #0
 80123b2:	f43f ae9b 	beq.w	80120ec <_strtod_l+0x43c>
 80123b6:	4601      	mov	r1, r0
 80123b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80123ba:	4648      	mov	r0, r9
 80123bc:	f001 fe89 	bl	80140d2 <__multiply>
 80123c0:	900c      	str	r0, [sp, #48]	; 0x30
 80123c2:	2800      	cmp	r0, #0
 80123c4:	f43f ae92 	beq.w	80120ec <_strtod_l+0x43c>
 80123c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80123ca:	4648      	mov	r0, r9
 80123cc:	f001 fd9a 	bl	8013f04 <_Bfree>
 80123d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123d2:	931c      	str	r3, [sp, #112]	; 0x70
 80123d4:	2e00      	cmp	r6, #0
 80123d6:	dc7a      	bgt.n	80124ce <_strtod_l+0x81e>
 80123d8:	9b06      	ldr	r3, [sp, #24]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	dd08      	ble.n	80123f0 <_strtod_l+0x740>
 80123de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80123e0:	9905      	ldr	r1, [sp, #20]
 80123e2:	4648      	mov	r0, r9
 80123e4:	f001 ff0c 	bl	8014200 <__pow5mult>
 80123e8:	9005      	str	r0, [sp, #20]
 80123ea:	2800      	cmp	r0, #0
 80123ec:	f43f ae7e 	beq.w	80120ec <_strtod_l+0x43c>
 80123f0:	2d00      	cmp	r5, #0
 80123f2:	dd08      	ble.n	8012406 <_strtod_l+0x756>
 80123f4:	462a      	mov	r2, r5
 80123f6:	9905      	ldr	r1, [sp, #20]
 80123f8:	4648      	mov	r0, r9
 80123fa:	f001 ff4f 	bl	801429c <__lshift>
 80123fe:	9005      	str	r0, [sp, #20]
 8012400:	2800      	cmp	r0, #0
 8012402:	f43f ae73 	beq.w	80120ec <_strtod_l+0x43c>
 8012406:	2f00      	cmp	r7, #0
 8012408:	dd08      	ble.n	801241c <_strtod_l+0x76c>
 801240a:	4641      	mov	r1, r8
 801240c:	463a      	mov	r2, r7
 801240e:	4648      	mov	r0, r9
 8012410:	f001 ff44 	bl	801429c <__lshift>
 8012414:	4680      	mov	r8, r0
 8012416:	2800      	cmp	r0, #0
 8012418:	f43f ae68 	beq.w	80120ec <_strtod_l+0x43c>
 801241c:	9a05      	ldr	r2, [sp, #20]
 801241e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012420:	4648      	mov	r0, r9
 8012422:	f001 ffa9 	bl	8014378 <__mdiff>
 8012426:	4604      	mov	r4, r0
 8012428:	2800      	cmp	r0, #0
 801242a:	f43f ae5f 	beq.w	80120ec <_strtod_l+0x43c>
 801242e:	68c3      	ldr	r3, [r0, #12]
 8012430:	930c      	str	r3, [sp, #48]	; 0x30
 8012432:	2300      	movs	r3, #0
 8012434:	60c3      	str	r3, [r0, #12]
 8012436:	4641      	mov	r1, r8
 8012438:	f001 ff84 	bl	8014344 <__mcmp>
 801243c:	2800      	cmp	r0, #0
 801243e:	da55      	bge.n	80124ec <_strtod_l+0x83c>
 8012440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012442:	b9e3      	cbnz	r3, 801247e <_strtod_l+0x7ce>
 8012444:	f1ba 0f00 	cmp.w	sl, #0
 8012448:	d119      	bne.n	801247e <_strtod_l+0x7ce>
 801244a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801244e:	b9b3      	cbnz	r3, 801247e <_strtod_l+0x7ce>
 8012450:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012454:	0d1b      	lsrs	r3, r3, #20
 8012456:	051b      	lsls	r3, r3, #20
 8012458:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801245c:	d90f      	bls.n	801247e <_strtod_l+0x7ce>
 801245e:	6963      	ldr	r3, [r4, #20]
 8012460:	b913      	cbnz	r3, 8012468 <_strtod_l+0x7b8>
 8012462:	6923      	ldr	r3, [r4, #16]
 8012464:	2b01      	cmp	r3, #1
 8012466:	dd0a      	ble.n	801247e <_strtod_l+0x7ce>
 8012468:	4621      	mov	r1, r4
 801246a:	2201      	movs	r2, #1
 801246c:	4648      	mov	r0, r9
 801246e:	f001 ff15 	bl	801429c <__lshift>
 8012472:	4641      	mov	r1, r8
 8012474:	4604      	mov	r4, r0
 8012476:	f001 ff65 	bl	8014344 <__mcmp>
 801247a:	2800      	cmp	r0, #0
 801247c:	dc67      	bgt.n	801254e <_strtod_l+0x89e>
 801247e:	9b04      	ldr	r3, [sp, #16]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d171      	bne.n	8012568 <_strtod_l+0x8b8>
 8012484:	e63d      	b.n	8012102 <_strtod_l+0x452>
 8012486:	f018 0f01 	tst.w	r8, #1
 801248a:	d004      	beq.n	8012496 <_strtod_l+0x7e6>
 801248c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012490:	f7ee f8b2 	bl	80005f8 <__aeabi_dmul>
 8012494:	2301      	movs	r3, #1
 8012496:	ea4f 0868 	mov.w	r8, r8, asr #1
 801249a:	3508      	adds	r5, #8
 801249c:	e6e5      	b.n	801226a <_strtod_l+0x5ba>
 801249e:	f04f 32ff 	mov.w	r2, #4294967295
 80124a2:	fa02 f303 	lsl.w	r3, r2, r3
 80124a6:	ea03 0a0a 	and.w	sl, r3, sl
 80124aa:	e6ff      	b.n	80122ac <_strtod_l+0x5fc>
 80124ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80124b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80124b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80124b8:	36e2      	adds	r6, #226	; 0xe2
 80124ba:	fa01 f306 	lsl.w	r3, r1, r6
 80124be:	930a      	str	r3, [sp, #40]	; 0x28
 80124c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80124c2:	e75d      	b.n	8012380 <_strtod_l+0x6d0>
 80124c4:	2300      	movs	r3, #0
 80124c6:	930a      	str	r3, [sp, #40]	; 0x28
 80124c8:	2301      	movs	r3, #1
 80124ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80124cc:	e758      	b.n	8012380 <_strtod_l+0x6d0>
 80124ce:	4632      	mov	r2, r6
 80124d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80124d2:	4648      	mov	r0, r9
 80124d4:	f001 fee2 	bl	801429c <__lshift>
 80124d8:	901c      	str	r0, [sp, #112]	; 0x70
 80124da:	2800      	cmp	r0, #0
 80124dc:	f47f af7c 	bne.w	80123d8 <_strtod_l+0x728>
 80124e0:	e604      	b.n	80120ec <_strtod_l+0x43c>
 80124e2:	bf00      	nop
 80124e4:	08015a80 	.word	0x08015a80
 80124e8:	fffffc02 	.word	0xfffffc02
 80124ec:	465d      	mov	r5, fp
 80124ee:	f040 8086 	bne.w	80125fe <_strtod_l+0x94e>
 80124f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80124f8:	b32a      	cbz	r2, 8012546 <_strtod_l+0x896>
 80124fa:	4aaf      	ldr	r2, [pc, #700]	; (80127b8 <_strtod_l+0xb08>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d153      	bne.n	80125a8 <_strtod_l+0x8f8>
 8012500:	9b04      	ldr	r3, [sp, #16]
 8012502:	4650      	mov	r0, sl
 8012504:	b1d3      	cbz	r3, 801253c <_strtod_l+0x88c>
 8012506:	4aad      	ldr	r2, [pc, #692]	; (80127bc <_strtod_l+0xb0c>)
 8012508:	402a      	ands	r2, r5
 801250a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801250e:	f04f 31ff 	mov.w	r1, #4294967295
 8012512:	d816      	bhi.n	8012542 <_strtod_l+0x892>
 8012514:	0d12      	lsrs	r2, r2, #20
 8012516:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801251a:	fa01 f303 	lsl.w	r3, r1, r3
 801251e:	4298      	cmp	r0, r3
 8012520:	d142      	bne.n	80125a8 <_strtod_l+0x8f8>
 8012522:	4ba7      	ldr	r3, [pc, #668]	; (80127c0 <_strtod_l+0xb10>)
 8012524:	429d      	cmp	r5, r3
 8012526:	d102      	bne.n	801252e <_strtod_l+0x87e>
 8012528:	3001      	adds	r0, #1
 801252a:	f43f addf 	beq.w	80120ec <_strtod_l+0x43c>
 801252e:	4ba3      	ldr	r3, [pc, #652]	; (80127bc <_strtod_l+0xb0c>)
 8012530:	402b      	ands	r3, r5
 8012532:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012536:	f04f 0a00 	mov.w	sl, #0
 801253a:	e7a0      	b.n	801247e <_strtod_l+0x7ce>
 801253c:	f04f 33ff 	mov.w	r3, #4294967295
 8012540:	e7ed      	b.n	801251e <_strtod_l+0x86e>
 8012542:	460b      	mov	r3, r1
 8012544:	e7eb      	b.n	801251e <_strtod_l+0x86e>
 8012546:	bb7b      	cbnz	r3, 80125a8 <_strtod_l+0x8f8>
 8012548:	f1ba 0f00 	cmp.w	sl, #0
 801254c:	d12c      	bne.n	80125a8 <_strtod_l+0x8f8>
 801254e:	9904      	ldr	r1, [sp, #16]
 8012550:	4a9a      	ldr	r2, [pc, #616]	; (80127bc <_strtod_l+0xb0c>)
 8012552:	465b      	mov	r3, fp
 8012554:	b1f1      	cbz	r1, 8012594 <_strtod_l+0x8e4>
 8012556:	ea02 010b 	and.w	r1, r2, fp
 801255a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801255e:	dc19      	bgt.n	8012594 <_strtod_l+0x8e4>
 8012560:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012564:	f77f ae5b 	ble.w	801221e <_strtod_l+0x56e>
 8012568:	4a96      	ldr	r2, [pc, #600]	; (80127c4 <_strtod_l+0xb14>)
 801256a:	2300      	movs	r3, #0
 801256c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012570:	4650      	mov	r0, sl
 8012572:	4659      	mov	r1, fp
 8012574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012578:	f7ee f83e 	bl	80005f8 <__aeabi_dmul>
 801257c:	4682      	mov	sl, r0
 801257e:	468b      	mov	fp, r1
 8012580:	2900      	cmp	r1, #0
 8012582:	f47f adbe 	bne.w	8012102 <_strtod_l+0x452>
 8012586:	2800      	cmp	r0, #0
 8012588:	f47f adbb 	bne.w	8012102 <_strtod_l+0x452>
 801258c:	2322      	movs	r3, #34	; 0x22
 801258e:	f8c9 3000 	str.w	r3, [r9]
 8012592:	e5b6      	b.n	8012102 <_strtod_l+0x452>
 8012594:	4013      	ands	r3, r2
 8012596:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801259a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801259e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80125a2:	f04f 3aff 	mov.w	sl, #4294967295
 80125a6:	e76a      	b.n	801247e <_strtod_l+0x7ce>
 80125a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125aa:	b193      	cbz	r3, 80125d2 <_strtod_l+0x922>
 80125ac:	422b      	tst	r3, r5
 80125ae:	f43f af66 	beq.w	801247e <_strtod_l+0x7ce>
 80125b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125b4:	9a04      	ldr	r2, [sp, #16]
 80125b6:	4650      	mov	r0, sl
 80125b8:	4659      	mov	r1, fp
 80125ba:	b173      	cbz	r3, 80125da <_strtod_l+0x92a>
 80125bc:	f7ff fb59 	bl	8011c72 <sulp>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80125c8:	f7ed fe60 	bl	800028c <__adddf3>
 80125cc:	4682      	mov	sl, r0
 80125ce:	468b      	mov	fp, r1
 80125d0:	e755      	b.n	801247e <_strtod_l+0x7ce>
 80125d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125d4:	ea13 0f0a 	tst.w	r3, sl
 80125d8:	e7e9      	b.n	80125ae <_strtod_l+0x8fe>
 80125da:	f7ff fb4a 	bl	8011c72 <sulp>
 80125de:	4602      	mov	r2, r0
 80125e0:	460b      	mov	r3, r1
 80125e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80125e6:	f7ed fe4f 	bl	8000288 <__aeabi_dsub>
 80125ea:	2200      	movs	r2, #0
 80125ec:	2300      	movs	r3, #0
 80125ee:	4682      	mov	sl, r0
 80125f0:	468b      	mov	fp, r1
 80125f2:	f7ee fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 80125f6:	2800      	cmp	r0, #0
 80125f8:	f47f ae11 	bne.w	801221e <_strtod_l+0x56e>
 80125fc:	e73f      	b.n	801247e <_strtod_l+0x7ce>
 80125fe:	4641      	mov	r1, r8
 8012600:	4620      	mov	r0, r4
 8012602:	f001 ffdc 	bl	80145be <__ratio>
 8012606:	ec57 6b10 	vmov	r6, r7, d0
 801260a:	2200      	movs	r2, #0
 801260c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012610:	ee10 0a10 	vmov	r0, s0
 8012614:	4639      	mov	r1, r7
 8012616:	f7ee fa6b 	bl	8000af0 <__aeabi_dcmple>
 801261a:	2800      	cmp	r0, #0
 801261c:	d077      	beq.n	801270e <_strtod_l+0xa5e>
 801261e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012620:	2b00      	cmp	r3, #0
 8012622:	d04a      	beq.n	80126ba <_strtod_l+0xa0a>
 8012624:	4b68      	ldr	r3, [pc, #416]	; (80127c8 <_strtod_l+0xb18>)
 8012626:	2200      	movs	r2, #0
 8012628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801262c:	4f66      	ldr	r7, [pc, #408]	; (80127c8 <_strtod_l+0xb18>)
 801262e:	2600      	movs	r6, #0
 8012630:	4b62      	ldr	r3, [pc, #392]	; (80127bc <_strtod_l+0xb0c>)
 8012632:	402b      	ands	r3, r5
 8012634:	930f      	str	r3, [sp, #60]	; 0x3c
 8012636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012638:	4b64      	ldr	r3, [pc, #400]	; (80127cc <_strtod_l+0xb1c>)
 801263a:	429a      	cmp	r2, r3
 801263c:	f040 80ce 	bne.w	80127dc <_strtod_l+0xb2c>
 8012640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012648:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801264c:	ec4b ab10 	vmov	d0, sl, fp
 8012650:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8012654:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012658:	f001 feec 	bl	8014434 <__ulp>
 801265c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012660:	ec53 2b10 	vmov	r2, r3, d0
 8012664:	f7ed ffc8 	bl	80005f8 <__aeabi_dmul>
 8012668:	4652      	mov	r2, sl
 801266a:	465b      	mov	r3, fp
 801266c:	f7ed fe0e 	bl	800028c <__adddf3>
 8012670:	460b      	mov	r3, r1
 8012672:	4952      	ldr	r1, [pc, #328]	; (80127bc <_strtod_l+0xb0c>)
 8012674:	4a56      	ldr	r2, [pc, #344]	; (80127d0 <_strtod_l+0xb20>)
 8012676:	4019      	ands	r1, r3
 8012678:	4291      	cmp	r1, r2
 801267a:	4682      	mov	sl, r0
 801267c:	d95b      	bls.n	8012736 <_strtod_l+0xa86>
 801267e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012680:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012684:	4293      	cmp	r3, r2
 8012686:	d103      	bne.n	8012690 <_strtod_l+0x9e0>
 8012688:	9b08      	ldr	r3, [sp, #32]
 801268a:	3301      	adds	r3, #1
 801268c:	f43f ad2e 	beq.w	80120ec <_strtod_l+0x43c>
 8012690:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80127c0 <_strtod_l+0xb10>
 8012694:	f04f 3aff 	mov.w	sl, #4294967295
 8012698:	991c      	ldr	r1, [sp, #112]	; 0x70
 801269a:	4648      	mov	r0, r9
 801269c:	f001 fc32 	bl	8013f04 <_Bfree>
 80126a0:	9905      	ldr	r1, [sp, #20]
 80126a2:	4648      	mov	r0, r9
 80126a4:	f001 fc2e 	bl	8013f04 <_Bfree>
 80126a8:	4641      	mov	r1, r8
 80126aa:	4648      	mov	r0, r9
 80126ac:	f001 fc2a 	bl	8013f04 <_Bfree>
 80126b0:	4621      	mov	r1, r4
 80126b2:	4648      	mov	r0, r9
 80126b4:	f001 fc26 	bl	8013f04 <_Bfree>
 80126b8:	e619      	b.n	80122ee <_strtod_l+0x63e>
 80126ba:	f1ba 0f00 	cmp.w	sl, #0
 80126be:	d11a      	bne.n	80126f6 <_strtod_l+0xa46>
 80126c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126c4:	b9eb      	cbnz	r3, 8012702 <_strtod_l+0xa52>
 80126c6:	2200      	movs	r2, #0
 80126c8:	4b3f      	ldr	r3, [pc, #252]	; (80127c8 <_strtod_l+0xb18>)
 80126ca:	4630      	mov	r0, r6
 80126cc:	4639      	mov	r1, r7
 80126ce:	f7ee fa05 	bl	8000adc <__aeabi_dcmplt>
 80126d2:	b9c8      	cbnz	r0, 8012708 <_strtod_l+0xa58>
 80126d4:	4630      	mov	r0, r6
 80126d6:	4639      	mov	r1, r7
 80126d8:	2200      	movs	r2, #0
 80126da:	4b3e      	ldr	r3, [pc, #248]	; (80127d4 <_strtod_l+0xb24>)
 80126dc:	f7ed ff8c 	bl	80005f8 <__aeabi_dmul>
 80126e0:	4606      	mov	r6, r0
 80126e2:	460f      	mov	r7, r1
 80126e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80126e8:	9618      	str	r6, [sp, #96]	; 0x60
 80126ea:	9319      	str	r3, [sp, #100]	; 0x64
 80126ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80126f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80126f4:	e79c      	b.n	8012630 <_strtod_l+0x980>
 80126f6:	f1ba 0f01 	cmp.w	sl, #1
 80126fa:	d102      	bne.n	8012702 <_strtod_l+0xa52>
 80126fc:	2d00      	cmp	r5, #0
 80126fe:	f43f ad8e 	beq.w	801221e <_strtod_l+0x56e>
 8012702:	2200      	movs	r2, #0
 8012704:	4b34      	ldr	r3, [pc, #208]	; (80127d8 <_strtod_l+0xb28>)
 8012706:	e78f      	b.n	8012628 <_strtod_l+0x978>
 8012708:	2600      	movs	r6, #0
 801270a:	4f32      	ldr	r7, [pc, #200]	; (80127d4 <_strtod_l+0xb24>)
 801270c:	e7ea      	b.n	80126e4 <_strtod_l+0xa34>
 801270e:	4b31      	ldr	r3, [pc, #196]	; (80127d4 <_strtod_l+0xb24>)
 8012710:	4630      	mov	r0, r6
 8012712:	4639      	mov	r1, r7
 8012714:	2200      	movs	r2, #0
 8012716:	f7ed ff6f 	bl	80005f8 <__aeabi_dmul>
 801271a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801271c:	4606      	mov	r6, r0
 801271e:	460f      	mov	r7, r1
 8012720:	b933      	cbnz	r3, 8012730 <_strtod_l+0xa80>
 8012722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012726:	9010      	str	r0, [sp, #64]	; 0x40
 8012728:	9311      	str	r3, [sp, #68]	; 0x44
 801272a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801272e:	e7df      	b.n	80126f0 <_strtod_l+0xa40>
 8012730:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012734:	e7f9      	b.n	801272a <_strtod_l+0xa7a>
 8012736:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801273a:	9b04      	ldr	r3, [sp, #16]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1ab      	bne.n	8012698 <_strtod_l+0x9e8>
 8012740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012744:	0d1b      	lsrs	r3, r3, #20
 8012746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012748:	051b      	lsls	r3, r3, #20
 801274a:	429a      	cmp	r2, r3
 801274c:	465d      	mov	r5, fp
 801274e:	d1a3      	bne.n	8012698 <_strtod_l+0x9e8>
 8012750:	4639      	mov	r1, r7
 8012752:	4630      	mov	r0, r6
 8012754:	f7ee fa00 	bl	8000b58 <__aeabi_d2iz>
 8012758:	f7ed fee4 	bl	8000524 <__aeabi_i2d>
 801275c:	460b      	mov	r3, r1
 801275e:	4602      	mov	r2, r0
 8012760:	4639      	mov	r1, r7
 8012762:	4630      	mov	r0, r6
 8012764:	f7ed fd90 	bl	8000288 <__aeabi_dsub>
 8012768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801276a:	4606      	mov	r6, r0
 801276c:	460f      	mov	r7, r1
 801276e:	b933      	cbnz	r3, 801277e <_strtod_l+0xace>
 8012770:	f1ba 0f00 	cmp.w	sl, #0
 8012774:	d103      	bne.n	801277e <_strtod_l+0xace>
 8012776:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801277a:	2d00      	cmp	r5, #0
 801277c:	d06d      	beq.n	801285a <_strtod_l+0xbaa>
 801277e:	a30a      	add	r3, pc, #40	; (adr r3, 80127a8 <_strtod_l+0xaf8>)
 8012780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012784:	4630      	mov	r0, r6
 8012786:	4639      	mov	r1, r7
 8012788:	f7ee f9a8 	bl	8000adc <__aeabi_dcmplt>
 801278c:	2800      	cmp	r0, #0
 801278e:	f47f acb8 	bne.w	8012102 <_strtod_l+0x452>
 8012792:	a307      	add	r3, pc, #28	; (adr r3, 80127b0 <_strtod_l+0xb00>)
 8012794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012798:	4630      	mov	r0, r6
 801279a:	4639      	mov	r1, r7
 801279c:	f7ee f9bc 	bl	8000b18 <__aeabi_dcmpgt>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	f43f af79 	beq.w	8012698 <_strtod_l+0x9e8>
 80127a6:	e4ac      	b.n	8012102 <_strtod_l+0x452>
 80127a8:	94a03595 	.word	0x94a03595
 80127ac:	3fdfffff 	.word	0x3fdfffff
 80127b0:	35afe535 	.word	0x35afe535
 80127b4:	3fe00000 	.word	0x3fe00000
 80127b8:	000fffff 	.word	0x000fffff
 80127bc:	7ff00000 	.word	0x7ff00000
 80127c0:	7fefffff 	.word	0x7fefffff
 80127c4:	39500000 	.word	0x39500000
 80127c8:	3ff00000 	.word	0x3ff00000
 80127cc:	7fe00000 	.word	0x7fe00000
 80127d0:	7c9fffff 	.word	0x7c9fffff
 80127d4:	3fe00000 	.word	0x3fe00000
 80127d8:	bff00000 	.word	0xbff00000
 80127dc:	9b04      	ldr	r3, [sp, #16]
 80127de:	b333      	cbz	r3, 801282e <_strtod_l+0xb7e>
 80127e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80127e6:	d822      	bhi.n	801282e <_strtod_l+0xb7e>
 80127e8:	a327      	add	r3, pc, #156	; (adr r3, 8012888 <_strtod_l+0xbd8>)
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	4630      	mov	r0, r6
 80127f0:	4639      	mov	r1, r7
 80127f2:	f7ee f97d 	bl	8000af0 <__aeabi_dcmple>
 80127f6:	b1a0      	cbz	r0, 8012822 <_strtod_l+0xb72>
 80127f8:	4639      	mov	r1, r7
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ee f9d4 	bl	8000ba8 <__aeabi_d2uiz>
 8012800:	2800      	cmp	r0, #0
 8012802:	bf08      	it	eq
 8012804:	2001      	moveq	r0, #1
 8012806:	f7ed fe7d 	bl	8000504 <__aeabi_ui2d>
 801280a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801280c:	4606      	mov	r6, r0
 801280e:	460f      	mov	r7, r1
 8012810:	bb03      	cbnz	r3, 8012854 <_strtod_l+0xba4>
 8012812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012816:	9012      	str	r0, [sp, #72]	; 0x48
 8012818:	9313      	str	r3, [sp, #76]	; 0x4c
 801281a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801281e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012826:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	930b      	str	r3, [sp, #44]	; 0x2c
 801282e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012832:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8012836:	f001 fdfd 	bl	8014434 <__ulp>
 801283a:	4650      	mov	r0, sl
 801283c:	ec53 2b10 	vmov	r2, r3, d0
 8012840:	4659      	mov	r1, fp
 8012842:	f7ed fed9 	bl	80005f8 <__aeabi_dmul>
 8012846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801284a:	f7ed fd1f 	bl	800028c <__adddf3>
 801284e:	4682      	mov	sl, r0
 8012850:	468b      	mov	fp, r1
 8012852:	e772      	b.n	801273a <_strtod_l+0xa8a>
 8012854:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8012858:	e7df      	b.n	801281a <_strtod_l+0xb6a>
 801285a:	a30d      	add	r3, pc, #52	; (adr r3, 8012890 <_strtod_l+0xbe0>)
 801285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012860:	f7ee f93c 	bl	8000adc <__aeabi_dcmplt>
 8012864:	e79c      	b.n	80127a0 <_strtod_l+0xaf0>
 8012866:	2300      	movs	r3, #0
 8012868:	930d      	str	r3, [sp, #52]	; 0x34
 801286a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801286c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801286e:	6013      	str	r3, [r2, #0]
 8012870:	f7ff ba61 	b.w	8011d36 <_strtod_l+0x86>
 8012874:	2b65      	cmp	r3, #101	; 0x65
 8012876:	f04f 0200 	mov.w	r2, #0
 801287a:	f43f ab4e 	beq.w	8011f1a <_strtod_l+0x26a>
 801287e:	2101      	movs	r1, #1
 8012880:	4614      	mov	r4, r2
 8012882:	9104      	str	r1, [sp, #16]
 8012884:	f7ff bacb 	b.w	8011e1e <_strtod_l+0x16e>
 8012888:	ffc00000 	.word	0xffc00000
 801288c:	41dfffff 	.word	0x41dfffff
 8012890:	94a03595 	.word	0x94a03595
 8012894:	3fcfffff 	.word	0x3fcfffff

08012898 <_strtod_r>:
 8012898:	4b05      	ldr	r3, [pc, #20]	; (80128b0 <_strtod_r+0x18>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	b410      	push	{r4}
 801289e:	6a1b      	ldr	r3, [r3, #32]
 80128a0:	4c04      	ldr	r4, [pc, #16]	; (80128b4 <_strtod_r+0x1c>)
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	bf08      	it	eq
 80128a6:	4623      	moveq	r3, r4
 80128a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128ac:	f7ff ba00 	b.w	8011cb0 <_strtod_l>
 80128b0:	20000010 	.word	0x20000010
 80128b4:	20000074 	.word	0x20000074

080128b8 <_strtol_l.isra.0>:
 80128b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128bc:	4680      	mov	r8, r0
 80128be:	4689      	mov	r9, r1
 80128c0:	4692      	mov	sl, r2
 80128c2:	461e      	mov	r6, r3
 80128c4:	460f      	mov	r7, r1
 80128c6:	463d      	mov	r5, r7
 80128c8:	9808      	ldr	r0, [sp, #32]
 80128ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128ce:	f001 fab7 	bl	8013e40 <__locale_ctype_ptr_l>
 80128d2:	4420      	add	r0, r4
 80128d4:	7843      	ldrb	r3, [r0, #1]
 80128d6:	f013 0308 	ands.w	r3, r3, #8
 80128da:	d132      	bne.n	8012942 <_strtol_l.isra.0+0x8a>
 80128dc:	2c2d      	cmp	r4, #45	; 0x2d
 80128de:	d132      	bne.n	8012946 <_strtol_l.isra.0+0x8e>
 80128e0:	787c      	ldrb	r4, [r7, #1]
 80128e2:	1cbd      	adds	r5, r7, #2
 80128e4:	2201      	movs	r2, #1
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d05d      	beq.n	80129a6 <_strtol_l.isra.0+0xee>
 80128ea:	2e10      	cmp	r6, #16
 80128ec:	d109      	bne.n	8012902 <_strtol_l.isra.0+0x4a>
 80128ee:	2c30      	cmp	r4, #48	; 0x30
 80128f0:	d107      	bne.n	8012902 <_strtol_l.isra.0+0x4a>
 80128f2:	782b      	ldrb	r3, [r5, #0]
 80128f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80128f8:	2b58      	cmp	r3, #88	; 0x58
 80128fa:	d14f      	bne.n	801299c <_strtol_l.isra.0+0xe4>
 80128fc:	786c      	ldrb	r4, [r5, #1]
 80128fe:	2610      	movs	r6, #16
 8012900:	3502      	adds	r5, #2
 8012902:	2a00      	cmp	r2, #0
 8012904:	bf14      	ite	ne
 8012906:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801290a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801290e:	2700      	movs	r7, #0
 8012910:	fbb1 fcf6 	udiv	ip, r1, r6
 8012914:	4638      	mov	r0, r7
 8012916:	fb06 1e1c 	mls	lr, r6, ip, r1
 801291a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801291e:	2b09      	cmp	r3, #9
 8012920:	d817      	bhi.n	8012952 <_strtol_l.isra.0+0x9a>
 8012922:	461c      	mov	r4, r3
 8012924:	42a6      	cmp	r6, r4
 8012926:	dd23      	ble.n	8012970 <_strtol_l.isra.0+0xb8>
 8012928:	1c7b      	adds	r3, r7, #1
 801292a:	d007      	beq.n	801293c <_strtol_l.isra.0+0x84>
 801292c:	4584      	cmp	ip, r0
 801292e:	d31c      	bcc.n	801296a <_strtol_l.isra.0+0xb2>
 8012930:	d101      	bne.n	8012936 <_strtol_l.isra.0+0x7e>
 8012932:	45a6      	cmp	lr, r4
 8012934:	db19      	blt.n	801296a <_strtol_l.isra.0+0xb2>
 8012936:	fb00 4006 	mla	r0, r0, r6, r4
 801293a:	2701      	movs	r7, #1
 801293c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012940:	e7eb      	b.n	801291a <_strtol_l.isra.0+0x62>
 8012942:	462f      	mov	r7, r5
 8012944:	e7bf      	b.n	80128c6 <_strtol_l.isra.0+0xe>
 8012946:	2c2b      	cmp	r4, #43	; 0x2b
 8012948:	bf04      	itt	eq
 801294a:	1cbd      	addeq	r5, r7, #2
 801294c:	787c      	ldrbeq	r4, [r7, #1]
 801294e:	461a      	mov	r2, r3
 8012950:	e7c9      	b.n	80128e6 <_strtol_l.isra.0+0x2e>
 8012952:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012956:	2b19      	cmp	r3, #25
 8012958:	d801      	bhi.n	801295e <_strtol_l.isra.0+0xa6>
 801295a:	3c37      	subs	r4, #55	; 0x37
 801295c:	e7e2      	b.n	8012924 <_strtol_l.isra.0+0x6c>
 801295e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012962:	2b19      	cmp	r3, #25
 8012964:	d804      	bhi.n	8012970 <_strtol_l.isra.0+0xb8>
 8012966:	3c57      	subs	r4, #87	; 0x57
 8012968:	e7dc      	b.n	8012924 <_strtol_l.isra.0+0x6c>
 801296a:	f04f 37ff 	mov.w	r7, #4294967295
 801296e:	e7e5      	b.n	801293c <_strtol_l.isra.0+0x84>
 8012970:	1c7b      	adds	r3, r7, #1
 8012972:	d108      	bne.n	8012986 <_strtol_l.isra.0+0xce>
 8012974:	2322      	movs	r3, #34	; 0x22
 8012976:	f8c8 3000 	str.w	r3, [r8]
 801297a:	4608      	mov	r0, r1
 801297c:	f1ba 0f00 	cmp.w	sl, #0
 8012980:	d107      	bne.n	8012992 <_strtol_l.isra.0+0xda>
 8012982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012986:	b102      	cbz	r2, 801298a <_strtol_l.isra.0+0xd2>
 8012988:	4240      	negs	r0, r0
 801298a:	f1ba 0f00 	cmp.w	sl, #0
 801298e:	d0f8      	beq.n	8012982 <_strtol_l.isra.0+0xca>
 8012990:	b10f      	cbz	r7, 8012996 <_strtol_l.isra.0+0xde>
 8012992:	f105 39ff 	add.w	r9, r5, #4294967295
 8012996:	f8ca 9000 	str.w	r9, [sl]
 801299a:	e7f2      	b.n	8012982 <_strtol_l.isra.0+0xca>
 801299c:	2430      	movs	r4, #48	; 0x30
 801299e:	2e00      	cmp	r6, #0
 80129a0:	d1af      	bne.n	8012902 <_strtol_l.isra.0+0x4a>
 80129a2:	2608      	movs	r6, #8
 80129a4:	e7ad      	b.n	8012902 <_strtol_l.isra.0+0x4a>
 80129a6:	2c30      	cmp	r4, #48	; 0x30
 80129a8:	d0a3      	beq.n	80128f2 <_strtol_l.isra.0+0x3a>
 80129aa:	260a      	movs	r6, #10
 80129ac:	e7a9      	b.n	8012902 <_strtol_l.isra.0+0x4a>
	...

080129b0 <_strtol_r>:
 80129b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129b2:	4c06      	ldr	r4, [pc, #24]	; (80129cc <_strtol_r+0x1c>)
 80129b4:	4d06      	ldr	r5, [pc, #24]	; (80129d0 <_strtol_r+0x20>)
 80129b6:	6824      	ldr	r4, [r4, #0]
 80129b8:	6a24      	ldr	r4, [r4, #32]
 80129ba:	2c00      	cmp	r4, #0
 80129bc:	bf08      	it	eq
 80129be:	462c      	moveq	r4, r5
 80129c0:	9400      	str	r4, [sp, #0]
 80129c2:	f7ff ff79 	bl	80128b8 <_strtol_l.isra.0>
 80129c6:	b003      	add	sp, #12
 80129c8:	bd30      	pop	{r4, r5, pc}
 80129ca:	bf00      	nop
 80129cc:	20000010 	.word	0x20000010
 80129d0:	20000074 	.word	0x20000074

080129d4 <quorem>:
 80129d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d8:	6903      	ldr	r3, [r0, #16]
 80129da:	690c      	ldr	r4, [r1, #16]
 80129dc:	42a3      	cmp	r3, r4
 80129de:	4680      	mov	r8, r0
 80129e0:	f2c0 8082 	blt.w	8012ae8 <quorem+0x114>
 80129e4:	3c01      	subs	r4, #1
 80129e6:	f101 0714 	add.w	r7, r1, #20
 80129ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80129ee:	f100 0614 	add.w	r6, r0, #20
 80129f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80129f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80129fa:	eb06 030c 	add.w	r3, r6, ip
 80129fe:	3501      	adds	r5, #1
 8012a00:	eb07 090c 	add.w	r9, r7, ip
 8012a04:	9301      	str	r3, [sp, #4]
 8012a06:	fbb0 f5f5 	udiv	r5, r0, r5
 8012a0a:	b395      	cbz	r5, 8012a72 <quorem+0x9e>
 8012a0c:	f04f 0a00 	mov.w	sl, #0
 8012a10:	4638      	mov	r0, r7
 8012a12:	46b6      	mov	lr, r6
 8012a14:	46d3      	mov	fp, sl
 8012a16:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a1a:	b293      	uxth	r3, r2
 8012a1c:	fb05 a303 	mla	r3, r5, r3, sl
 8012a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	ebab 0303 	sub.w	r3, fp, r3
 8012a2a:	0c12      	lsrs	r2, r2, #16
 8012a2c:	f8de b000 	ldr.w	fp, [lr]
 8012a30:	fb05 a202 	mla	r2, r5, r2, sl
 8012a34:	fa13 f38b 	uxtah	r3, r3, fp
 8012a38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012a3c:	fa1f fb82 	uxth.w	fp, r2
 8012a40:	f8de 2000 	ldr.w	r2, [lr]
 8012a44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a52:	4581      	cmp	r9, r0
 8012a54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012a58:	f84e 3b04 	str.w	r3, [lr], #4
 8012a5c:	d2db      	bcs.n	8012a16 <quorem+0x42>
 8012a5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012a62:	b933      	cbnz	r3, 8012a72 <quorem+0x9e>
 8012a64:	9b01      	ldr	r3, [sp, #4]
 8012a66:	3b04      	subs	r3, #4
 8012a68:	429e      	cmp	r6, r3
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	d330      	bcc.n	8012ad0 <quorem+0xfc>
 8012a6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012a72:	4640      	mov	r0, r8
 8012a74:	f001 fc66 	bl	8014344 <__mcmp>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	db25      	blt.n	8012ac8 <quorem+0xf4>
 8012a7c:	3501      	adds	r5, #1
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f04f 0c00 	mov.w	ip, #0
 8012a84:	f857 2b04 	ldr.w	r2, [r7], #4
 8012a88:	f8d0 e000 	ldr.w	lr, [r0]
 8012a8c:	b293      	uxth	r3, r2
 8012a8e:	ebac 0303 	sub.w	r3, ip, r3
 8012a92:	0c12      	lsrs	r2, r2, #16
 8012a94:	fa13 f38e 	uxtah	r3, r3, lr
 8012a98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012aa6:	45b9      	cmp	r9, r7
 8012aa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012aac:	f840 3b04 	str.w	r3, [r0], #4
 8012ab0:	d2e8      	bcs.n	8012a84 <quorem+0xb0>
 8012ab2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012ab6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012aba:	b92a      	cbnz	r2, 8012ac8 <quorem+0xf4>
 8012abc:	3b04      	subs	r3, #4
 8012abe:	429e      	cmp	r6, r3
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	d30b      	bcc.n	8012adc <quorem+0x108>
 8012ac4:	f8c8 4010 	str.w	r4, [r8, #16]
 8012ac8:	4628      	mov	r0, r5
 8012aca:	b003      	add	sp, #12
 8012acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad0:	6812      	ldr	r2, [r2, #0]
 8012ad2:	3b04      	subs	r3, #4
 8012ad4:	2a00      	cmp	r2, #0
 8012ad6:	d1ca      	bne.n	8012a6e <quorem+0x9a>
 8012ad8:	3c01      	subs	r4, #1
 8012ada:	e7c5      	b.n	8012a68 <quorem+0x94>
 8012adc:	6812      	ldr	r2, [r2, #0]
 8012ade:	3b04      	subs	r3, #4
 8012ae0:	2a00      	cmp	r2, #0
 8012ae2:	d1ef      	bne.n	8012ac4 <quorem+0xf0>
 8012ae4:	3c01      	subs	r4, #1
 8012ae6:	e7ea      	b.n	8012abe <quorem+0xea>
 8012ae8:	2000      	movs	r0, #0
 8012aea:	e7ee      	b.n	8012aca <quorem+0xf6>
 8012aec:	0000      	movs	r0, r0
	...

08012af0 <_dtoa_r>:
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	ec57 6b10 	vmov	r6, r7, d0
 8012af8:	b097      	sub	sp, #92	; 0x5c
 8012afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012afc:	9106      	str	r1, [sp, #24]
 8012afe:	4604      	mov	r4, r0
 8012b00:	920b      	str	r2, [sp, #44]	; 0x2c
 8012b02:	9312      	str	r3, [sp, #72]	; 0x48
 8012b04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012b08:	e9cd 6700 	strd	r6, r7, [sp]
 8012b0c:	b93d      	cbnz	r5, 8012b1e <_dtoa_r+0x2e>
 8012b0e:	2010      	movs	r0, #16
 8012b10:	f001 f9aa 	bl	8013e68 <malloc>
 8012b14:	6260      	str	r0, [r4, #36]	; 0x24
 8012b16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b1a:	6005      	str	r5, [r0, #0]
 8012b1c:	60c5      	str	r5, [r0, #12]
 8012b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b20:	6819      	ldr	r1, [r3, #0]
 8012b22:	b151      	cbz	r1, 8012b3a <_dtoa_r+0x4a>
 8012b24:	685a      	ldr	r2, [r3, #4]
 8012b26:	604a      	str	r2, [r1, #4]
 8012b28:	2301      	movs	r3, #1
 8012b2a:	4093      	lsls	r3, r2
 8012b2c:	608b      	str	r3, [r1, #8]
 8012b2e:	4620      	mov	r0, r4
 8012b30:	f001 f9e8 	bl	8013f04 <_Bfree>
 8012b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b36:	2200      	movs	r2, #0
 8012b38:	601a      	str	r2, [r3, #0]
 8012b3a:	1e3b      	subs	r3, r7, #0
 8012b3c:	bfbb      	ittet	lt
 8012b3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012b42:	9301      	strlt	r3, [sp, #4]
 8012b44:	2300      	movge	r3, #0
 8012b46:	2201      	movlt	r2, #1
 8012b48:	bfac      	ite	ge
 8012b4a:	f8c8 3000 	strge.w	r3, [r8]
 8012b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8012b52:	4baf      	ldr	r3, [pc, #700]	; (8012e10 <_dtoa_r+0x320>)
 8012b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b58:	ea33 0308 	bics.w	r3, r3, r8
 8012b5c:	d114      	bne.n	8012b88 <_dtoa_r+0x98>
 8012b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8012b64:	6013      	str	r3, [r2, #0]
 8012b66:	9b00      	ldr	r3, [sp, #0]
 8012b68:	b923      	cbnz	r3, 8012b74 <_dtoa_r+0x84>
 8012b6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	f000 8542 	beq.w	80135f8 <_dtoa_r+0xb08>
 8012b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012e24 <_dtoa_r+0x334>
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	f000 8544 	beq.w	8013608 <_dtoa_r+0xb18>
 8012b80:	f10b 0303 	add.w	r3, fp, #3
 8012b84:	f000 bd3e 	b.w	8013604 <_dtoa_r+0xb14>
 8012b88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	2300      	movs	r3, #0
 8012b90:	4630      	mov	r0, r6
 8012b92:	4639      	mov	r1, r7
 8012b94:	f7ed ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b98:	4681      	mov	r9, r0
 8012b9a:	b168      	cbz	r0, 8012bb8 <_dtoa_r+0xc8>
 8012b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	6013      	str	r3, [r2, #0]
 8012ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f000 8524 	beq.w	80135f2 <_dtoa_r+0xb02>
 8012baa:	4b9a      	ldr	r3, [pc, #616]	; (8012e14 <_dtoa_r+0x324>)
 8012bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012bae:	f103 3bff 	add.w	fp, r3, #4294967295
 8012bb2:	6013      	str	r3, [r2, #0]
 8012bb4:	f000 bd28 	b.w	8013608 <_dtoa_r+0xb18>
 8012bb8:	aa14      	add	r2, sp, #80	; 0x50
 8012bba:	a915      	add	r1, sp, #84	; 0x54
 8012bbc:	ec47 6b10 	vmov	d0, r6, r7
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f001 fcad 	bl	8014520 <__d2b>
 8012bc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012bca:	9004      	str	r0, [sp, #16]
 8012bcc:	2d00      	cmp	r5, #0
 8012bce:	d07c      	beq.n	8012cca <_dtoa_r+0x1da>
 8012bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012bd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012bd8:	46b2      	mov	sl, r6
 8012bda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012be2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012be6:	2200      	movs	r2, #0
 8012be8:	4b8b      	ldr	r3, [pc, #556]	; (8012e18 <_dtoa_r+0x328>)
 8012bea:	4650      	mov	r0, sl
 8012bec:	4659      	mov	r1, fp
 8012bee:	f7ed fb4b 	bl	8000288 <__aeabi_dsub>
 8012bf2:	a381      	add	r3, pc, #516	; (adr r3, 8012df8 <_dtoa_r+0x308>)
 8012bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf8:	f7ed fcfe 	bl	80005f8 <__aeabi_dmul>
 8012bfc:	a380      	add	r3, pc, #512	; (adr r3, 8012e00 <_dtoa_r+0x310>)
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	f7ed fb43 	bl	800028c <__adddf3>
 8012c06:	4606      	mov	r6, r0
 8012c08:	4628      	mov	r0, r5
 8012c0a:	460f      	mov	r7, r1
 8012c0c:	f7ed fc8a 	bl	8000524 <__aeabi_i2d>
 8012c10:	a37d      	add	r3, pc, #500	; (adr r3, 8012e08 <_dtoa_r+0x318>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	f7ed fcef 	bl	80005f8 <__aeabi_dmul>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	460b      	mov	r3, r1
 8012c1e:	4630      	mov	r0, r6
 8012c20:	4639      	mov	r1, r7
 8012c22:	f7ed fb33 	bl	800028c <__adddf3>
 8012c26:	4606      	mov	r6, r0
 8012c28:	460f      	mov	r7, r1
 8012c2a:	f7ed ff95 	bl	8000b58 <__aeabi_d2iz>
 8012c2e:	2200      	movs	r2, #0
 8012c30:	4682      	mov	sl, r0
 8012c32:	2300      	movs	r3, #0
 8012c34:	4630      	mov	r0, r6
 8012c36:	4639      	mov	r1, r7
 8012c38:	f7ed ff50 	bl	8000adc <__aeabi_dcmplt>
 8012c3c:	b148      	cbz	r0, 8012c52 <_dtoa_r+0x162>
 8012c3e:	4650      	mov	r0, sl
 8012c40:	f7ed fc70 	bl	8000524 <__aeabi_i2d>
 8012c44:	4632      	mov	r2, r6
 8012c46:	463b      	mov	r3, r7
 8012c48:	f7ed ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c4c:	b908      	cbnz	r0, 8012c52 <_dtoa_r+0x162>
 8012c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c52:	f1ba 0f16 	cmp.w	sl, #22
 8012c56:	d859      	bhi.n	8012d0c <_dtoa_r+0x21c>
 8012c58:	4970      	ldr	r1, [pc, #448]	; (8012e1c <_dtoa_r+0x32c>)
 8012c5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c66:	f7ed ff57 	bl	8000b18 <__aeabi_dcmpgt>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	d050      	beq.n	8012d10 <_dtoa_r+0x220>
 8012c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c72:	2300      	movs	r3, #0
 8012c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c78:	1b5d      	subs	r5, r3, r5
 8012c7a:	f1b5 0801 	subs.w	r8, r5, #1
 8012c7e:	bf49      	itett	mi
 8012c80:	f1c5 0301 	rsbmi	r3, r5, #1
 8012c84:	2300      	movpl	r3, #0
 8012c86:	9305      	strmi	r3, [sp, #20]
 8012c88:	f04f 0800 	movmi.w	r8, #0
 8012c8c:	bf58      	it	pl
 8012c8e:	9305      	strpl	r3, [sp, #20]
 8012c90:	f1ba 0f00 	cmp.w	sl, #0
 8012c94:	db3e      	blt.n	8012d14 <_dtoa_r+0x224>
 8012c96:	2300      	movs	r3, #0
 8012c98:	44d0      	add	r8, sl
 8012c9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012c9e:	9307      	str	r3, [sp, #28]
 8012ca0:	9b06      	ldr	r3, [sp, #24]
 8012ca2:	2b09      	cmp	r3, #9
 8012ca4:	f200 8090 	bhi.w	8012dc8 <_dtoa_r+0x2d8>
 8012ca8:	2b05      	cmp	r3, #5
 8012caa:	bfc4      	itt	gt
 8012cac:	3b04      	subgt	r3, #4
 8012cae:	9306      	strgt	r3, [sp, #24]
 8012cb0:	9b06      	ldr	r3, [sp, #24]
 8012cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8012cb6:	bfcc      	ite	gt
 8012cb8:	2500      	movgt	r5, #0
 8012cba:	2501      	movle	r5, #1
 8012cbc:	2b03      	cmp	r3, #3
 8012cbe:	f200 808f 	bhi.w	8012de0 <_dtoa_r+0x2f0>
 8012cc2:	e8df f003 	tbb	[pc, r3]
 8012cc6:	7f7d      	.short	0x7f7d
 8012cc8:	7131      	.short	0x7131
 8012cca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012cce:	441d      	add	r5, r3
 8012cd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012cd4:	2820      	cmp	r0, #32
 8012cd6:	dd13      	ble.n	8012d00 <_dtoa_r+0x210>
 8012cd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012cdc:	9b00      	ldr	r3, [sp, #0]
 8012cde:	fa08 f800 	lsl.w	r8, r8, r0
 8012ce2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012ce6:	fa23 f000 	lsr.w	r0, r3, r0
 8012cea:	ea48 0000 	orr.w	r0, r8, r0
 8012cee:	f7ed fc09 	bl	8000504 <__aeabi_ui2d>
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	4682      	mov	sl, r0
 8012cf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012cfa:	3d01      	subs	r5, #1
 8012cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8012cfe:	e772      	b.n	8012be6 <_dtoa_r+0xf6>
 8012d00:	9b00      	ldr	r3, [sp, #0]
 8012d02:	f1c0 0020 	rsb	r0, r0, #32
 8012d06:	fa03 f000 	lsl.w	r0, r3, r0
 8012d0a:	e7f0      	b.n	8012cee <_dtoa_r+0x1fe>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e7b1      	b.n	8012c74 <_dtoa_r+0x184>
 8012d10:	900f      	str	r0, [sp, #60]	; 0x3c
 8012d12:	e7b0      	b.n	8012c76 <_dtoa_r+0x186>
 8012d14:	9b05      	ldr	r3, [sp, #20]
 8012d16:	eba3 030a 	sub.w	r3, r3, sl
 8012d1a:	9305      	str	r3, [sp, #20]
 8012d1c:	f1ca 0300 	rsb	r3, sl, #0
 8012d20:	9307      	str	r3, [sp, #28]
 8012d22:	2300      	movs	r3, #0
 8012d24:	930e      	str	r3, [sp, #56]	; 0x38
 8012d26:	e7bb      	b.n	8012ca0 <_dtoa_r+0x1b0>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	dd59      	ble.n	8012de6 <_dtoa_r+0x2f6>
 8012d32:	9302      	str	r3, [sp, #8]
 8012d34:	4699      	mov	r9, r3
 8012d36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d38:	2200      	movs	r2, #0
 8012d3a:	6072      	str	r2, [r6, #4]
 8012d3c:	2204      	movs	r2, #4
 8012d3e:	f102 0014 	add.w	r0, r2, #20
 8012d42:	4298      	cmp	r0, r3
 8012d44:	6871      	ldr	r1, [r6, #4]
 8012d46:	d953      	bls.n	8012df0 <_dtoa_r+0x300>
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f001 f8a7 	bl	8013e9c <_Balloc>
 8012d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d50:	6030      	str	r0, [r6, #0]
 8012d52:	f1b9 0f0e 	cmp.w	r9, #14
 8012d56:	f8d3 b000 	ldr.w	fp, [r3]
 8012d5a:	f200 80e6 	bhi.w	8012f2a <_dtoa_r+0x43a>
 8012d5e:	2d00      	cmp	r5, #0
 8012d60:	f000 80e3 	beq.w	8012f2a <_dtoa_r+0x43a>
 8012d64:	ed9d 7b00 	vldr	d7, [sp]
 8012d68:	f1ba 0f00 	cmp.w	sl, #0
 8012d6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012d70:	dd74      	ble.n	8012e5c <_dtoa_r+0x36c>
 8012d72:	4a2a      	ldr	r2, [pc, #168]	; (8012e1c <_dtoa_r+0x32c>)
 8012d74:	f00a 030f 	and.w	r3, sl, #15
 8012d78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d7c:	ed93 7b00 	vldr	d7, [r3]
 8012d80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012d84:	06f0      	lsls	r0, r6, #27
 8012d86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012d8a:	d565      	bpl.n	8012e58 <_dtoa_r+0x368>
 8012d8c:	4b24      	ldr	r3, [pc, #144]	; (8012e20 <_dtoa_r+0x330>)
 8012d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012d92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d96:	f7ed fd59 	bl	800084c <__aeabi_ddiv>
 8012d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8012d9e:	f006 060f 	and.w	r6, r6, #15
 8012da2:	2503      	movs	r5, #3
 8012da4:	4f1e      	ldr	r7, [pc, #120]	; (8012e20 <_dtoa_r+0x330>)
 8012da6:	e04c      	b.n	8012e42 <_dtoa_r+0x352>
 8012da8:	2301      	movs	r3, #1
 8012daa:	930a      	str	r3, [sp, #40]	; 0x28
 8012dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012dae:	4453      	add	r3, sl
 8012db0:	f103 0901 	add.w	r9, r3, #1
 8012db4:	9302      	str	r3, [sp, #8]
 8012db6:	464b      	mov	r3, r9
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	bfb8      	it	lt
 8012dbc:	2301      	movlt	r3, #1
 8012dbe:	e7ba      	b.n	8012d36 <_dtoa_r+0x246>
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e7b2      	b.n	8012d2a <_dtoa_r+0x23a>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	e7f0      	b.n	8012daa <_dtoa_r+0x2ba>
 8012dc8:	2501      	movs	r5, #1
 8012dca:	2300      	movs	r3, #0
 8012dcc:	9306      	str	r3, [sp, #24]
 8012dce:	950a      	str	r5, [sp, #40]	; 0x28
 8012dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd4:	9302      	str	r3, [sp, #8]
 8012dd6:	4699      	mov	r9, r3
 8012dd8:	2200      	movs	r2, #0
 8012dda:	2312      	movs	r3, #18
 8012ddc:	920b      	str	r2, [sp, #44]	; 0x2c
 8012dde:	e7aa      	b.n	8012d36 <_dtoa_r+0x246>
 8012de0:	2301      	movs	r3, #1
 8012de2:	930a      	str	r3, [sp, #40]	; 0x28
 8012de4:	e7f4      	b.n	8012dd0 <_dtoa_r+0x2e0>
 8012de6:	2301      	movs	r3, #1
 8012de8:	9302      	str	r3, [sp, #8]
 8012dea:	4699      	mov	r9, r3
 8012dec:	461a      	mov	r2, r3
 8012dee:	e7f5      	b.n	8012ddc <_dtoa_r+0x2ec>
 8012df0:	3101      	adds	r1, #1
 8012df2:	6071      	str	r1, [r6, #4]
 8012df4:	0052      	lsls	r2, r2, #1
 8012df6:	e7a2      	b.n	8012d3e <_dtoa_r+0x24e>
 8012df8:	636f4361 	.word	0x636f4361
 8012dfc:	3fd287a7 	.word	0x3fd287a7
 8012e00:	8b60c8b3 	.word	0x8b60c8b3
 8012e04:	3fc68a28 	.word	0x3fc68a28
 8012e08:	509f79fb 	.word	0x509f79fb
 8012e0c:	3fd34413 	.word	0x3fd34413
 8012e10:	7ff00000 	.word	0x7ff00000
 8012e14:	08015a2d 	.word	0x08015a2d
 8012e18:	3ff80000 	.word	0x3ff80000
 8012e1c:	08015b50 	.word	0x08015b50
 8012e20:	08015b28 	.word	0x08015b28
 8012e24:	08015ab1 	.word	0x08015ab1
 8012e28:	07f1      	lsls	r1, r6, #31
 8012e2a:	d508      	bpl.n	8012e3e <_dtoa_r+0x34e>
 8012e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e34:	f7ed fbe0 	bl	80005f8 <__aeabi_dmul>
 8012e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e3c:	3501      	adds	r5, #1
 8012e3e:	1076      	asrs	r6, r6, #1
 8012e40:	3708      	adds	r7, #8
 8012e42:	2e00      	cmp	r6, #0
 8012e44:	d1f0      	bne.n	8012e28 <_dtoa_r+0x338>
 8012e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e4e:	f7ed fcfd 	bl	800084c <__aeabi_ddiv>
 8012e52:	e9cd 0100 	strd	r0, r1, [sp]
 8012e56:	e01a      	b.n	8012e8e <_dtoa_r+0x39e>
 8012e58:	2502      	movs	r5, #2
 8012e5a:	e7a3      	b.n	8012da4 <_dtoa_r+0x2b4>
 8012e5c:	f000 80a0 	beq.w	8012fa0 <_dtoa_r+0x4b0>
 8012e60:	f1ca 0600 	rsb	r6, sl, #0
 8012e64:	4b9f      	ldr	r3, [pc, #636]	; (80130e4 <_dtoa_r+0x5f4>)
 8012e66:	4fa0      	ldr	r7, [pc, #640]	; (80130e8 <_dtoa_r+0x5f8>)
 8012e68:	f006 020f 	and.w	r2, r6, #15
 8012e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012e78:	f7ed fbbe 	bl	80005f8 <__aeabi_dmul>
 8012e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8012e80:	1136      	asrs	r6, r6, #4
 8012e82:	2300      	movs	r3, #0
 8012e84:	2502      	movs	r5, #2
 8012e86:	2e00      	cmp	r6, #0
 8012e88:	d17f      	bne.n	8012f8a <_dtoa_r+0x49a>
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1e1      	bne.n	8012e52 <_dtoa_r+0x362>
 8012e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	f000 8087 	beq.w	8012fa4 <_dtoa_r+0x4b4>
 8012e96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	4b93      	ldr	r3, [pc, #588]	; (80130ec <_dtoa_r+0x5fc>)
 8012e9e:	4630      	mov	r0, r6
 8012ea0:	4639      	mov	r1, r7
 8012ea2:	f7ed fe1b 	bl	8000adc <__aeabi_dcmplt>
 8012ea6:	2800      	cmp	r0, #0
 8012ea8:	d07c      	beq.n	8012fa4 <_dtoa_r+0x4b4>
 8012eaa:	f1b9 0f00 	cmp.w	r9, #0
 8012eae:	d079      	beq.n	8012fa4 <_dtoa_r+0x4b4>
 8012eb0:	9b02      	ldr	r3, [sp, #8]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	dd35      	ble.n	8012f22 <_dtoa_r+0x432>
 8012eb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012eba:	9308      	str	r3, [sp, #32]
 8012ebc:	4639      	mov	r1, r7
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	4b8b      	ldr	r3, [pc, #556]	; (80130f0 <_dtoa_r+0x600>)
 8012ec2:	4630      	mov	r0, r6
 8012ec4:	f7ed fb98 	bl	80005f8 <__aeabi_dmul>
 8012ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8012ecc:	9f02      	ldr	r7, [sp, #8]
 8012ece:	3501      	adds	r5, #1
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7ed fb27 	bl	8000524 <__aeabi_i2d>
 8012ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012eda:	f7ed fb8d 	bl	80005f8 <__aeabi_dmul>
 8012ede:	2200      	movs	r2, #0
 8012ee0:	4b84      	ldr	r3, [pc, #528]	; (80130f4 <_dtoa_r+0x604>)
 8012ee2:	f7ed f9d3 	bl	800028c <__adddf3>
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012eec:	2f00      	cmp	r7, #0
 8012eee:	d15d      	bne.n	8012fac <_dtoa_r+0x4bc>
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	4b81      	ldr	r3, [pc, #516]	; (80130f8 <_dtoa_r+0x608>)
 8012ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ef8:	f7ed f9c6 	bl	8000288 <__aeabi_dsub>
 8012efc:	462a      	mov	r2, r5
 8012efe:	4633      	mov	r3, r6
 8012f00:	e9cd 0100 	strd	r0, r1, [sp]
 8012f04:	f7ed fe08 	bl	8000b18 <__aeabi_dcmpgt>
 8012f08:	2800      	cmp	r0, #0
 8012f0a:	f040 8288 	bne.w	801341e <_dtoa_r+0x92e>
 8012f0e:	462a      	mov	r2, r5
 8012f10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f18:	f7ed fde0 	bl	8000adc <__aeabi_dcmplt>
 8012f1c:	2800      	cmp	r0, #0
 8012f1e:	f040 827c 	bne.w	801341a <_dtoa_r+0x92a>
 8012f22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012f26:	e9cd 2300 	strd	r2, r3, [sp]
 8012f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	f2c0 8150 	blt.w	80131d2 <_dtoa_r+0x6e2>
 8012f32:	f1ba 0f0e 	cmp.w	sl, #14
 8012f36:	f300 814c 	bgt.w	80131d2 <_dtoa_r+0x6e2>
 8012f3a:	4b6a      	ldr	r3, [pc, #424]	; (80130e4 <_dtoa_r+0x5f4>)
 8012f3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f40:	ed93 7b00 	vldr	d7, [r3]
 8012f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f4c:	f280 80d8 	bge.w	8013100 <_dtoa_r+0x610>
 8012f50:	f1b9 0f00 	cmp.w	r9, #0
 8012f54:	f300 80d4 	bgt.w	8013100 <_dtoa_r+0x610>
 8012f58:	f040 825e 	bne.w	8013418 <_dtoa_r+0x928>
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	4b66      	ldr	r3, [pc, #408]	; (80130f8 <_dtoa_r+0x608>)
 8012f60:	ec51 0b17 	vmov	r0, r1, d7
 8012f64:	f7ed fb48 	bl	80005f8 <__aeabi_dmul>
 8012f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f6c:	f7ed fdca 	bl	8000b04 <__aeabi_dcmpge>
 8012f70:	464f      	mov	r7, r9
 8012f72:	464e      	mov	r6, r9
 8012f74:	2800      	cmp	r0, #0
 8012f76:	f040 8234 	bne.w	80133e2 <_dtoa_r+0x8f2>
 8012f7a:	2331      	movs	r3, #49	; 0x31
 8012f7c:	f10b 0501 	add.w	r5, fp, #1
 8012f80:	f88b 3000 	strb.w	r3, [fp]
 8012f84:	f10a 0a01 	add.w	sl, sl, #1
 8012f88:	e22f      	b.n	80133ea <_dtoa_r+0x8fa>
 8012f8a:	07f2      	lsls	r2, r6, #31
 8012f8c:	d505      	bpl.n	8012f9a <_dtoa_r+0x4aa>
 8012f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f92:	f7ed fb31 	bl	80005f8 <__aeabi_dmul>
 8012f96:	3501      	adds	r5, #1
 8012f98:	2301      	movs	r3, #1
 8012f9a:	1076      	asrs	r6, r6, #1
 8012f9c:	3708      	adds	r7, #8
 8012f9e:	e772      	b.n	8012e86 <_dtoa_r+0x396>
 8012fa0:	2502      	movs	r5, #2
 8012fa2:	e774      	b.n	8012e8e <_dtoa_r+0x39e>
 8012fa4:	f8cd a020 	str.w	sl, [sp, #32]
 8012fa8:	464f      	mov	r7, r9
 8012faa:	e791      	b.n	8012ed0 <_dtoa_r+0x3e0>
 8012fac:	4b4d      	ldr	r3, [pc, #308]	; (80130e4 <_dtoa_r+0x5f4>)
 8012fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012fb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d047      	beq.n	801304c <_dtoa_r+0x55c>
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	494e      	ldr	r1, [pc, #312]	; (80130fc <_dtoa_r+0x60c>)
 8012fc4:	f7ed fc42 	bl	800084c <__aeabi_ddiv>
 8012fc8:	462a      	mov	r2, r5
 8012fca:	4633      	mov	r3, r6
 8012fcc:	f7ed f95c 	bl	8000288 <__aeabi_dsub>
 8012fd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012fd4:	465d      	mov	r5, fp
 8012fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fda:	f7ed fdbd 	bl	8000b58 <__aeabi_d2iz>
 8012fde:	4606      	mov	r6, r0
 8012fe0:	f7ed faa0 	bl	8000524 <__aeabi_i2d>
 8012fe4:	4602      	mov	r2, r0
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fec:	f7ed f94c 	bl	8000288 <__aeabi_dsub>
 8012ff0:	3630      	adds	r6, #48	; 0x30
 8012ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8012ff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8012ffe:	f7ed fd6d 	bl	8000adc <__aeabi_dcmplt>
 8013002:	2800      	cmp	r0, #0
 8013004:	d163      	bne.n	80130ce <_dtoa_r+0x5de>
 8013006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801300a:	2000      	movs	r0, #0
 801300c:	4937      	ldr	r1, [pc, #220]	; (80130ec <_dtoa_r+0x5fc>)
 801300e:	f7ed f93b 	bl	8000288 <__aeabi_dsub>
 8013012:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013016:	f7ed fd61 	bl	8000adc <__aeabi_dcmplt>
 801301a:	2800      	cmp	r0, #0
 801301c:	f040 80b7 	bne.w	801318e <_dtoa_r+0x69e>
 8013020:	eba5 030b 	sub.w	r3, r5, fp
 8013024:	429f      	cmp	r7, r3
 8013026:	f77f af7c 	ble.w	8012f22 <_dtoa_r+0x432>
 801302a:	2200      	movs	r2, #0
 801302c:	4b30      	ldr	r3, [pc, #192]	; (80130f0 <_dtoa_r+0x600>)
 801302e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013032:	f7ed fae1 	bl	80005f8 <__aeabi_dmul>
 8013036:	2200      	movs	r2, #0
 8013038:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801303c:	4b2c      	ldr	r3, [pc, #176]	; (80130f0 <_dtoa_r+0x600>)
 801303e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013042:	f7ed fad9 	bl	80005f8 <__aeabi_dmul>
 8013046:	e9cd 0100 	strd	r0, r1, [sp]
 801304a:	e7c4      	b.n	8012fd6 <_dtoa_r+0x4e6>
 801304c:	462a      	mov	r2, r5
 801304e:	4633      	mov	r3, r6
 8013050:	f7ed fad2 	bl	80005f8 <__aeabi_dmul>
 8013054:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013058:	eb0b 0507 	add.w	r5, fp, r7
 801305c:	465e      	mov	r6, fp
 801305e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013062:	f7ed fd79 	bl	8000b58 <__aeabi_d2iz>
 8013066:	4607      	mov	r7, r0
 8013068:	f7ed fa5c 	bl	8000524 <__aeabi_i2d>
 801306c:	3730      	adds	r7, #48	; 0x30
 801306e:	4602      	mov	r2, r0
 8013070:	460b      	mov	r3, r1
 8013072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013076:	f7ed f907 	bl	8000288 <__aeabi_dsub>
 801307a:	f806 7b01 	strb.w	r7, [r6], #1
 801307e:	42ae      	cmp	r6, r5
 8013080:	e9cd 0100 	strd	r0, r1, [sp]
 8013084:	f04f 0200 	mov.w	r2, #0
 8013088:	d126      	bne.n	80130d8 <_dtoa_r+0x5e8>
 801308a:	4b1c      	ldr	r3, [pc, #112]	; (80130fc <_dtoa_r+0x60c>)
 801308c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013090:	f7ed f8fc 	bl	800028c <__adddf3>
 8013094:	4602      	mov	r2, r0
 8013096:	460b      	mov	r3, r1
 8013098:	e9dd 0100 	ldrd	r0, r1, [sp]
 801309c:	f7ed fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d174      	bne.n	801318e <_dtoa_r+0x69e>
 80130a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80130a8:	2000      	movs	r0, #0
 80130aa:	4914      	ldr	r1, [pc, #80]	; (80130fc <_dtoa_r+0x60c>)
 80130ac:	f7ed f8ec 	bl	8000288 <__aeabi_dsub>
 80130b0:	4602      	mov	r2, r0
 80130b2:	460b      	mov	r3, r1
 80130b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130b8:	f7ed fd10 	bl	8000adc <__aeabi_dcmplt>
 80130bc:	2800      	cmp	r0, #0
 80130be:	f43f af30 	beq.w	8012f22 <_dtoa_r+0x432>
 80130c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80130c6:	2b30      	cmp	r3, #48	; 0x30
 80130c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80130cc:	d002      	beq.n	80130d4 <_dtoa_r+0x5e4>
 80130ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80130d2:	e04a      	b.n	801316a <_dtoa_r+0x67a>
 80130d4:	4615      	mov	r5, r2
 80130d6:	e7f4      	b.n	80130c2 <_dtoa_r+0x5d2>
 80130d8:	4b05      	ldr	r3, [pc, #20]	; (80130f0 <_dtoa_r+0x600>)
 80130da:	f7ed fa8d 	bl	80005f8 <__aeabi_dmul>
 80130de:	e9cd 0100 	strd	r0, r1, [sp]
 80130e2:	e7bc      	b.n	801305e <_dtoa_r+0x56e>
 80130e4:	08015b50 	.word	0x08015b50
 80130e8:	08015b28 	.word	0x08015b28
 80130ec:	3ff00000 	.word	0x3ff00000
 80130f0:	40240000 	.word	0x40240000
 80130f4:	401c0000 	.word	0x401c0000
 80130f8:	40140000 	.word	0x40140000
 80130fc:	3fe00000 	.word	0x3fe00000
 8013100:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013104:	465d      	mov	r5, fp
 8013106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801310a:	4630      	mov	r0, r6
 801310c:	4639      	mov	r1, r7
 801310e:	f7ed fb9d 	bl	800084c <__aeabi_ddiv>
 8013112:	f7ed fd21 	bl	8000b58 <__aeabi_d2iz>
 8013116:	4680      	mov	r8, r0
 8013118:	f7ed fa04 	bl	8000524 <__aeabi_i2d>
 801311c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013120:	f7ed fa6a 	bl	80005f8 <__aeabi_dmul>
 8013124:	4602      	mov	r2, r0
 8013126:	460b      	mov	r3, r1
 8013128:	4630      	mov	r0, r6
 801312a:	4639      	mov	r1, r7
 801312c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013130:	f7ed f8aa 	bl	8000288 <__aeabi_dsub>
 8013134:	f805 6b01 	strb.w	r6, [r5], #1
 8013138:	eba5 060b 	sub.w	r6, r5, fp
 801313c:	45b1      	cmp	r9, r6
 801313e:	4602      	mov	r2, r0
 8013140:	460b      	mov	r3, r1
 8013142:	d139      	bne.n	80131b8 <_dtoa_r+0x6c8>
 8013144:	f7ed f8a2 	bl	800028c <__adddf3>
 8013148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801314c:	4606      	mov	r6, r0
 801314e:	460f      	mov	r7, r1
 8013150:	f7ed fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8013154:	b9c8      	cbnz	r0, 801318a <_dtoa_r+0x69a>
 8013156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801315a:	4630      	mov	r0, r6
 801315c:	4639      	mov	r1, r7
 801315e:	f7ed fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013162:	b110      	cbz	r0, 801316a <_dtoa_r+0x67a>
 8013164:	f018 0f01 	tst.w	r8, #1
 8013168:	d10f      	bne.n	801318a <_dtoa_r+0x69a>
 801316a:	9904      	ldr	r1, [sp, #16]
 801316c:	4620      	mov	r0, r4
 801316e:	f000 fec9 	bl	8013f04 <_Bfree>
 8013172:	2300      	movs	r3, #0
 8013174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013176:	702b      	strb	r3, [r5, #0]
 8013178:	f10a 0301 	add.w	r3, sl, #1
 801317c:	6013      	str	r3, [r2, #0]
 801317e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013180:	2b00      	cmp	r3, #0
 8013182:	f000 8241 	beq.w	8013608 <_dtoa_r+0xb18>
 8013186:	601d      	str	r5, [r3, #0]
 8013188:	e23e      	b.n	8013608 <_dtoa_r+0xb18>
 801318a:	f8cd a020 	str.w	sl, [sp, #32]
 801318e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013192:	2a39      	cmp	r2, #57	; 0x39
 8013194:	f105 33ff 	add.w	r3, r5, #4294967295
 8013198:	d108      	bne.n	80131ac <_dtoa_r+0x6bc>
 801319a:	459b      	cmp	fp, r3
 801319c:	d10a      	bne.n	80131b4 <_dtoa_r+0x6c4>
 801319e:	9b08      	ldr	r3, [sp, #32]
 80131a0:	3301      	adds	r3, #1
 80131a2:	9308      	str	r3, [sp, #32]
 80131a4:	2330      	movs	r3, #48	; 0x30
 80131a6:	f88b 3000 	strb.w	r3, [fp]
 80131aa:	465b      	mov	r3, fp
 80131ac:	781a      	ldrb	r2, [r3, #0]
 80131ae:	3201      	adds	r2, #1
 80131b0:	701a      	strb	r2, [r3, #0]
 80131b2:	e78c      	b.n	80130ce <_dtoa_r+0x5de>
 80131b4:	461d      	mov	r5, r3
 80131b6:	e7ea      	b.n	801318e <_dtoa_r+0x69e>
 80131b8:	2200      	movs	r2, #0
 80131ba:	4b9b      	ldr	r3, [pc, #620]	; (8013428 <_dtoa_r+0x938>)
 80131bc:	f7ed fa1c 	bl	80005f8 <__aeabi_dmul>
 80131c0:	2200      	movs	r2, #0
 80131c2:	2300      	movs	r3, #0
 80131c4:	4606      	mov	r6, r0
 80131c6:	460f      	mov	r7, r1
 80131c8:	f7ed fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d09a      	beq.n	8013106 <_dtoa_r+0x616>
 80131d0:	e7cb      	b.n	801316a <_dtoa_r+0x67a>
 80131d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131d4:	2a00      	cmp	r2, #0
 80131d6:	f000 808b 	beq.w	80132f0 <_dtoa_r+0x800>
 80131da:	9a06      	ldr	r2, [sp, #24]
 80131dc:	2a01      	cmp	r2, #1
 80131de:	dc6e      	bgt.n	80132be <_dtoa_r+0x7ce>
 80131e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80131e2:	2a00      	cmp	r2, #0
 80131e4:	d067      	beq.n	80132b6 <_dtoa_r+0x7c6>
 80131e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80131ea:	9f07      	ldr	r7, [sp, #28]
 80131ec:	9d05      	ldr	r5, [sp, #20]
 80131ee:	9a05      	ldr	r2, [sp, #20]
 80131f0:	2101      	movs	r1, #1
 80131f2:	441a      	add	r2, r3
 80131f4:	4620      	mov	r0, r4
 80131f6:	9205      	str	r2, [sp, #20]
 80131f8:	4498      	add	r8, r3
 80131fa:	f000 ff61 	bl	80140c0 <__i2b>
 80131fe:	4606      	mov	r6, r0
 8013200:	2d00      	cmp	r5, #0
 8013202:	dd0c      	ble.n	801321e <_dtoa_r+0x72e>
 8013204:	f1b8 0f00 	cmp.w	r8, #0
 8013208:	dd09      	ble.n	801321e <_dtoa_r+0x72e>
 801320a:	4545      	cmp	r5, r8
 801320c:	9a05      	ldr	r2, [sp, #20]
 801320e:	462b      	mov	r3, r5
 8013210:	bfa8      	it	ge
 8013212:	4643      	movge	r3, r8
 8013214:	1ad2      	subs	r2, r2, r3
 8013216:	9205      	str	r2, [sp, #20]
 8013218:	1aed      	subs	r5, r5, r3
 801321a:	eba8 0803 	sub.w	r8, r8, r3
 801321e:	9b07      	ldr	r3, [sp, #28]
 8013220:	b1eb      	cbz	r3, 801325e <_dtoa_r+0x76e>
 8013222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013224:	2b00      	cmp	r3, #0
 8013226:	d067      	beq.n	80132f8 <_dtoa_r+0x808>
 8013228:	b18f      	cbz	r7, 801324e <_dtoa_r+0x75e>
 801322a:	4631      	mov	r1, r6
 801322c:	463a      	mov	r2, r7
 801322e:	4620      	mov	r0, r4
 8013230:	f000 ffe6 	bl	8014200 <__pow5mult>
 8013234:	9a04      	ldr	r2, [sp, #16]
 8013236:	4601      	mov	r1, r0
 8013238:	4606      	mov	r6, r0
 801323a:	4620      	mov	r0, r4
 801323c:	f000 ff49 	bl	80140d2 <__multiply>
 8013240:	9904      	ldr	r1, [sp, #16]
 8013242:	9008      	str	r0, [sp, #32]
 8013244:	4620      	mov	r0, r4
 8013246:	f000 fe5d 	bl	8013f04 <_Bfree>
 801324a:	9b08      	ldr	r3, [sp, #32]
 801324c:	9304      	str	r3, [sp, #16]
 801324e:	9b07      	ldr	r3, [sp, #28]
 8013250:	1bda      	subs	r2, r3, r7
 8013252:	d004      	beq.n	801325e <_dtoa_r+0x76e>
 8013254:	9904      	ldr	r1, [sp, #16]
 8013256:	4620      	mov	r0, r4
 8013258:	f000 ffd2 	bl	8014200 <__pow5mult>
 801325c:	9004      	str	r0, [sp, #16]
 801325e:	2101      	movs	r1, #1
 8013260:	4620      	mov	r0, r4
 8013262:	f000 ff2d 	bl	80140c0 <__i2b>
 8013266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013268:	4607      	mov	r7, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	f000 81d0 	beq.w	8013610 <_dtoa_r+0xb20>
 8013270:	461a      	mov	r2, r3
 8013272:	4601      	mov	r1, r0
 8013274:	4620      	mov	r0, r4
 8013276:	f000 ffc3 	bl	8014200 <__pow5mult>
 801327a:	9b06      	ldr	r3, [sp, #24]
 801327c:	2b01      	cmp	r3, #1
 801327e:	4607      	mov	r7, r0
 8013280:	dc40      	bgt.n	8013304 <_dtoa_r+0x814>
 8013282:	9b00      	ldr	r3, [sp, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d139      	bne.n	80132fc <_dtoa_r+0x80c>
 8013288:	9b01      	ldr	r3, [sp, #4]
 801328a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801328e:	2b00      	cmp	r3, #0
 8013290:	d136      	bne.n	8013300 <_dtoa_r+0x810>
 8013292:	9b01      	ldr	r3, [sp, #4]
 8013294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013298:	0d1b      	lsrs	r3, r3, #20
 801329a:	051b      	lsls	r3, r3, #20
 801329c:	b12b      	cbz	r3, 80132aa <_dtoa_r+0x7ba>
 801329e:	9b05      	ldr	r3, [sp, #20]
 80132a0:	3301      	adds	r3, #1
 80132a2:	9305      	str	r3, [sp, #20]
 80132a4:	f108 0801 	add.w	r8, r8, #1
 80132a8:	2301      	movs	r3, #1
 80132aa:	9307      	str	r3, [sp, #28]
 80132ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d12a      	bne.n	8013308 <_dtoa_r+0x818>
 80132b2:	2001      	movs	r0, #1
 80132b4:	e030      	b.n	8013318 <_dtoa_r+0x828>
 80132b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80132b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80132bc:	e795      	b.n	80131ea <_dtoa_r+0x6fa>
 80132be:	9b07      	ldr	r3, [sp, #28]
 80132c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80132c4:	42bb      	cmp	r3, r7
 80132c6:	bfbf      	itttt	lt
 80132c8:	9b07      	ldrlt	r3, [sp, #28]
 80132ca:	9707      	strlt	r7, [sp, #28]
 80132cc:	1afa      	sublt	r2, r7, r3
 80132ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80132d0:	bfbb      	ittet	lt
 80132d2:	189b      	addlt	r3, r3, r2
 80132d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80132d6:	1bdf      	subge	r7, r3, r7
 80132d8:	2700      	movlt	r7, #0
 80132da:	f1b9 0f00 	cmp.w	r9, #0
 80132de:	bfb5      	itete	lt
 80132e0:	9b05      	ldrlt	r3, [sp, #20]
 80132e2:	9d05      	ldrge	r5, [sp, #20]
 80132e4:	eba3 0509 	sublt.w	r5, r3, r9
 80132e8:	464b      	movge	r3, r9
 80132ea:	bfb8      	it	lt
 80132ec:	2300      	movlt	r3, #0
 80132ee:	e77e      	b.n	80131ee <_dtoa_r+0x6fe>
 80132f0:	9f07      	ldr	r7, [sp, #28]
 80132f2:	9d05      	ldr	r5, [sp, #20]
 80132f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80132f6:	e783      	b.n	8013200 <_dtoa_r+0x710>
 80132f8:	9a07      	ldr	r2, [sp, #28]
 80132fa:	e7ab      	b.n	8013254 <_dtoa_r+0x764>
 80132fc:	2300      	movs	r3, #0
 80132fe:	e7d4      	b.n	80132aa <_dtoa_r+0x7ba>
 8013300:	9b00      	ldr	r3, [sp, #0]
 8013302:	e7d2      	b.n	80132aa <_dtoa_r+0x7ba>
 8013304:	2300      	movs	r3, #0
 8013306:	9307      	str	r3, [sp, #28]
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801330e:	6918      	ldr	r0, [r3, #16]
 8013310:	f000 fe88 	bl	8014024 <__hi0bits>
 8013314:	f1c0 0020 	rsb	r0, r0, #32
 8013318:	4440      	add	r0, r8
 801331a:	f010 001f 	ands.w	r0, r0, #31
 801331e:	d047      	beq.n	80133b0 <_dtoa_r+0x8c0>
 8013320:	f1c0 0320 	rsb	r3, r0, #32
 8013324:	2b04      	cmp	r3, #4
 8013326:	dd3b      	ble.n	80133a0 <_dtoa_r+0x8b0>
 8013328:	9b05      	ldr	r3, [sp, #20]
 801332a:	f1c0 001c 	rsb	r0, r0, #28
 801332e:	4403      	add	r3, r0
 8013330:	9305      	str	r3, [sp, #20]
 8013332:	4405      	add	r5, r0
 8013334:	4480      	add	r8, r0
 8013336:	9b05      	ldr	r3, [sp, #20]
 8013338:	2b00      	cmp	r3, #0
 801333a:	dd05      	ble.n	8013348 <_dtoa_r+0x858>
 801333c:	461a      	mov	r2, r3
 801333e:	9904      	ldr	r1, [sp, #16]
 8013340:	4620      	mov	r0, r4
 8013342:	f000 ffab 	bl	801429c <__lshift>
 8013346:	9004      	str	r0, [sp, #16]
 8013348:	f1b8 0f00 	cmp.w	r8, #0
 801334c:	dd05      	ble.n	801335a <_dtoa_r+0x86a>
 801334e:	4639      	mov	r1, r7
 8013350:	4642      	mov	r2, r8
 8013352:	4620      	mov	r0, r4
 8013354:	f000 ffa2 	bl	801429c <__lshift>
 8013358:	4607      	mov	r7, r0
 801335a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801335c:	b353      	cbz	r3, 80133b4 <_dtoa_r+0x8c4>
 801335e:	4639      	mov	r1, r7
 8013360:	9804      	ldr	r0, [sp, #16]
 8013362:	f000 ffef 	bl	8014344 <__mcmp>
 8013366:	2800      	cmp	r0, #0
 8013368:	da24      	bge.n	80133b4 <_dtoa_r+0x8c4>
 801336a:	2300      	movs	r3, #0
 801336c:	220a      	movs	r2, #10
 801336e:	9904      	ldr	r1, [sp, #16]
 8013370:	4620      	mov	r0, r4
 8013372:	f000 fdde 	bl	8013f32 <__multadd>
 8013376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013378:	9004      	str	r0, [sp, #16]
 801337a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801337e:	2b00      	cmp	r3, #0
 8013380:	f000 814d 	beq.w	801361e <_dtoa_r+0xb2e>
 8013384:	2300      	movs	r3, #0
 8013386:	4631      	mov	r1, r6
 8013388:	220a      	movs	r2, #10
 801338a:	4620      	mov	r0, r4
 801338c:	f000 fdd1 	bl	8013f32 <__multadd>
 8013390:	9b02      	ldr	r3, [sp, #8]
 8013392:	2b00      	cmp	r3, #0
 8013394:	4606      	mov	r6, r0
 8013396:	dc4f      	bgt.n	8013438 <_dtoa_r+0x948>
 8013398:	9b06      	ldr	r3, [sp, #24]
 801339a:	2b02      	cmp	r3, #2
 801339c:	dd4c      	ble.n	8013438 <_dtoa_r+0x948>
 801339e:	e011      	b.n	80133c4 <_dtoa_r+0x8d4>
 80133a0:	d0c9      	beq.n	8013336 <_dtoa_r+0x846>
 80133a2:	9a05      	ldr	r2, [sp, #20]
 80133a4:	331c      	adds	r3, #28
 80133a6:	441a      	add	r2, r3
 80133a8:	9205      	str	r2, [sp, #20]
 80133aa:	441d      	add	r5, r3
 80133ac:	4498      	add	r8, r3
 80133ae:	e7c2      	b.n	8013336 <_dtoa_r+0x846>
 80133b0:	4603      	mov	r3, r0
 80133b2:	e7f6      	b.n	80133a2 <_dtoa_r+0x8b2>
 80133b4:	f1b9 0f00 	cmp.w	r9, #0
 80133b8:	dc38      	bgt.n	801342c <_dtoa_r+0x93c>
 80133ba:	9b06      	ldr	r3, [sp, #24]
 80133bc:	2b02      	cmp	r3, #2
 80133be:	dd35      	ble.n	801342c <_dtoa_r+0x93c>
 80133c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80133c4:	9b02      	ldr	r3, [sp, #8]
 80133c6:	b963      	cbnz	r3, 80133e2 <_dtoa_r+0x8f2>
 80133c8:	4639      	mov	r1, r7
 80133ca:	2205      	movs	r2, #5
 80133cc:	4620      	mov	r0, r4
 80133ce:	f000 fdb0 	bl	8013f32 <__multadd>
 80133d2:	4601      	mov	r1, r0
 80133d4:	4607      	mov	r7, r0
 80133d6:	9804      	ldr	r0, [sp, #16]
 80133d8:	f000 ffb4 	bl	8014344 <__mcmp>
 80133dc:	2800      	cmp	r0, #0
 80133de:	f73f adcc 	bgt.w	8012f7a <_dtoa_r+0x48a>
 80133e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133e4:	465d      	mov	r5, fp
 80133e6:	ea6f 0a03 	mvn.w	sl, r3
 80133ea:	f04f 0900 	mov.w	r9, #0
 80133ee:	4639      	mov	r1, r7
 80133f0:	4620      	mov	r0, r4
 80133f2:	f000 fd87 	bl	8013f04 <_Bfree>
 80133f6:	2e00      	cmp	r6, #0
 80133f8:	f43f aeb7 	beq.w	801316a <_dtoa_r+0x67a>
 80133fc:	f1b9 0f00 	cmp.w	r9, #0
 8013400:	d005      	beq.n	801340e <_dtoa_r+0x91e>
 8013402:	45b1      	cmp	r9, r6
 8013404:	d003      	beq.n	801340e <_dtoa_r+0x91e>
 8013406:	4649      	mov	r1, r9
 8013408:	4620      	mov	r0, r4
 801340a:	f000 fd7b 	bl	8013f04 <_Bfree>
 801340e:	4631      	mov	r1, r6
 8013410:	4620      	mov	r0, r4
 8013412:	f000 fd77 	bl	8013f04 <_Bfree>
 8013416:	e6a8      	b.n	801316a <_dtoa_r+0x67a>
 8013418:	2700      	movs	r7, #0
 801341a:	463e      	mov	r6, r7
 801341c:	e7e1      	b.n	80133e2 <_dtoa_r+0x8f2>
 801341e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013422:	463e      	mov	r6, r7
 8013424:	e5a9      	b.n	8012f7a <_dtoa_r+0x48a>
 8013426:	bf00      	nop
 8013428:	40240000 	.word	0x40240000
 801342c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801342e:	f8cd 9008 	str.w	r9, [sp, #8]
 8013432:	2b00      	cmp	r3, #0
 8013434:	f000 80fa 	beq.w	801362c <_dtoa_r+0xb3c>
 8013438:	2d00      	cmp	r5, #0
 801343a:	dd05      	ble.n	8013448 <_dtoa_r+0x958>
 801343c:	4631      	mov	r1, r6
 801343e:	462a      	mov	r2, r5
 8013440:	4620      	mov	r0, r4
 8013442:	f000 ff2b 	bl	801429c <__lshift>
 8013446:	4606      	mov	r6, r0
 8013448:	9b07      	ldr	r3, [sp, #28]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d04c      	beq.n	80134e8 <_dtoa_r+0x9f8>
 801344e:	6871      	ldr	r1, [r6, #4]
 8013450:	4620      	mov	r0, r4
 8013452:	f000 fd23 	bl	8013e9c <_Balloc>
 8013456:	6932      	ldr	r2, [r6, #16]
 8013458:	3202      	adds	r2, #2
 801345a:	4605      	mov	r5, r0
 801345c:	0092      	lsls	r2, r2, #2
 801345e:	f106 010c 	add.w	r1, r6, #12
 8013462:	300c      	adds	r0, #12
 8013464:	f7fd fd4c 	bl	8010f00 <memcpy>
 8013468:	2201      	movs	r2, #1
 801346a:	4629      	mov	r1, r5
 801346c:	4620      	mov	r0, r4
 801346e:	f000 ff15 	bl	801429c <__lshift>
 8013472:	9b00      	ldr	r3, [sp, #0]
 8013474:	f8cd b014 	str.w	fp, [sp, #20]
 8013478:	f003 0301 	and.w	r3, r3, #1
 801347c:	46b1      	mov	r9, r6
 801347e:	9307      	str	r3, [sp, #28]
 8013480:	4606      	mov	r6, r0
 8013482:	4639      	mov	r1, r7
 8013484:	9804      	ldr	r0, [sp, #16]
 8013486:	f7ff faa5 	bl	80129d4 <quorem>
 801348a:	4649      	mov	r1, r9
 801348c:	4605      	mov	r5, r0
 801348e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013492:	9804      	ldr	r0, [sp, #16]
 8013494:	f000 ff56 	bl	8014344 <__mcmp>
 8013498:	4632      	mov	r2, r6
 801349a:	9000      	str	r0, [sp, #0]
 801349c:	4639      	mov	r1, r7
 801349e:	4620      	mov	r0, r4
 80134a0:	f000 ff6a 	bl	8014378 <__mdiff>
 80134a4:	68c3      	ldr	r3, [r0, #12]
 80134a6:	4602      	mov	r2, r0
 80134a8:	bb03      	cbnz	r3, 80134ec <_dtoa_r+0x9fc>
 80134aa:	4601      	mov	r1, r0
 80134ac:	9008      	str	r0, [sp, #32]
 80134ae:	9804      	ldr	r0, [sp, #16]
 80134b0:	f000 ff48 	bl	8014344 <__mcmp>
 80134b4:	9a08      	ldr	r2, [sp, #32]
 80134b6:	4603      	mov	r3, r0
 80134b8:	4611      	mov	r1, r2
 80134ba:	4620      	mov	r0, r4
 80134bc:	9308      	str	r3, [sp, #32]
 80134be:	f000 fd21 	bl	8013f04 <_Bfree>
 80134c2:	9b08      	ldr	r3, [sp, #32]
 80134c4:	b9a3      	cbnz	r3, 80134f0 <_dtoa_r+0xa00>
 80134c6:	9a06      	ldr	r2, [sp, #24]
 80134c8:	b992      	cbnz	r2, 80134f0 <_dtoa_r+0xa00>
 80134ca:	9a07      	ldr	r2, [sp, #28]
 80134cc:	b982      	cbnz	r2, 80134f0 <_dtoa_r+0xa00>
 80134ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80134d2:	d029      	beq.n	8013528 <_dtoa_r+0xa38>
 80134d4:	9b00      	ldr	r3, [sp, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	dd01      	ble.n	80134de <_dtoa_r+0x9ee>
 80134da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80134de:	9b05      	ldr	r3, [sp, #20]
 80134e0:	1c5d      	adds	r5, r3, #1
 80134e2:	f883 8000 	strb.w	r8, [r3]
 80134e6:	e782      	b.n	80133ee <_dtoa_r+0x8fe>
 80134e8:	4630      	mov	r0, r6
 80134ea:	e7c2      	b.n	8013472 <_dtoa_r+0x982>
 80134ec:	2301      	movs	r3, #1
 80134ee:	e7e3      	b.n	80134b8 <_dtoa_r+0x9c8>
 80134f0:	9a00      	ldr	r2, [sp, #0]
 80134f2:	2a00      	cmp	r2, #0
 80134f4:	db04      	blt.n	8013500 <_dtoa_r+0xa10>
 80134f6:	d125      	bne.n	8013544 <_dtoa_r+0xa54>
 80134f8:	9a06      	ldr	r2, [sp, #24]
 80134fa:	bb1a      	cbnz	r2, 8013544 <_dtoa_r+0xa54>
 80134fc:	9a07      	ldr	r2, [sp, #28]
 80134fe:	bb0a      	cbnz	r2, 8013544 <_dtoa_r+0xa54>
 8013500:	2b00      	cmp	r3, #0
 8013502:	ddec      	ble.n	80134de <_dtoa_r+0x9ee>
 8013504:	2201      	movs	r2, #1
 8013506:	9904      	ldr	r1, [sp, #16]
 8013508:	4620      	mov	r0, r4
 801350a:	f000 fec7 	bl	801429c <__lshift>
 801350e:	4639      	mov	r1, r7
 8013510:	9004      	str	r0, [sp, #16]
 8013512:	f000 ff17 	bl	8014344 <__mcmp>
 8013516:	2800      	cmp	r0, #0
 8013518:	dc03      	bgt.n	8013522 <_dtoa_r+0xa32>
 801351a:	d1e0      	bne.n	80134de <_dtoa_r+0x9ee>
 801351c:	f018 0f01 	tst.w	r8, #1
 8013520:	d0dd      	beq.n	80134de <_dtoa_r+0x9ee>
 8013522:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013526:	d1d8      	bne.n	80134da <_dtoa_r+0x9ea>
 8013528:	9b05      	ldr	r3, [sp, #20]
 801352a:	9a05      	ldr	r2, [sp, #20]
 801352c:	1c5d      	adds	r5, r3, #1
 801352e:	2339      	movs	r3, #57	; 0x39
 8013530:	7013      	strb	r3, [r2, #0]
 8013532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013536:	2b39      	cmp	r3, #57	; 0x39
 8013538:	f105 32ff 	add.w	r2, r5, #4294967295
 801353c:	d04f      	beq.n	80135de <_dtoa_r+0xaee>
 801353e:	3301      	adds	r3, #1
 8013540:	7013      	strb	r3, [r2, #0]
 8013542:	e754      	b.n	80133ee <_dtoa_r+0x8fe>
 8013544:	9a05      	ldr	r2, [sp, #20]
 8013546:	2b00      	cmp	r3, #0
 8013548:	f102 0501 	add.w	r5, r2, #1
 801354c:	dd06      	ble.n	801355c <_dtoa_r+0xa6c>
 801354e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013552:	d0e9      	beq.n	8013528 <_dtoa_r+0xa38>
 8013554:	f108 0801 	add.w	r8, r8, #1
 8013558:	9b05      	ldr	r3, [sp, #20]
 801355a:	e7c2      	b.n	80134e2 <_dtoa_r+0x9f2>
 801355c:	9a02      	ldr	r2, [sp, #8]
 801355e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013562:	eba5 030b 	sub.w	r3, r5, fp
 8013566:	4293      	cmp	r3, r2
 8013568:	d021      	beq.n	80135ae <_dtoa_r+0xabe>
 801356a:	2300      	movs	r3, #0
 801356c:	220a      	movs	r2, #10
 801356e:	9904      	ldr	r1, [sp, #16]
 8013570:	4620      	mov	r0, r4
 8013572:	f000 fcde 	bl	8013f32 <__multadd>
 8013576:	45b1      	cmp	r9, r6
 8013578:	9004      	str	r0, [sp, #16]
 801357a:	f04f 0300 	mov.w	r3, #0
 801357e:	f04f 020a 	mov.w	r2, #10
 8013582:	4649      	mov	r1, r9
 8013584:	4620      	mov	r0, r4
 8013586:	d105      	bne.n	8013594 <_dtoa_r+0xaa4>
 8013588:	f000 fcd3 	bl	8013f32 <__multadd>
 801358c:	4681      	mov	r9, r0
 801358e:	4606      	mov	r6, r0
 8013590:	9505      	str	r5, [sp, #20]
 8013592:	e776      	b.n	8013482 <_dtoa_r+0x992>
 8013594:	f000 fccd 	bl	8013f32 <__multadd>
 8013598:	4631      	mov	r1, r6
 801359a:	4681      	mov	r9, r0
 801359c:	2300      	movs	r3, #0
 801359e:	220a      	movs	r2, #10
 80135a0:	4620      	mov	r0, r4
 80135a2:	f000 fcc6 	bl	8013f32 <__multadd>
 80135a6:	4606      	mov	r6, r0
 80135a8:	e7f2      	b.n	8013590 <_dtoa_r+0xaa0>
 80135aa:	f04f 0900 	mov.w	r9, #0
 80135ae:	2201      	movs	r2, #1
 80135b0:	9904      	ldr	r1, [sp, #16]
 80135b2:	4620      	mov	r0, r4
 80135b4:	f000 fe72 	bl	801429c <__lshift>
 80135b8:	4639      	mov	r1, r7
 80135ba:	9004      	str	r0, [sp, #16]
 80135bc:	f000 fec2 	bl	8014344 <__mcmp>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	dcb6      	bgt.n	8013532 <_dtoa_r+0xa42>
 80135c4:	d102      	bne.n	80135cc <_dtoa_r+0xadc>
 80135c6:	f018 0f01 	tst.w	r8, #1
 80135ca:	d1b2      	bne.n	8013532 <_dtoa_r+0xa42>
 80135cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80135d0:	2b30      	cmp	r3, #48	; 0x30
 80135d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80135d6:	f47f af0a 	bne.w	80133ee <_dtoa_r+0x8fe>
 80135da:	4615      	mov	r5, r2
 80135dc:	e7f6      	b.n	80135cc <_dtoa_r+0xadc>
 80135de:	4593      	cmp	fp, r2
 80135e0:	d105      	bne.n	80135ee <_dtoa_r+0xafe>
 80135e2:	2331      	movs	r3, #49	; 0x31
 80135e4:	f10a 0a01 	add.w	sl, sl, #1
 80135e8:	f88b 3000 	strb.w	r3, [fp]
 80135ec:	e6ff      	b.n	80133ee <_dtoa_r+0x8fe>
 80135ee:	4615      	mov	r5, r2
 80135f0:	e79f      	b.n	8013532 <_dtoa_r+0xa42>
 80135f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013658 <_dtoa_r+0xb68>
 80135f6:	e007      	b.n	8013608 <_dtoa_r+0xb18>
 80135f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 801365c <_dtoa_r+0xb6c>
 80135fe:	b11b      	cbz	r3, 8013608 <_dtoa_r+0xb18>
 8013600:	f10b 0308 	add.w	r3, fp, #8
 8013604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013606:	6013      	str	r3, [r2, #0]
 8013608:	4658      	mov	r0, fp
 801360a:	b017      	add	sp, #92	; 0x5c
 801360c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013610:	9b06      	ldr	r3, [sp, #24]
 8013612:	2b01      	cmp	r3, #1
 8013614:	f77f ae35 	ble.w	8013282 <_dtoa_r+0x792>
 8013618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801361a:	9307      	str	r3, [sp, #28]
 801361c:	e649      	b.n	80132b2 <_dtoa_r+0x7c2>
 801361e:	9b02      	ldr	r3, [sp, #8]
 8013620:	2b00      	cmp	r3, #0
 8013622:	dc03      	bgt.n	801362c <_dtoa_r+0xb3c>
 8013624:	9b06      	ldr	r3, [sp, #24]
 8013626:	2b02      	cmp	r3, #2
 8013628:	f73f aecc 	bgt.w	80133c4 <_dtoa_r+0x8d4>
 801362c:	465d      	mov	r5, fp
 801362e:	4639      	mov	r1, r7
 8013630:	9804      	ldr	r0, [sp, #16]
 8013632:	f7ff f9cf 	bl	80129d4 <quorem>
 8013636:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801363a:	f805 8b01 	strb.w	r8, [r5], #1
 801363e:	9a02      	ldr	r2, [sp, #8]
 8013640:	eba5 030b 	sub.w	r3, r5, fp
 8013644:	429a      	cmp	r2, r3
 8013646:	ddb0      	ble.n	80135aa <_dtoa_r+0xaba>
 8013648:	2300      	movs	r3, #0
 801364a:	220a      	movs	r2, #10
 801364c:	9904      	ldr	r1, [sp, #16]
 801364e:	4620      	mov	r0, r4
 8013650:	f000 fc6f 	bl	8013f32 <__multadd>
 8013654:	9004      	str	r0, [sp, #16]
 8013656:	e7ea      	b.n	801362e <_dtoa_r+0xb3e>
 8013658:	08015a2c 	.word	0x08015a2c
 801365c:	08015aa8 	.word	0x08015aa8

08013660 <std>:
 8013660:	2300      	movs	r3, #0
 8013662:	b510      	push	{r4, lr}
 8013664:	4604      	mov	r4, r0
 8013666:	e9c0 3300 	strd	r3, r3, [r0]
 801366a:	6083      	str	r3, [r0, #8]
 801366c:	8181      	strh	r1, [r0, #12]
 801366e:	6643      	str	r3, [r0, #100]	; 0x64
 8013670:	81c2      	strh	r2, [r0, #14]
 8013672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013676:	6183      	str	r3, [r0, #24]
 8013678:	4619      	mov	r1, r3
 801367a:	2208      	movs	r2, #8
 801367c:	305c      	adds	r0, #92	; 0x5c
 801367e:	f7fd fc4a 	bl	8010f16 <memset>
 8013682:	4b05      	ldr	r3, [pc, #20]	; (8013698 <std+0x38>)
 8013684:	6263      	str	r3, [r4, #36]	; 0x24
 8013686:	4b05      	ldr	r3, [pc, #20]	; (801369c <std+0x3c>)
 8013688:	62a3      	str	r3, [r4, #40]	; 0x28
 801368a:	4b05      	ldr	r3, [pc, #20]	; (80136a0 <std+0x40>)
 801368c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801368e:	4b05      	ldr	r3, [pc, #20]	; (80136a4 <std+0x44>)
 8013690:	6224      	str	r4, [r4, #32]
 8013692:	6323      	str	r3, [r4, #48]	; 0x30
 8013694:	bd10      	pop	{r4, pc}
 8013696:	bf00      	nop
 8013698:	08014d4d 	.word	0x08014d4d
 801369c:	08014d6f 	.word	0x08014d6f
 80136a0:	08014da7 	.word	0x08014da7
 80136a4:	08014dcb 	.word	0x08014dcb

080136a8 <_cleanup_r>:
 80136a8:	4901      	ldr	r1, [pc, #4]	; (80136b0 <_cleanup_r+0x8>)
 80136aa:	f000 b885 	b.w	80137b8 <_fwalk_reent>
 80136ae:	bf00      	nop
 80136b0:	080150e5 	.word	0x080150e5

080136b4 <__sfmoreglue>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	1e4a      	subs	r2, r1, #1
 80136b8:	2568      	movs	r5, #104	; 0x68
 80136ba:	4355      	muls	r5, r2
 80136bc:	460e      	mov	r6, r1
 80136be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80136c2:	f001 f847 	bl	8014754 <_malloc_r>
 80136c6:	4604      	mov	r4, r0
 80136c8:	b140      	cbz	r0, 80136dc <__sfmoreglue+0x28>
 80136ca:	2100      	movs	r1, #0
 80136cc:	e9c0 1600 	strd	r1, r6, [r0]
 80136d0:	300c      	adds	r0, #12
 80136d2:	60a0      	str	r0, [r4, #8]
 80136d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80136d8:	f7fd fc1d 	bl	8010f16 <memset>
 80136dc:	4620      	mov	r0, r4
 80136de:	bd70      	pop	{r4, r5, r6, pc}

080136e0 <__sinit>:
 80136e0:	6983      	ldr	r3, [r0, #24]
 80136e2:	b510      	push	{r4, lr}
 80136e4:	4604      	mov	r4, r0
 80136e6:	bb33      	cbnz	r3, 8013736 <__sinit+0x56>
 80136e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80136ec:	6503      	str	r3, [r0, #80]	; 0x50
 80136ee:	4b12      	ldr	r3, [pc, #72]	; (8013738 <__sinit+0x58>)
 80136f0:	4a12      	ldr	r2, [pc, #72]	; (801373c <__sinit+0x5c>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	6282      	str	r2, [r0, #40]	; 0x28
 80136f6:	4298      	cmp	r0, r3
 80136f8:	bf04      	itt	eq
 80136fa:	2301      	moveq	r3, #1
 80136fc:	6183      	streq	r3, [r0, #24]
 80136fe:	f000 f81f 	bl	8013740 <__sfp>
 8013702:	6060      	str	r0, [r4, #4]
 8013704:	4620      	mov	r0, r4
 8013706:	f000 f81b 	bl	8013740 <__sfp>
 801370a:	60a0      	str	r0, [r4, #8]
 801370c:	4620      	mov	r0, r4
 801370e:	f000 f817 	bl	8013740 <__sfp>
 8013712:	2200      	movs	r2, #0
 8013714:	60e0      	str	r0, [r4, #12]
 8013716:	2104      	movs	r1, #4
 8013718:	6860      	ldr	r0, [r4, #4]
 801371a:	f7ff ffa1 	bl	8013660 <std>
 801371e:	2201      	movs	r2, #1
 8013720:	2109      	movs	r1, #9
 8013722:	68a0      	ldr	r0, [r4, #8]
 8013724:	f7ff ff9c 	bl	8013660 <std>
 8013728:	2202      	movs	r2, #2
 801372a:	2112      	movs	r1, #18
 801372c:	68e0      	ldr	r0, [r4, #12]
 801372e:	f7ff ff97 	bl	8013660 <std>
 8013732:	2301      	movs	r3, #1
 8013734:	61a3      	str	r3, [r4, #24]
 8013736:	bd10      	pop	{r4, pc}
 8013738:	08015a18 	.word	0x08015a18
 801373c:	080136a9 	.word	0x080136a9

08013740 <__sfp>:
 8013740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013742:	4b1b      	ldr	r3, [pc, #108]	; (80137b0 <__sfp+0x70>)
 8013744:	681e      	ldr	r6, [r3, #0]
 8013746:	69b3      	ldr	r3, [r6, #24]
 8013748:	4607      	mov	r7, r0
 801374a:	b913      	cbnz	r3, 8013752 <__sfp+0x12>
 801374c:	4630      	mov	r0, r6
 801374e:	f7ff ffc7 	bl	80136e0 <__sinit>
 8013752:	3648      	adds	r6, #72	; 0x48
 8013754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013758:	3b01      	subs	r3, #1
 801375a:	d503      	bpl.n	8013764 <__sfp+0x24>
 801375c:	6833      	ldr	r3, [r6, #0]
 801375e:	b133      	cbz	r3, 801376e <__sfp+0x2e>
 8013760:	6836      	ldr	r6, [r6, #0]
 8013762:	e7f7      	b.n	8013754 <__sfp+0x14>
 8013764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013768:	b16d      	cbz	r5, 8013786 <__sfp+0x46>
 801376a:	3468      	adds	r4, #104	; 0x68
 801376c:	e7f4      	b.n	8013758 <__sfp+0x18>
 801376e:	2104      	movs	r1, #4
 8013770:	4638      	mov	r0, r7
 8013772:	f7ff ff9f 	bl	80136b4 <__sfmoreglue>
 8013776:	6030      	str	r0, [r6, #0]
 8013778:	2800      	cmp	r0, #0
 801377a:	d1f1      	bne.n	8013760 <__sfp+0x20>
 801377c:	230c      	movs	r3, #12
 801377e:	603b      	str	r3, [r7, #0]
 8013780:	4604      	mov	r4, r0
 8013782:	4620      	mov	r0, r4
 8013784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013786:	4b0b      	ldr	r3, [pc, #44]	; (80137b4 <__sfp+0x74>)
 8013788:	6665      	str	r5, [r4, #100]	; 0x64
 801378a:	e9c4 5500 	strd	r5, r5, [r4]
 801378e:	60a5      	str	r5, [r4, #8]
 8013790:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013794:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013798:	2208      	movs	r2, #8
 801379a:	4629      	mov	r1, r5
 801379c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80137a0:	f7fd fbb9 	bl	8010f16 <memset>
 80137a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80137a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80137ac:	e7e9      	b.n	8013782 <__sfp+0x42>
 80137ae:	bf00      	nop
 80137b0:	08015a18 	.word	0x08015a18
 80137b4:	ffff0001 	.word	0xffff0001

080137b8 <_fwalk_reent>:
 80137b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137bc:	4680      	mov	r8, r0
 80137be:	4689      	mov	r9, r1
 80137c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137c4:	2600      	movs	r6, #0
 80137c6:	b914      	cbnz	r4, 80137ce <_fwalk_reent+0x16>
 80137c8:	4630      	mov	r0, r6
 80137ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80137d2:	3f01      	subs	r7, #1
 80137d4:	d501      	bpl.n	80137da <_fwalk_reent+0x22>
 80137d6:	6824      	ldr	r4, [r4, #0]
 80137d8:	e7f5      	b.n	80137c6 <_fwalk_reent+0xe>
 80137da:	89ab      	ldrh	r3, [r5, #12]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d907      	bls.n	80137f0 <_fwalk_reent+0x38>
 80137e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137e4:	3301      	adds	r3, #1
 80137e6:	d003      	beq.n	80137f0 <_fwalk_reent+0x38>
 80137e8:	4629      	mov	r1, r5
 80137ea:	4640      	mov	r0, r8
 80137ec:	47c8      	blx	r9
 80137ee:	4306      	orrs	r6, r0
 80137f0:	3568      	adds	r5, #104	; 0x68
 80137f2:	e7ee      	b.n	80137d2 <_fwalk_reent+0x1a>

080137f4 <rshift>:
 80137f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137f6:	6906      	ldr	r6, [r0, #16]
 80137f8:	114b      	asrs	r3, r1, #5
 80137fa:	429e      	cmp	r6, r3
 80137fc:	f100 0414 	add.w	r4, r0, #20
 8013800:	dd30      	ble.n	8013864 <rshift+0x70>
 8013802:	f011 011f 	ands.w	r1, r1, #31
 8013806:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801380a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801380e:	d108      	bne.n	8013822 <rshift+0x2e>
 8013810:	4621      	mov	r1, r4
 8013812:	42b2      	cmp	r2, r6
 8013814:	460b      	mov	r3, r1
 8013816:	d211      	bcs.n	801383c <rshift+0x48>
 8013818:	f852 3b04 	ldr.w	r3, [r2], #4
 801381c:	f841 3b04 	str.w	r3, [r1], #4
 8013820:	e7f7      	b.n	8013812 <rshift+0x1e>
 8013822:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013826:	f1c1 0c20 	rsb	ip, r1, #32
 801382a:	40cd      	lsrs	r5, r1
 801382c:	3204      	adds	r2, #4
 801382e:	4623      	mov	r3, r4
 8013830:	42b2      	cmp	r2, r6
 8013832:	4617      	mov	r7, r2
 8013834:	d30c      	bcc.n	8013850 <rshift+0x5c>
 8013836:	601d      	str	r5, [r3, #0]
 8013838:	b105      	cbz	r5, 801383c <rshift+0x48>
 801383a:	3304      	adds	r3, #4
 801383c:	1b1a      	subs	r2, r3, r4
 801383e:	42a3      	cmp	r3, r4
 8013840:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013844:	bf08      	it	eq
 8013846:	2300      	moveq	r3, #0
 8013848:	6102      	str	r2, [r0, #16]
 801384a:	bf08      	it	eq
 801384c:	6143      	streq	r3, [r0, #20]
 801384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013850:	683f      	ldr	r7, [r7, #0]
 8013852:	fa07 f70c 	lsl.w	r7, r7, ip
 8013856:	433d      	orrs	r5, r7
 8013858:	f843 5b04 	str.w	r5, [r3], #4
 801385c:	f852 5b04 	ldr.w	r5, [r2], #4
 8013860:	40cd      	lsrs	r5, r1
 8013862:	e7e5      	b.n	8013830 <rshift+0x3c>
 8013864:	4623      	mov	r3, r4
 8013866:	e7e9      	b.n	801383c <rshift+0x48>

08013868 <__hexdig_fun>:
 8013868:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801386c:	2b09      	cmp	r3, #9
 801386e:	d802      	bhi.n	8013876 <__hexdig_fun+0xe>
 8013870:	3820      	subs	r0, #32
 8013872:	b2c0      	uxtb	r0, r0
 8013874:	4770      	bx	lr
 8013876:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801387a:	2b05      	cmp	r3, #5
 801387c:	d801      	bhi.n	8013882 <__hexdig_fun+0x1a>
 801387e:	3847      	subs	r0, #71	; 0x47
 8013880:	e7f7      	b.n	8013872 <__hexdig_fun+0xa>
 8013882:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013886:	2b05      	cmp	r3, #5
 8013888:	d801      	bhi.n	801388e <__hexdig_fun+0x26>
 801388a:	3827      	subs	r0, #39	; 0x27
 801388c:	e7f1      	b.n	8013872 <__hexdig_fun+0xa>
 801388e:	2000      	movs	r0, #0
 8013890:	4770      	bx	lr

08013892 <__gethex>:
 8013892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013896:	b08b      	sub	sp, #44	; 0x2c
 8013898:	468a      	mov	sl, r1
 801389a:	9002      	str	r0, [sp, #8]
 801389c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801389e:	9306      	str	r3, [sp, #24]
 80138a0:	4690      	mov	r8, r2
 80138a2:	f000 fad0 	bl	8013e46 <__localeconv_l>
 80138a6:	6803      	ldr	r3, [r0, #0]
 80138a8:	9303      	str	r3, [sp, #12]
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ec fc90 	bl	80001d0 <strlen>
 80138b0:	9b03      	ldr	r3, [sp, #12]
 80138b2:	9001      	str	r0, [sp, #4]
 80138b4:	4403      	add	r3, r0
 80138b6:	f04f 0b00 	mov.w	fp, #0
 80138ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80138be:	9307      	str	r3, [sp, #28]
 80138c0:	f8da 3000 	ldr.w	r3, [sl]
 80138c4:	3302      	adds	r3, #2
 80138c6:	461f      	mov	r7, r3
 80138c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80138cc:	2830      	cmp	r0, #48	; 0x30
 80138ce:	d06c      	beq.n	80139aa <__gethex+0x118>
 80138d0:	f7ff ffca 	bl	8013868 <__hexdig_fun>
 80138d4:	4604      	mov	r4, r0
 80138d6:	2800      	cmp	r0, #0
 80138d8:	d16a      	bne.n	80139b0 <__gethex+0x11e>
 80138da:	9a01      	ldr	r2, [sp, #4]
 80138dc:	9903      	ldr	r1, [sp, #12]
 80138de:	4638      	mov	r0, r7
 80138e0:	f001 fa77 	bl	8014dd2 <strncmp>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d166      	bne.n	80139b6 <__gethex+0x124>
 80138e8:	9b01      	ldr	r3, [sp, #4]
 80138ea:	5cf8      	ldrb	r0, [r7, r3]
 80138ec:	18fe      	adds	r6, r7, r3
 80138ee:	f7ff ffbb 	bl	8013868 <__hexdig_fun>
 80138f2:	2800      	cmp	r0, #0
 80138f4:	d062      	beq.n	80139bc <__gethex+0x12a>
 80138f6:	4633      	mov	r3, r6
 80138f8:	7818      	ldrb	r0, [r3, #0]
 80138fa:	2830      	cmp	r0, #48	; 0x30
 80138fc:	461f      	mov	r7, r3
 80138fe:	f103 0301 	add.w	r3, r3, #1
 8013902:	d0f9      	beq.n	80138f8 <__gethex+0x66>
 8013904:	f7ff ffb0 	bl	8013868 <__hexdig_fun>
 8013908:	fab0 f580 	clz	r5, r0
 801390c:	096d      	lsrs	r5, r5, #5
 801390e:	4634      	mov	r4, r6
 8013910:	f04f 0b01 	mov.w	fp, #1
 8013914:	463a      	mov	r2, r7
 8013916:	4616      	mov	r6, r2
 8013918:	3201      	adds	r2, #1
 801391a:	7830      	ldrb	r0, [r6, #0]
 801391c:	f7ff ffa4 	bl	8013868 <__hexdig_fun>
 8013920:	2800      	cmp	r0, #0
 8013922:	d1f8      	bne.n	8013916 <__gethex+0x84>
 8013924:	9a01      	ldr	r2, [sp, #4]
 8013926:	9903      	ldr	r1, [sp, #12]
 8013928:	4630      	mov	r0, r6
 801392a:	f001 fa52 	bl	8014dd2 <strncmp>
 801392e:	b950      	cbnz	r0, 8013946 <__gethex+0xb4>
 8013930:	b954      	cbnz	r4, 8013948 <__gethex+0xb6>
 8013932:	9b01      	ldr	r3, [sp, #4]
 8013934:	18f4      	adds	r4, r6, r3
 8013936:	4622      	mov	r2, r4
 8013938:	4616      	mov	r6, r2
 801393a:	3201      	adds	r2, #1
 801393c:	7830      	ldrb	r0, [r6, #0]
 801393e:	f7ff ff93 	bl	8013868 <__hexdig_fun>
 8013942:	2800      	cmp	r0, #0
 8013944:	d1f8      	bne.n	8013938 <__gethex+0xa6>
 8013946:	b10c      	cbz	r4, 801394c <__gethex+0xba>
 8013948:	1ba4      	subs	r4, r4, r6
 801394a:	00a4      	lsls	r4, r4, #2
 801394c:	7833      	ldrb	r3, [r6, #0]
 801394e:	2b50      	cmp	r3, #80	; 0x50
 8013950:	d001      	beq.n	8013956 <__gethex+0xc4>
 8013952:	2b70      	cmp	r3, #112	; 0x70
 8013954:	d140      	bne.n	80139d8 <__gethex+0x146>
 8013956:	7873      	ldrb	r3, [r6, #1]
 8013958:	2b2b      	cmp	r3, #43	; 0x2b
 801395a:	d031      	beq.n	80139c0 <__gethex+0x12e>
 801395c:	2b2d      	cmp	r3, #45	; 0x2d
 801395e:	d033      	beq.n	80139c8 <__gethex+0x136>
 8013960:	1c71      	adds	r1, r6, #1
 8013962:	f04f 0900 	mov.w	r9, #0
 8013966:	7808      	ldrb	r0, [r1, #0]
 8013968:	f7ff ff7e 	bl	8013868 <__hexdig_fun>
 801396c:	1e43      	subs	r3, r0, #1
 801396e:	b2db      	uxtb	r3, r3
 8013970:	2b18      	cmp	r3, #24
 8013972:	d831      	bhi.n	80139d8 <__gethex+0x146>
 8013974:	f1a0 0210 	sub.w	r2, r0, #16
 8013978:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801397c:	f7ff ff74 	bl	8013868 <__hexdig_fun>
 8013980:	1e43      	subs	r3, r0, #1
 8013982:	b2db      	uxtb	r3, r3
 8013984:	2b18      	cmp	r3, #24
 8013986:	d922      	bls.n	80139ce <__gethex+0x13c>
 8013988:	f1b9 0f00 	cmp.w	r9, #0
 801398c:	d000      	beq.n	8013990 <__gethex+0xfe>
 801398e:	4252      	negs	r2, r2
 8013990:	4414      	add	r4, r2
 8013992:	f8ca 1000 	str.w	r1, [sl]
 8013996:	b30d      	cbz	r5, 80139dc <__gethex+0x14a>
 8013998:	f1bb 0f00 	cmp.w	fp, #0
 801399c:	bf0c      	ite	eq
 801399e:	2706      	moveq	r7, #6
 80139a0:	2700      	movne	r7, #0
 80139a2:	4638      	mov	r0, r7
 80139a4:	b00b      	add	sp, #44	; 0x2c
 80139a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139aa:	f10b 0b01 	add.w	fp, fp, #1
 80139ae:	e78a      	b.n	80138c6 <__gethex+0x34>
 80139b0:	2500      	movs	r5, #0
 80139b2:	462c      	mov	r4, r5
 80139b4:	e7ae      	b.n	8013914 <__gethex+0x82>
 80139b6:	463e      	mov	r6, r7
 80139b8:	2501      	movs	r5, #1
 80139ba:	e7c7      	b.n	801394c <__gethex+0xba>
 80139bc:	4604      	mov	r4, r0
 80139be:	e7fb      	b.n	80139b8 <__gethex+0x126>
 80139c0:	f04f 0900 	mov.w	r9, #0
 80139c4:	1cb1      	adds	r1, r6, #2
 80139c6:	e7ce      	b.n	8013966 <__gethex+0xd4>
 80139c8:	f04f 0901 	mov.w	r9, #1
 80139cc:	e7fa      	b.n	80139c4 <__gethex+0x132>
 80139ce:	230a      	movs	r3, #10
 80139d0:	fb03 0202 	mla	r2, r3, r2, r0
 80139d4:	3a10      	subs	r2, #16
 80139d6:	e7cf      	b.n	8013978 <__gethex+0xe6>
 80139d8:	4631      	mov	r1, r6
 80139da:	e7da      	b.n	8013992 <__gethex+0x100>
 80139dc:	1bf3      	subs	r3, r6, r7
 80139de:	3b01      	subs	r3, #1
 80139e0:	4629      	mov	r1, r5
 80139e2:	2b07      	cmp	r3, #7
 80139e4:	dc49      	bgt.n	8013a7a <__gethex+0x1e8>
 80139e6:	9802      	ldr	r0, [sp, #8]
 80139e8:	f000 fa58 	bl	8013e9c <_Balloc>
 80139ec:	9b01      	ldr	r3, [sp, #4]
 80139ee:	f100 0914 	add.w	r9, r0, #20
 80139f2:	f04f 0b00 	mov.w	fp, #0
 80139f6:	f1c3 0301 	rsb	r3, r3, #1
 80139fa:	4605      	mov	r5, r0
 80139fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8013a00:	46da      	mov	sl, fp
 8013a02:	9308      	str	r3, [sp, #32]
 8013a04:	42b7      	cmp	r7, r6
 8013a06:	d33b      	bcc.n	8013a80 <__gethex+0x1ee>
 8013a08:	9804      	ldr	r0, [sp, #16]
 8013a0a:	f840 ab04 	str.w	sl, [r0], #4
 8013a0e:	eba0 0009 	sub.w	r0, r0, r9
 8013a12:	1080      	asrs	r0, r0, #2
 8013a14:	6128      	str	r0, [r5, #16]
 8013a16:	0147      	lsls	r7, r0, #5
 8013a18:	4650      	mov	r0, sl
 8013a1a:	f000 fb03 	bl	8014024 <__hi0bits>
 8013a1e:	f8d8 6000 	ldr.w	r6, [r8]
 8013a22:	1a3f      	subs	r7, r7, r0
 8013a24:	42b7      	cmp	r7, r6
 8013a26:	dd64      	ble.n	8013af2 <__gethex+0x260>
 8013a28:	1bbf      	subs	r7, r7, r6
 8013a2a:	4639      	mov	r1, r7
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	f000 fe13 	bl	8014658 <__any_on>
 8013a32:	4682      	mov	sl, r0
 8013a34:	b178      	cbz	r0, 8013a56 <__gethex+0x1c4>
 8013a36:	1e7b      	subs	r3, r7, #1
 8013a38:	1159      	asrs	r1, r3, #5
 8013a3a:	f003 021f 	and.w	r2, r3, #31
 8013a3e:	f04f 0a01 	mov.w	sl, #1
 8013a42:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013a46:	fa0a f202 	lsl.w	r2, sl, r2
 8013a4a:	420a      	tst	r2, r1
 8013a4c:	d003      	beq.n	8013a56 <__gethex+0x1c4>
 8013a4e:	4553      	cmp	r3, sl
 8013a50:	dc46      	bgt.n	8013ae0 <__gethex+0x24e>
 8013a52:	f04f 0a02 	mov.w	sl, #2
 8013a56:	4639      	mov	r1, r7
 8013a58:	4628      	mov	r0, r5
 8013a5a:	f7ff fecb 	bl	80137f4 <rshift>
 8013a5e:	443c      	add	r4, r7
 8013a60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013a64:	42a3      	cmp	r3, r4
 8013a66:	da52      	bge.n	8013b0e <__gethex+0x27c>
 8013a68:	4629      	mov	r1, r5
 8013a6a:	9802      	ldr	r0, [sp, #8]
 8013a6c:	f000 fa4a 	bl	8013f04 <_Bfree>
 8013a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013a72:	2300      	movs	r3, #0
 8013a74:	6013      	str	r3, [r2, #0]
 8013a76:	27a3      	movs	r7, #163	; 0xa3
 8013a78:	e793      	b.n	80139a2 <__gethex+0x110>
 8013a7a:	3101      	adds	r1, #1
 8013a7c:	105b      	asrs	r3, r3, #1
 8013a7e:	e7b0      	b.n	80139e2 <__gethex+0x150>
 8013a80:	1e73      	subs	r3, r6, #1
 8013a82:	9305      	str	r3, [sp, #20]
 8013a84:	9a07      	ldr	r2, [sp, #28]
 8013a86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	d018      	beq.n	8013ac0 <__gethex+0x22e>
 8013a8e:	f1bb 0f20 	cmp.w	fp, #32
 8013a92:	d107      	bne.n	8013aa4 <__gethex+0x212>
 8013a94:	9b04      	ldr	r3, [sp, #16]
 8013a96:	f8c3 a000 	str.w	sl, [r3]
 8013a9a:	3304      	adds	r3, #4
 8013a9c:	f04f 0a00 	mov.w	sl, #0
 8013aa0:	9304      	str	r3, [sp, #16]
 8013aa2:	46d3      	mov	fp, sl
 8013aa4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013aa8:	f7ff fede 	bl	8013868 <__hexdig_fun>
 8013aac:	f000 000f 	and.w	r0, r0, #15
 8013ab0:	fa00 f00b 	lsl.w	r0, r0, fp
 8013ab4:	ea4a 0a00 	orr.w	sl, sl, r0
 8013ab8:	f10b 0b04 	add.w	fp, fp, #4
 8013abc:	9b05      	ldr	r3, [sp, #20]
 8013abe:	e00d      	b.n	8013adc <__gethex+0x24a>
 8013ac0:	9b05      	ldr	r3, [sp, #20]
 8013ac2:	9a08      	ldr	r2, [sp, #32]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	42bb      	cmp	r3, r7
 8013ac8:	d3e1      	bcc.n	8013a8e <__gethex+0x1fc>
 8013aca:	4618      	mov	r0, r3
 8013acc:	9a01      	ldr	r2, [sp, #4]
 8013ace:	9903      	ldr	r1, [sp, #12]
 8013ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ad2:	f001 f97e 	bl	8014dd2 <strncmp>
 8013ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d1d8      	bne.n	8013a8e <__gethex+0x1fc>
 8013adc:	461e      	mov	r6, r3
 8013ade:	e791      	b.n	8013a04 <__gethex+0x172>
 8013ae0:	1eb9      	subs	r1, r7, #2
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	f000 fdb8 	bl	8014658 <__any_on>
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	d0b2      	beq.n	8013a52 <__gethex+0x1c0>
 8013aec:	f04f 0a03 	mov.w	sl, #3
 8013af0:	e7b1      	b.n	8013a56 <__gethex+0x1c4>
 8013af2:	da09      	bge.n	8013b08 <__gethex+0x276>
 8013af4:	1bf7      	subs	r7, r6, r7
 8013af6:	4629      	mov	r1, r5
 8013af8:	463a      	mov	r2, r7
 8013afa:	9802      	ldr	r0, [sp, #8]
 8013afc:	f000 fbce 	bl	801429c <__lshift>
 8013b00:	1be4      	subs	r4, r4, r7
 8013b02:	4605      	mov	r5, r0
 8013b04:	f100 0914 	add.w	r9, r0, #20
 8013b08:	f04f 0a00 	mov.w	sl, #0
 8013b0c:	e7a8      	b.n	8013a60 <__gethex+0x1ce>
 8013b0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013b12:	42a0      	cmp	r0, r4
 8013b14:	dd6a      	ble.n	8013bec <__gethex+0x35a>
 8013b16:	1b04      	subs	r4, r0, r4
 8013b18:	42a6      	cmp	r6, r4
 8013b1a:	dc2e      	bgt.n	8013b7a <__gethex+0x2e8>
 8013b1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d022      	beq.n	8013b6a <__gethex+0x2d8>
 8013b24:	2b03      	cmp	r3, #3
 8013b26:	d024      	beq.n	8013b72 <__gethex+0x2e0>
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d115      	bne.n	8013b58 <__gethex+0x2c6>
 8013b2c:	42a6      	cmp	r6, r4
 8013b2e:	d113      	bne.n	8013b58 <__gethex+0x2c6>
 8013b30:	2e01      	cmp	r6, #1
 8013b32:	dc0b      	bgt.n	8013b4c <__gethex+0x2ba>
 8013b34:	9a06      	ldr	r2, [sp, #24]
 8013b36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b3a:	6013      	str	r3, [r2, #0]
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	612b      	str	r3, [r5, #16]
 8013b40:	f8c9 3000 	str.w	r3, [r9]
 8013b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b46:	2762      	movs	r7, #98	; 0x62
 8013b48:	601d      	str	r5, [r3, #0]
 8013b4a:	e72a      	b.n	80139a2 <__gethex+0x110>
 8013b4c:	1e71      	subs	r1, r6, #1
 8013b4e:	4628      	mov	r0, r5
 8013b50:	f000 fd82 	bl	8014658 <__any_on>
 8013b54:	2800      	cmp	r0, #0
 8013b56:	d1ed      	bne.n	8013b34 <__gethex+0x2a2>
 8013b58:	4629      	mov	r1, r5
 8013b5a:	9802      	ldr	r0, [sp, #8]
 8013b5c:	f000 f9d2 	bl	8013f04 <_Bfree>
 8013b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013b62:	2300      	movs	r3, #0
 8013b64:	6013      	str	r3, [r2, #0]
 8013b66:	2750      	movs	r7, #80	; 0x50
 8013b68:	e71b      	b.n	80139a2 <__gethex+0x110>
 8013b6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d0e1      	beq.n	8013b34 <__gethex+0x2a2>
 8013b70:	e7f2      	b.n	8013b58 <__gethex+0x2c6>
 8013b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1dd      	bne.n	8013b34 <__gethex+0x2a2>
 8013b78:	e7ee      	b.n	8013b58 <__gethex+0x2c6>
 8013b7a:	1e67      	subs	r7, r4, #1
 8013b7c:	f1ba 0f00 	cmp.w	sl, #0
 8013b80:	d131      	bne.n	8013be6 <__gethex+0x354>
 8013b82:	b127      	cbz	r7, 8013b8e <__gethex+0x2fc>
 8013b84:	4639      	mov	r1, r7
 8013b86:	4628      	mov	r0, r5
 8013b88:	f000 fd66 	bl	8014658 <__any_on>
 8013b8c:	4682      	mov	sl, r0
 8013b8e:	117a      	asrs	r2, r7, #5
 8013b90:	2301      	movs	r3, #1
 8013b92:	f007 071f 	and.w	r7, r7, #31
 8013b96:	fa03 f707 	lsl.w	r7, r3, r7
 8013b9a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013b9e:	4621      	mov	r1, r4
 8013ba0:	421f      	tst	r7, r3
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	bf18      	it	ne
 8013ba6:	f04a 0a02 	orrne.w	sl, sl, #2
 8013baa:	1b36      	subs	r6, r6, r4
 8013bac:	f7ff fe22 	bl	80137f4 <rshift>
 8013bb0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013bb4:	2702      	movs	r7, #2
 8013bb6:	f1ba 0f00 	cmp.w	sl, #0
 8013bba:	d048      	beq.n	8013c4e <__gethex+0x3bc>
 8013bbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	d015      	beq.n	8013bf0 <__gethex+0x35e>
 8013bc4:	2b03      	cmp	r3, #3
 8013bc6:	d017      	beq.n	8013bf8 <__gethex+0x366>
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d109      	bne.n	8013be0 <__gethex+0x34e>
 8013bcc:	f01a 0f02 	tst.w	sl, #2
 8013bd0:	d006      	beq.n	8013be0 <__gethex+0x34e>
 8013bd2:	f8d9 3000 	ldr.w	r3, [r9]
 8013bd6:	ea4a 0a03 	orr.w	sl, sl, r3
 8013bda:	f01a 0f01 	tst.w	sl, #1
 8013bde:	d10e      	bne.n	8013bfe <__gethex+0x36c>
 8013be0:	f047 0710 	orr.w	r7, r7, #16
 8013be4:	e033      	b.n	8013c4e <__gethex+0x3bc>
 8013be6:	f04f 0a01 	mov.w	sl, #1
 8013bea:	e7d0      	b.n	8013b8e <__gethex+0x2fc>
 8013bec:	2701      	movs	r7, #1
 8013bee:	e7e2      	b.n	8013bb6 <__gethex+0x324>
 8013bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bf2:	f1c3 0301 	rsb	r3, r3, #1
 8013bf6:	9315      	str	r3, [sp, #84]	; 0x54
 8013bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d0f0      	beq.n	8013be0 <__gethex+0x34e>
 8013bfe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013c02:	f105 0314 	add.w	r3, r5, #20
 8013c06:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013c0a:	eb03 010a 	add.w	r1, r3, sl
 8013c0e:	f04f 0c00 	mov.w	ip, #0
 8013c12:	4618      	mov	r0, r3
 8013c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013c1c:	d01c      	beq.n	8013c58 <__gethex+0x3c6>
 8013c1e:	3201      	adds	r2, #1
 8013c20:	6002      	str	r2, [r0, #0]
 8013c22:	2f02      	cmp	r7, #2
 8013c24:	f105 0314 	add.w	r3, r5, #20
 8013c28:	d138      	bne.n	8013c9c <__gethex+0x40a>
 8013c2a:	f8d8 2000 	ldr.w	r2, [r8]
 8013c2e:	3a01      	subs	r2, #1
 8013c30:	42b2      	cmp	r2, r6
 8013c32:	d10a      	bne.n	8013c4a <__gethex+0x3b8>
 8013c34:	1171      	asrs	r1, r6, #5
 8013c36:	2201      	movs	r2, #1
 8013c38:	f006 061f 	and.w	r6, r6, #31
 8013c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c40:	fa02 f606 	lsl.w	r6, r2, r6
 8013c44:	421e      	tst	r6, r3
 8013c46:	bf18      	it	ne
 8013c48:	4617      	movne	r7, r2
 8013c4a:	f047 0720 	orr.w	r7, r7, #32
 8013c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c50:	601d      	str	r5, [r3, #0]
 8013c52:	9b06      	ldr	r3, [sp, #24]
 8013c54:	601c      	str	r4, [r3, #0]
 8013c56:	e6a4      	b.n	80139a2 <__gethex+0x110>
 8013c58:	4299      	cmp	r1, r3
 8013c5a:	f843 cc04 	str.w	ip, [r3, #-4]
 8013c5e:	d8d8      	bhi.n	8013c12 <__gethex+0x380>
 8013c60:	68ab      	ldr	r3, [r5, #8]
 8013c62:	4599      	cmp	r9, r3
 8013c64:	db12      	blt.n	8013c8c <__gethex+0x3fa>
 8013c66:	6869      	ldr	r1, [r5, #4]
 8013c68:	9802      	ldr	r0, [sp, #8]
 8013c6a:	3101      	adds	r1, #1
 8013c6c:	f000 f916 	bl	8013e9c <_Balloc>
 8013c70:	692a      	ldr	r2, [r5, #16]
 8013c72:	3202      	adds	r2, #2
 8013c74:	f105 010c 	add.w	r1, r5, #12
 8013c78:	4683      	mov	fp, r0
 8013c7a:	0092      	lsls	r2, r2, #2
 8013c7c:	300c      	adds	r0, #12
 8013c7e:	f7fd f93f 	bl	8010f00 <memcpy>
 8013c82:	4629      	mov	r1, r5
 8013c84:	9802      	ldr	r0, [sp, #8]
 8013c86:	f000 f93d 	bl	8013f04 <_Bfree>
 8013c8a:	465d      	mov	r5, fp
 8013c8c:	692b      	ldr	r3, [r5, #16]
 8013c8e:	1c5a      	adds	r2, r3, #1
 8013c90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013c94:	612a      	str	r2, [r5, #16]
 8013c96:	2201      	movs	r2, #1
 8013c98:	615a      	str	r2, [r3, #20]
 8013c9a:	e7c2      	b.n	8013c22 <__gethex+0x390>
 8013c9c:	692a      	ldr	r2, [r5, #16]
 8013c9e:	454a      	cmp	r2, r9
 8013ca0:	dd0b      	ble.n	8013cba <__gethex+0x428>
 8013ca2:	2101      	movs	r1, #1
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	f7ff fda5 	bl	80137f4 <rshift>
 8013caa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013cae:	3401      	adds	r4, #1
 8013cb0:	42a3      	cmp	r3, r4
 8013cb2:	f6ff aed9 	blt.w	8013a68 <__gethex+0x1d6>
 8013cb6:	2701      	movs	r7, #1
 8013cb8:	e7c7      	b.n	8013c4a <__gethex+0x3b8>
 8013cba:	f016 061f 	ands.w	r6, r6, #31
 8013cbe:	d0fa      	beq.n	8013cb6 <__gethex+0x424>
 8013cc0:	449a      	add	sl, r3
 8013cc2:	f1c6 0620 	rsb	r6, r6, #32
 8013cc6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013cca:	f000 f9ab 	bl	8014024 <__hi0bits>
 8013cce:	42b0      	cmp	r0, r6
 8013cd0:	dbe7      	blt.n	8013ca2 <__gethex+0x410>
 8013cd2:	e7f0      	b.n	8013cb6 <__gethex+0x424>

08013cd4 <L_shift>:
 8013cd4:	f1c2 0208 	rsb	r2, r2, #8
 8013cd8:	0092      	lsls	r2, r2, #2
 8013cda:	b570      	push	{r4, r5, r6, lr}
 8013cdc:	f1c2 0620 	rsb	r6, r2, #32
 8013ce0:	6843      	ldr	r3, [r0, #4]
 8013ce2:	6804      	ldr	r4, [r0, #0]
 8013ce4:	fa03 f506 	lsl.w	r5, r3, r6
 8013ce8:	432c      	orrs	r4, r5
 8013cea:	40d3      	lsrs	r3, r2
 8013cec:	6004      	str	r4, [r0, #0]
 8013cee:	f840 3f04 	str.w	r3, [r0, #4]!
 8013cf2:	4288      	cmp	r0, r1
 8013cf4:	d3f4      	bcc.n	8013ce0 <L_shift+0xc>
 8013cf6:	bd70      	pop	{r4, r5, r6, pc}

08013cf8 <__match>:
 8013cf8:	b530      	push	{r4, r5, lr}
 8013cfa:	6803      	ldr	r3, [r0, #0]
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d02:	b914      	cbnz	r4, 8013d0a <__match+0x12>
 8013d04:	6003      	str	r3, [r0, #0]
 8013d06:	2001      	movs	r0, #1
 8013d08:	bd30      	pop	{r4, r5, pc}
 8013d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013d12:	2d19      	cmp	r5, #25
 8013d14:	bf98      	it	ls
 8013d16:	3220      	addls	r2, #32
 8013d18:	42a2      	cmp	r2, r4
 8013d1a:	d0f0      	beq.n	8013cfe <__match+0x6>
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	e7f3      	b.n	8013d08 <__match+0x10>

08013d20 <__hexnan>:
 8013d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d24:	680b      	ldr	r3, [r1, #0]
 8013d26:	6801      	ldr	r1, [r0, #0]
 8013d28:	115f      	asrs	r7, r3, #5
 8013d2a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013d2e:	f013 031f 	ands.w	r3, r3, #31
 8013d32:	b087      	sub	sp, #28
 8013d34:	bf18      	it	ne
 8013d36:	3704      	addne	r7, #4
 8013d38:	2500      	movs	r5, #0
 8013d3a:	1f3e      	subs	r6, r7, #4
 8013d3c:	4682      	mov	sl, r0
 8013d3e:	4690      	mov	r8, r2
 8013d40:	9301      	str	r3, [sp, #4]
 8013d42:	f847 5c04 	str.w	r5, [r7, #-4]
 8013d46:	46b1      	mov	r9, r6
 8013d48:	4634      	mov	r4, r6
 8013d4a:	9502      	str	r5, [sp, #8]
 8013d4c:	46ab      	mov	fp, r5
 8013d4e:	784a      	ldrb	r2, [r1, #1]
 8013d50:	1c4b      	adds	r3, r1, #1
 8013d52:	9303      	str	r3, [sp, #12]
 8013d54:	b342      	cbz	r2, 8013da8 <__hexnan+0x88>
 8013d56:	4610      	mov	r0, r2
 8013d58:	9105      	str	r1, [sp, #20]
 8013d5a:	9204      	str	r2, [sp, #16]
 8013d5c:	f7ff fd84 	bl	8013868 <__hexdig_fun>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	d143      	bne.n	8013dec <__hexnan+0xcc>
 8013d64:	9a04      	ldr	r2, [sp, #16]
 8013d66:	9905      	ldr	r1, [sp, #20]
 8013d68:	2a20      	cmp	r2, #32
 8013d6a:	d818      	bhi.n	8013d9e <__hexnan+0x7e>
 8013d6c:	9b02      	ldr	r3, [sp, #8]
 8013d6e:	459b      	cmp	fp, r3
 8013d70:	dd13      	ble.n	8013d9a <__hexnan+0x7a>
 8013d72:	454c      	cmp	r4, r9
 8013d74:	d206      	bcs.n	8013d84 <__hexnan+0x64>
 8013d76:	2d07      	cmp	r5, #7
 8013d78:	dc04      	bgt.n	8013d84 <__hexnan+0x64>
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	4649      	mov	r1, r9
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f7ff ffa8 	bl	8013cd4 <L_shift>
 8013d84:	4544      	cmp	r4, r8
 8013d86:	d944      	bls.n	8013e12 <__hexnan+0xf2>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	f1a4 0904 	sub.w	r9, r4, #4
 8013d8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013d92:	f8cd b008 	str.w	fp, [sp, #8]
 8013d96:	464c      	mov	r4, r9
 8013d98:	461d      	mov	r5, r3
 8013d9a:	9903      	ldr	r1, [sp, #12]
 8013d9c:	e7d7      	b.n	8013d4e <__hexnan+0x2e>
 8013d9e:	2a29      	cmp	r2, #41	; 0x29
 8013da0:	d14a      	bne.n	8013e38 <__hexnan+0x118>
 8013da2:	3102      	adds	r1, #2
 8013da4:	f8ca 1000 	str.w	r1, [sl]
 8013da8:	f1bb 0f00 	cmp.w	fp, #0
 8013dac:	d044      	beq.n	8013e38 <__hexnan+0x118>
 8013dae:	454c      	cmp	r4, r9
 8013db0:	d206      	bcs.n	8013dc0 <__hexnan+0xa0>
 8013db2:	2d07      	cmp	r5, #7
 8013db4:	dc04      	bgt.n	8013dc0 <__hexnan+0xa0>
 8013db6:	462a      	mov	r2, r5
 8013db8:	4649      	mov	r1, r9
 8013dba:	4620      	mov	r0, r4
 8013dbc:	f7ff ff8a 	bl	8013cd4 <L_shift>
 8013dc0:	4544      	cmp	r4, r8
 8013dc2:	d928      	bls.n	8013e16 <__hexnan+0xf6>
 8013dc4:	4643      	mov	r3, r8
 8013dc6:	f854 2b04 	ldr.w	r2, [r4], #4
 8013dca:	f843 2b04 	str.w	r2, [r3], #4
 8013dce:	42a6      	cmp	r6, r4
 8013dd0:	d2f9      	bcs.n	8013dc6 <__hexnan+0xa6>
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f843 2b04 	str.w	r2, [r3], #4
 8013dd8:	429e      	cmp	r6, r3
 8013dda:	d2fb      	bcs.n	8013dd4 <__hexnan+0xb4>
 8013ddc:	6833      	ldr	r3, [r6, #0]
 8013dde:	b91b      	cbnz	r3, 8013de8 <__hexnan+0xc8>
 8013de0:	4546      	cmp	r6, r8
 8013de2:	d127      	bne.n	8013e34 <__hexnan+0x114>
 8013de4:	2301      	movs	r3, #1
 8013de6:	6033      	str	r3, [r6, #0]
 8013de8:	2005      	movs	r0, #5
 8013dea:	e026      	b.n	8013e3a <__hexnan+0x11a>
 8013dec:	3501      	adds	r5, #1
 8013dee:	2d08      	cmp	r5, #8
 8013df0:	f10b 0b01 	add.w	fp, fp, #1
 8013df4:	dd06      	ble.n	8013e04 <__hexnan+0xe4>
 8013df6:	4544      	cmp	r4, r8
 8013df8:	d9cf      	bls.n	8013d9a <__hexnan+0x7a>
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e00:	2501      	movs	r5, #1
 8013e02:	3c04      	subs	r4, #4
 8013e04:	6822      	ldr	r2, [r4, #0]
 8013e06:	f000 000f 	and.w	r0, r0, #15
 8013e0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013e0e:	6020      	str	r0, [r4, #0]
 8013e10:	e7c3      	b.n	8013d9a <__hexnan+0x7a>
 8013e12:	2508      	movs	r5, #8
 8013e14:	e7c1      	b.n	8013d9a <__hexnan+0x7a>
 8013e16:	9b01      	ldr	r3, [sp, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d0df      	beq.n	8013ddc <__hexnan+0xbc>
 8013e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e20:	f1c3 0320 	rsb	r3, r3, #32
 8013e24:	fa22 f303 	lsr.w	r3, r2, r3
 8013e28:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013e2c:	401a      	ands	r2, r3
 8013e2e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013e32:	e7d3      	b.n	8013ddc <__hexnan+0xbc>
 8013e34:	3e04      	subs	r6, #4
 8013e36:	e7d1      	b.n	8013ddc <__hexnan+0xbc>
 8013e38:	2004      	movs	r0, #4
 8013e3a:	b007      	add	sp, #28
 8013e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e40 <__locale_ctype_ptr_l>:
 8013e40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013e44:	4770      	bx	lr

08013e46 <__localeconv_l>:
 8013e46:	30f0      	adds	r0, #240	; 0xf0
 8013e48:	4770      	bx	lr
	...

08013e4c <_localeconv_r>:
 8013e4c:	4b04      	ldr	r3, [pc, #16]	; (8013e60 <_localeconv_r+0x14>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	6a18      	ldr	r0, [r3, #32]
 8013e52:	4b04      	ldr	r3, [pc, #16]	; (8013e64 <_localeconv_r+0x18>)
 8013e54:	2800      	cmp	r0, #0
 8013e56:	bf08      	it	eq
 8013e58:	4618      	moveq	r0, r3
 8013e5a:	30f0      	adds	r0, #240	; 0xf0
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	20000010 	.word	0x20000010
 8013e64:	20000074 	.word	0x20000074

08013e68 <malloc>:
 8013e68:	4b02      	ldr	r3, [pc, #8]	; (8013e74 <malloc+0xc>)
 8013e6a:	4601      	mov	r1, r0
 8013e6c:	6818      	ldr	r0, [r3, #0]
 8013e6e:	f000 bc71 	b.w	8014754 <_malloc_r>
 8013e72:	bf00      	nop
 8013e74:	20000010 	.word	0x20000010

08013e78 <__ascii_mbtowc>:
 8013e78:	b082      	sub	sp, #8
 8013e7a:	b901      	cbnz	r1, 8013e7e <__ascii_mbtowc+0x6>
 8013e7c:	a901      	add	r1, sp, #4
 8013e7e:	b142      	cbz	r2, 8013e92 <__ascii_mbtowc+0x1a>
 8013e80:	b14b      	cbz	r3, 8013e96 <__ascii_mbtowc+0x1e>
 8013e82:	7813      	ldrb	r3, [r2, #0]
 8013e84:	600b      	str	r3, [r1, #0]
 8013e86:	7812      	ldrb	r2, [r2, #0]
 8013e88:	1c10      	adds	r0, r2, #0
 8013e8a:	bf18      	it	ne
 8013e8c:	2001      	movne	r0, #1
 8013e8e:	b002      	add	sp, #8
 8013e90:	4770      	bx	lr
 8013e92:	4610      	mov	r0, r2
 8013e94:	e7fb      	b.n	8013e8e <__ascii_mbtowc+0x16>
 8013e96:	f06f 0001 	mvn.w	r0, #1
 8013e9a:	e7f8      	b.n	8013e8e <__ascii_mbtowc+0x16>

08013e9c <_Balloc>:
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	460e      	mov	r6, r1
 8013ea4:	b93d      	cbnz	r5, 8013eb6 <_Balloc+0x1a>
 8013ea6:	2010      	movs	r0, #16
 8013ea8:	f7ff ffde 	bl	8013e68 <malloc>
 8013eac:	6260      	str	r0, [r4, #36]	; 0x24
 8013eae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013eb2:	6005      	str	r5, [r0, #0]
 8013eb4:	60c5      	str	r5, [r0, #12]
 8013eb6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013eb8:	68eb      	ldr	r3, [r5, #12]
 8013eba:	b183      	cbz	r3, 8013ede <_Balloc+0x42>
 8013ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013ec4:	b9b8      	cbnz	r0, 8013ef6 <_Balloc+0x5a>
 8013ec6:	2101      	movs	r1, #1
 8013ec8:	fa01 f506 	lsl.w	r5, r1, r6
 8013ecc:	1d6a      	adds	r2, r5, #5
 8013ece:	0092      	lsls	r2, r2, #2
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f000 fbe2 	bl	801469a <_calloc_r>
 8013ed6:	b160      	cbz	r0, 8013ef2 <_Balloc+0x56>
 8013ed8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013edc:	e00e      	b.n	8013efc <_Balloc+0x60>
 8013ede:	2221      	movs	r2, #33	; 0x21
 8013ee0:	2104      	movs	r1, #4
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	f000 fbd9 	bl	801469a <_calloc_r>
 8013ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013eea:	60e8      	str	r0, [r5, #12]
 8013eec:	68db      	ldr	r3, [r3, #12]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d1e4      	bne.n	8013ebc <_Balloc+0x20>
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	bd70      	pop	{r4, r5, r6, pc}
 8013ef6:	6802      	ldr	r2, [r0, #0]
 8013ef8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013efc:	2300      	movs	r3, #0
 8013efe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013f02:	e7f7      	b.n	8013ef4 <_Balloc+0x58>

08013f04 <_Bfree>:
 8013f04:	b570      	push	{r4, r5, r6, lr}
 8013f06:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013f08:	4606      	mov	r6, r0
 8013f0a:	460d      	mov	r5, r1
 8013f0c:	b93c      	cbnz	r4, 8013f1e <_Bfree+0x1a>
 8013f0e:	2010      	movs	r0, #16
 8013f10:	f7ff ffaa 	bl	8013e68 <malloc>
 8013f14:	6270      	str	r0, [r6, #36]	; 0x24
 8013f16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f1a:	6004      	str	r4, [r0, #0]
 8013f1c:	60c4      	str	r4, [r0, #12]
 8013f1e:	b13d      	cbz	r5, 8013f30 <_Bfree+0x2c>
 8013f20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013f22:	686a      	ldr	r2, [r5, #4]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013f2a:	6029      	str	r1, [r5, #0]
 8013f2c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013f30:	bd70      	pop	{r4, r5, r6, pc}

08013f32 <__multadd>:
 8013f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f36:	690d      	ldr	r5, [r1, #16]
 8013f38:	461f      	mov	r7, r3
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	460c      	mov	r4, r1
 8013f3e:	f101 0c14 	add.w	ip, r1, #20
 8013f42:	2300      	movs	r3, #0
 8013f44:	f8dc 0000 	ldr.w	r0, [ip]
 8013f48:	b281      	uxth	r1, r0
 8013f4a:	fb02 7101 	mla	r1, r2, r1, r7
 8013f4e:	0c0f      	lsrs	r7, r1, #16
 8013f50:	0c00      	lsrs	r0, r0, #16
 8013f52:	fb02 7000 	mla	r0, r2, r0, r7
 8013f56:	b289      	uxth	r1, r1
 8013f58:	3301      	adds	r3, #1
 8013f5a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013f5e:	429d      	cmp	r5, r3
 8013f60:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013f64:	f84c 1b04 	str.w	r1, [ip], #4
 8013f68:	dcec      	bgt.n	8013f44 <__multadd+0x12>
 8013f6a:	b1d7      	cbz	r7, 8013fa2 <__multadd+0x70>
 8013f6c:	68a3      	ldr	r3, [r4, #8]
 8013f6e:	42ab      	cmp	r3, r5
 8013f70:	dc12      	bgt.n	8013f98 <__multadd+0x66>
 8013f72:	6861      	ldr	r1, [r4, #4]
 8013f74:	4630      	mov	r0, r6
 8013f76:	3101      	adds	r1, #1
 8013f78:	f7ff ff90 	bl	8013e9c <_Balloc>
 8013f7c:	6922      	ldr	r2, [r4, #16]
 8013f7e:	3202      	adds	r2, #2
 8013f80:	f104 010c 	add.w	r1, r4, #12
 8013f84:	4680      	mov	r8, r0
 8013f86:	0092      	lsls	r2, r2, #2
 8013f88:	300c      	adds	r0, #12
 8013f8a:	f7fc ffb9 	bl	8010f00 <memcpy>
 8013f8e:	4621      	mov	r1, r4
 8013f90:	4630      	mov	r0, r6
 8013f92:	f7ff ffb7 	bl	8013f04 <_Bfree>
 8013f96:	4644      	mov	r4, r8
 8013f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013f9c:	3501      	adds	r5, #1
 8013f9e:	615f      	str	r7, [r3, #20]
 8013fa0:	6125      	str	r5, [r4, #16]
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013fa8 <__s2b>:
 8013fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fac:	460c      	mov	r4, r1
 8013fae:	4615      	mov	r5, r2
 8013fb0:	461f      	mov	r7, r3
 8013fb2:	2209      	movs	r2, #9
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	4606      	mov	r6, r0
 8013fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	db20      	blt.n	8014006 <__s2b+0x5e>
 8013fc4:	4630      	mov	r0, r6
 8013fc6:	f7ff ff69 	bl	8013e9c <_Balloc>
 8013fca:	9b08      	ldr	r3, [sp, #32]
 8013fcc:	6143      	str	r3, [r0, #20]
 8013fce:	2d09      	cmp	r5, #9
 8013fd0:	f04f 0301 	mov.w	r3, #1
 8013fd4:	6103      	str	r3, [r0, #16]
 8013fd6:	dd19      	ble.n	801400c <__s2b+0x64>
 8013fd8:	f104 0809 	add.w	r8, r4, #9
 8013fdc:	46c1      	mov	r9, r8
 8013fde:	442c      	add	r4, r5
 8013fe0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013fe4:	4601      	mov	r1, r0
 8013fe6:	3b30      	subs	r3, #48	; 0x30
 8013fe8:	220a      	movs	r2, #10
 8013fea:	4630      	mov	r0, r6
 8013fec:	f7ff ffa1 	bl	8013f32 <__multadd>
 8013ff0:	45a1      	cmp	r9, r4
 8013ff2:	d1f5      	bne.n	8013fe0 <__s2b+0x38>
 8013ff4:	eb08 0405 	add.w	r4, r8, r5
 8013ff8:	3c08      	subs	r4, #8
 8013ffa:	1b2d      	subs	r5, r5, r4
 8013ffc:	1963      	adds	r3, r4, r5
 8013ffe:	42bb      	cmp	r3, r7
 8014000:	db07      	blt.n	8014012 <__s2b+0x6a>
 8014002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014006:	0052      	lsls	r2, r2, #1
 8014008:	3101      	adds	r1, #1
 801400a:	e7d9      	b.n	8013fc0 <__s2b+0x18>
 801400c:	340a      	adds	r4, #10
 801400e:	2509      	movs	r5, #9
 8014010:	e7f3      	b.n	8013ffa <__s2b+0x52>
 8014012:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014016:	4601      	mov	r1, r0
 8014018:	3b30      	subs	r3, #48	; 0x30
 801401a:	220a      	movs	r2, #10
 801401c:	4630      	mov	r0, r6
 801401e:	f7ff ff88 	bl	8013f32 <__multadd>
 8014022:	e7eb      	b.n	8013ffc <__s2b+0x54>

08014024 <__hi0bits>:
 8014024:	0c02      	lsrs	r2, r0, #16
 8014026:	0412      	lsls	r2, r2, #16
 8014028:	4603      	mov	r3, r0
 801402a:	b9b2      	cbnz	r2, 801405a <__hi0bits+0x36>
 801402c:	0403      	lsls	r3, r0, #16
 801402e:	2010      	movs	r0, #16
 8014030:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014034:	bf04      	itt	eq
 8014036:	021b      	lsleq	r3, r3, #8
 8014038:	3008      	addeq	r0, #8
 801403a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801403e:	bf04      	itt	eq
 8014040:	011b      	lsleq	r3, r3, #4
 8014042:	3004      	addeq	r0, #4
 8014044:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014048:	bf04      	itt	eq
 801404a:	009b      	lsleq	r3, r3, #2
 801404c:	3002      	addeq	r0, #2
 801404e:	2b00      	cmp	r3, #0
 8014050:	db06      	blt.n	8014060 <__hi0bits+0x3c>
 8014052:	005b      	lsls	r3, r3, #1
 8014054:	d503      	bpl.n	801405e <__hi0bits+0x3a>
 8014056:	3001      	adds	r0, #1
 8014058:	4770      	bx	lr
 801405a:	2000      	movs	r0, #0
 801405c:	e7e8      	b.n	8014030 <__hi0bits+0xc>
 801405e:	2020      	movs	r0, #32
 8014060:	4770      	bx	lr

08014062 <__lo0bits>:
 8014062:	6803      	ldr	r3, [r0, #0]
 8014064:	f013 0207 	ands.w	r2, r3, #7
 8014068:	4601      	mov	r1, r0
 801406a:	d00b      	beq.n	8014084 <__lo0bits+0x22>
 801406c:	07da      	lsls	r2, r3, #31
 801406e:	d423      	bmi.n	80140b8 <__lo0bits+0x56>
 8014070:	0798      	lsls	r0, r3, #30
 8014072:	bf49      	itett	mi
 8014074:	085b      	lsrmi	r3, r3, #1
 8014076:	089b      	lsrpl	r3, r3, #2
 8014078:	2001      	movmi	r0, #1
 801407a:	600b      	strmi	r3, [r1, #0]
 801407c:	bf5c      	itt	pl
 801407e:	600b      	strpl	r3, [r1, #0]
 8014080:	2002      	movpl	r0, #2
 8014082:	4770      	bx	lr
 8014084:	b298      	uxth	r0, r3
 8014086:	b9a8      	cbnz	r0, 80140b4 <__lo0bits+0x52>
 8014088:	0c1b      	lsrs	r3, r3, #16
 801408a:	2010      	movs	r0, #16
 801408c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014090:	bf04      	itt	eq
 8014092:	0a1b      	lsreq	r3, r3, #8
 8014094:	3008      	addeq	r0, #8
 8014096:	071a      	lsls	r2, r3, #28
 8014098:	bf04      	itt	eq
 801409a:	091b      	lsreq	r3, r3, #4
 801409c:	3004      	addeq	r0, #4
 801409e:	079a      	lsls	r2, r3, #30
 80140a0:	bf04      	itt	eq
 80140a2:	089b      	lsreq	r3, r3, #2
 80140a4:	3002      	addeq	r0, #2
 80140a6:	07da      	lsls	r2, r3, #31
 80140a8:	d402      	bmi.n	80140b0 <__lo0bits+0x4e>
 80140aa:	085b      	lsrs	r3, r3, #1
 80140ac:	d006      	beq.n	80140bc <__lo0bits+0x5a>
 80140ae:	3001      	adds	r0, #1
 80140b0:	600b      	str	r3, [r1, #0]
 80140b2:	4770      	bx	lr
 80140b4:	4610      	mov	r0, r2
 80140b6:	e7e9      	b.n	801408c <__lo0bits+0x2a>
 80140b8:	2000      	movs	r0, #0
 80140ba:	4770      	bx	lr
 80140bc:	2020      	movs	r0, #32
 80140be:	4770      	bx	lr

080140c0 <__i2b>:
 80140c0:	b510      	push	{r4, lr}
 80140c2:	460c      	mov	r4, r1
 80140c4:	2101      	movs	r1, #1
 80140c6:	f7ff fee9 	bl	8013e9c <_Balloc>
 80140ca:	2201      	movs	r2, #1
 80140cc:	6144      	str	r4, [r0, #20]
 80140ce:	6102      	str	r2, [r0, #16]
 80140d0:	bd10      	pop	{r4, pc}

080140d2 <__multiply>:
 80140d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d6:	4614      	mov	r4, r2
 80140d8:	690a      	ldr	r2, [r1, #16]
 80140da:	6923      	ldr	r3, [r4, #16]
 80140dc:	429a      	cmp	r2, r3
 80140de:	bfb8      	it	lt
 80140e0:	460b      	movlt	r3, r1
 80140e2:	4688      	mov	r8, r1
 80140e4:	bfbc      	itt	lt
 80140e6:	46a0      	movlt	r8, r4
 80140e8:	461c      	movlt	r4, r3
 80140ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80140ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80140f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80140f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80140fa:	eb07 0609 	add.w	r6, r7, r9
 80140fe:	42b3      	cmp	r3, r6
 8014100:	bfb8      	it	lt
 8014102:	3101      	addlt	r1, #1
 8014104:	f7ff feca 	bl	8013e9c <_Balloc>
 8014108:	f100 0514 	add.w	r5, r0, #20
 801410c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014110:	462b      	mov	r3, r5
 8014112:	2200      	movs	r2, #0
 8014114:	4573      	cmp	r3, lr
 8014116:	d316      	bcc.n	8014146 <__multiply+0x74>
 8014118:	f104 0214 	add.w	r2, r4, #20
 801411c:	f108 0114 	add.w	r1, r8, #20
 8014120:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014124:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	9b00      	ldr	r3, [sp, #0]
 801412c:	9201      	str	r2, [sp, #4]
 801412e:	4293      	cmp	r3, r2
 8014130:	d80c      	bhi.n	801414c <__multiply+0x7a>
 8014132:	2e00      	cmp	r6, #0
 8014134:	dd03      	ble.n	801413e <__multiply+0x6c>
 8014136:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801413a:	2b00      	cmp	r3, #0
 801413c:	d05d      	beq.n	80141fa <__multiply+0x128>
 801413e:	6106      	str	r6, [r0, #16]
 8014140:	b003      	add	sp, #12
 8014142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014146:	f843 2b04 	str.w	r2, [r3], #4
 801414a:	e7e3      	b.n	8014114 <__multiply+0x42>
 801414c:	f8b2 b000 	ldrh.w	fp, [r2]
 8014150:	f1bb 0f00 	cmp.w	fp, #0
 8014154:	d023      	beq.n	801419e <__multiply+0xcc>
 8014156:	4689      	mov	r9, r1
 8014158:	46ac      	mov	ip, r5
 801415a:	f04f 0800 	mov.w	r8, #0
 801415e:	f859 4b04 	ldr.w	r4, [r9], #4
 8014162:	f8dc a000 	ldr.w	sl, [ip]
 8014166:	b2a3      	uxth	r3, r4
 8014168:	fa1f fa8a 	uxth.w	sl, sl
 801416c:	fb0b a303 	mla	r3, fp, r3, sl
 8014170:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014174:	f8dc 4000 	ldr.w	r4, [ip]
 8014178:	4443      	add	r3, r8
 801417a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801417e:	fb0b 840a 	mla	r4, fp, sl, r8
 8014182:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014186:	46e2      	mov	sl, ip
 8014188:	b29b      	uxth	r3, r3
 801418a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801418e:	454f      	cmp	r7, r9
 8014190:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014194:	f84a 3b04 	str.w	r3, [sl], #4
 8014198:	d82b      	bhi.n	80141f2 <__multiply+0x120>
 801419a:	f8cc 8004 	str.w	r8, [ip, #4]
 801419e:	9b01      	ldr	r3, [sp, #4]
 80141a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80141a4:	3204      	adds	r2, #4
 80141a6:	f1ba 0f00 	cmp.w	sl, #0
 80141aa:	d020      	beq.n	80141ee <__multiply+0x11c>
 80141ac:	682b      	ldr	r3, [r5, #0]
 80141ae:	4689      	mov	r9, r1
 80141b0:	46a8      	mov	r8, r5
 80141b2:	f04f 0b00 	mov.w	fp, #0
 80141b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80141ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80141be:	fb0a 440c 	mla	r4, sl, ip, r4
 80141c2:	445c      	add	r4, fp
 80141c4:	46c4      	mov	ip, r8
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80141cc:	f84c 3b04 	str.w	r3, [ip], #4
 80141d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80141d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80141d8:	0c1b      	lsrs	r3, r3, #16
 80141da:	fb0a b303 	mla	r3, sl, r3, fp
 80141de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80141e2:	454f      	cmp	r7, r9
 80141e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80141e8:	d805      	bhi.n	80141f6 <__multiply+0x124>
 80141ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80141ee:	3504      	adds	r5, #4
 80141f0:	e79b      	b.n	801412a <__multiply+0x58>
 80141f2:	46d4      	mov	ip, sl
 80141f4:	e7b3      	b.n	801415e <__multiply+0x8c>
 80141f6:	46e0      	mov	r8, ip
 80141f8:	e7dd      	b.n	80141b6 <__multiply+0xe4>
 80141fa:	3e01      	subs	r6, #1
 80141fc:	e799      	b.n	8014132 <__multiply+0x60>
	...

08014200 <__pow5mult>:
 8014200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014204:	4615      	mov	r5, r2
 8014206:	f012 0203 	ands.w	r2, r2, #3
 801420a:	4606      	mov	r6, r0
 801420c:	460f      	mov	r7, r1
 801420e:	d007      	beq.n	8014220 <__pow5mult+0x20>
 8014210:	3a01      	subs	r2, #1
 8014212:	4c21      	ldr	r4, [pc, #132]	; (8014298 <__pow5mult+0x98>)
 8014214:	2300      	movs	r3, #0
 8014216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801421a:	f7ff fe8a 	bl	8013f32 <__multadd>
 801421e:	4607      	mov	r7, r0
 8014220:	10ad      	asrs	r5, r5, #2
 8014222:	d035      	beq.n	8014290 <__pow5mult+0x90>
 8014224:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014226:	b93c      	cbnz	r4, 8014238 <__pow5mult+0x38>
 8014228:	2010      	movs	r0, #16
 801422a:	f7ff fe1d 	bl	8013e68 <malloc>
 801422e:	6270      	str	r0, [r6, #36]	; 0x24
 8014230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014234:	6004      	str	r4, [r0, #0]
 8014236:	60c4      	str	r4, [r0, #12]
 8014238:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801423c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014240:	b94c      	cbnz	r4, 8014256 <__pow5mult+0x56>
 8014242:	f240 2171 	movw	r1, #625	; 0x271
 8014246:	4630      	mov	r0, r6
 8014248:	f7ff ff3a 	bl	80140c0 <__i2b>
 801424c:	2300      	movs	r3, #0
 801424e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014252:	4604      	mov	r4, r0
 8014254:	6003      	str	r3, [r0, #0]
 8014256:	f04f 0800 	mov.w	r8, #0
 801425a:	07eb      	lsls	r3, r5, #31
 801425c:	d50a      	bpl.n	8014274 <__pow5mult+0x74>
 801425e:	4639      	mov	r1, r7
 8014260:	4622      	mov	r2, r4
 8014262:	4630      	mov	r0, r6
 8014264:	f7ff ff35 	bl	80140d2 <__multiply>
 8014268:	4639      	mov	r1, r7
 801426a:	4681      	mov	r9, r0
 801426c:	4630      	mov	r0, r6
 801426e:	f7ff fe49 	bl	8013f04 <_Bfree>
 8014272:	464f      	mov	r7, r9
 8014274:	106d      	asrs	r5, r5, #1
 8014276:	d00b      	beq.n	8014290 <__pow5mult+0x90>
 8014278:	6820      	ldr	r0, [r4, #0]
 801427a:	b938      	cbnz	r0, 801428c <__pow5mult+0x8c>
 801427c:	4622      	mov	r2, r4
 801427e:	4621      	mov	r1, r4
 8014280:	4630      	mov	r0, r6
 8014282:	f7ff ff26 	bl	80140d2 <__multiply>
 8014286:	6020      	str	r0, [r4, #0]
 8014288:	f8c0 8000 	str.w	r8, [r0]
 801428c:	4604      	mov	r4, r0
 801428e:	e7e4      	b.n	801425a <__pow5mult+0x5a>
 8014290:	4638      	mov	r0, r7
 8014292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014296:	bf00      	nop
 8014298:	08015c18 	.word	0x08015c18

0801429c <__lshift>:
 801429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142a0:	460c      	mov	r4, r1
 80142a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80142a6:	6923      	ldr	r3, [r4, #16]
 80142a8:	6849      	ldr	r1, [r1, #4]
 80142aa:	eb0a 0903 	add.w	r9, sl, r3
 80142ae:	68a3      	ldr	r3, [r4, #8]
 80142b0:	4607      	mov	r7, r0
 80142b2:	4616      	mov	r6, r2
 80142b4:	f109 0501 	add.w	r5, r9, #1
 80142b8:	42ab      	cmp	r3, r5
 80142ba:	db32      	blt.n	8014322 <__lshift+0x86>
 80142bc:	4638      	mov	r0, r7
 80142be:	f7ff fded 	bl	8013e9c <_Balloc>
 80142c2:	2300      	movs	r3, #0
 80142c4:	4680      	mov	r8, r0
 80142c6:	f100 0114 	add.w	r1, r0, #20
 80142ca:	461a      	mov	r2, r3
 80142cc:	4553      	cmp	r3, sl
 80142ce:	db2b      	blt.n	8014328 <__lshift+0x8c>
 80142d0:	6920      	ldr	r0, [r4, #16]
 80142d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80142d6:	f104 0314 	add.w	r3, r4, #20
 80142da:	f016 021f 	ands.w	r2, r6, #31
 80142de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80142e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80142e6:	d025      	beq.n	8014334 <__lshift+0x98>
 80142e8:	f1c2 0e20 	rsb	lr, r2, #32
 80142ec:	2000      	movs	r0, #0
 80142ee:	681e      	ldr	r6, [r3, #0]
 80142f0:	468a      	mov	sl, r1
 80142f2:	4096      	lsls	r6, r2
 80142f4:	4330      	orrs	r0, r6
 80142f6:	f84a 0b04 	str.w	r0, [sl], #4
 80142fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80142fe:	459c      	cmp	ip, r3
 8014300:	fa20 f00e 	lsr.w	r0, r0, lr
 8014304:	d814      	bhi.n	8014330 <__lshift+0x94>
 8014306:	6048      	str	r0, [r1, #4]
 8014308:	b108      	cbz	r0, 801430e <__lshift+0x72>
 801430a:	f109 0502 	add.w	r5, r9, #2
 801430e:	3d01      	subs	r5, #1
 8014310:	4638      	mov	r0, r7
 8014312:	f8c8 5010 	str.w	r5, [r8, #16]
 8014316:	4621      	mov	r1, r4
 8014318:	f7ff fdf4 	bl	8013f04 <_Bfree>
 801431c:	4640      	mov	r0, r8
 801431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014322:	3101      	adds	r1, #1
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	e7c7      	b.n	80142b8 <__lshift+0x1c>
 8014328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801432c:	3301      	adds	r3, #1
 801432e:	e7cd      	b.n	80142cc <__lshift+0x30>
 8014330:	4651      	mov	r1, sl
 8014332:	e7dc      	b.n	80142ee <__lshift+0x52>
 8014334:	3904      	subs	r1, #4
 8014336:	f853 2b04 	ldr.w	r2, [r3], #4
 801433a:	f841 2f04 	str.w	r2, [r1, #4]!
 801433e:	459c      	cmp	ip, r3
 8014340:	d8f9      	bhi.n	8014336 <__lshift+0x9a>
 8014342:	e7e4      	b.n	801430e <__lshift+0x72>

08014344 <__mcmp>:
 8014344:	6903      	ldr	r3, [r0, #16]
 8014346:	690a      	ldr	r2, [r1, #16]
 8014348:	1a9b      	subs	r3, r3, r2
 801434a:	b530      	push	{r4, r5, lr}
 801434c:	d10c      	bne.n	8014368 <__mcmp+0x24>
 801434e:	0092      	lsls	r2, r2, #2
 8014350:	3014      	adds	r0, #20
 8014352:	3114      	adds	r1, #20
 8014354:	1884      	adds	r4, r0, r2
 8014356:	4411      	add	r1, r2
 8014358:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801435c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014360:	4295      	cmp	r5, r2
 8014362:	d003      	beq.n	801436c <__mcmp+0x28>
 8014364:	d305      	bcc.n	8014372 <__mcmp+0x2e>
 8014366:	2301      	movs	r3, #1
 8014368:	4618      	mov	r0, r3
 801436a:	bd30      	pop	{r4, r5, pc}
 801436c:	42a0      	cmp	r0, r4
 801436e:	d3f3      	bcc.n	8014358 <__mcmp+0x14>
 8014370:	e7fa      	b.n	8014368 <__mcmp+0x24>
 8014372:	f04f 33ff 	mov.w	r3, #4294967295
 8014376:	e7f7      	b.n	8014368 <__mcmp+0x24>

08014378 <__mdiff>:
 8014378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801437c:	460d      	mov	r5, r1
 801437e:	4607      	mov	r7, r0
 8014380:	4611      	mov	r1, r2
 8014382:	4628      	mov	r0, r5
 8014384:	4614      	mov	r4, r2
 8014386:	f7ff ffdd 	bl	8014344 <__mcmp>
 801438a:	1e06      	subs	r6, r0, #0
 801438c:	d108      	bne.n	80143a0 <__mdiff+0x28>
 801438e:	4631      	mov	r1, r6
 8014390:	4638      	mov	r0, r7
 8014392:	f7ff fd83 	bl	8013e9c <_Balloc>
 8014396:	2301      	movs	r3, #1
 8014398:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143a0:	bfa4      	itt	ge
 80143a2:	4623      	movge	r3, r4
 80143a4:	462c      	movge	r4, r5
 80143a6:	4638      	mov	r0, r7
 80143a8:	6861      	ldr	r1, [r4, #4]
 80143aa:	bfa6      	itte	ge
 80143ac:	461d      	movge	r5, r3
 80143ae:	2600      	movge	r6, #0
 80143b0:	2601      	movlt	r6, #1
 80143b2:	f7ff fd73 	bl	8013e9c <_Balloc>
 80143b6:	692b      	ldr	r3, [r5, #16]
 80143b8:	60c6      	str	r6, [r0, #12]
 80143ba:	6926      	ldr	r6, [r4, #16]
 80143bc:	f105 0914 	add.w	r9, r5, #20
 80143c0:	f104 0214 	add.w	r2, r4, #20
 80143c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80143c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80143cc:	f100 0514 	add.w	r5, r0, #20
 80143d0:	f04f 0e00 	mov.w	lr, #0
 80143d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80143d8:	f859 4b04 	ldr.w	r4, [r9], #4
 80143dc:	fa1e f18a 	uxtah	r1, lr, sl
 80143e0:	b2a3      	uxth	r3, r4
 80143e2:	1ac9      	subs	r1, r1, r3
 80143e4:	0c23      	lsrs	r3, r4, #16
 80143e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80143ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80143ee:	b289      	uxth	r1, r1
 80143f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80143f4:	45c8      	cmp	r8, r9
 80143f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80143fa:	4694      	mov	ip, r2
 80143fc:	f845 3b04 	str.w	r3, [r5], #4
 8014400:	d8e8      	bhi.n	80143d4 <__mdiff+0x5c>
 8014402:	45bc      	cmp	ip, r7
 8014404:	d304      	bcc.n	8014410 <__mdiff+0x98>
 8014406:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801440a:	b183      	cbz	r3, 801442e <__mdiff+0xb6>
 801440c:	6106      	str	r6, [r0, #16]
 801440e:	e7c5      	b.n	801439c <__mdiff+0x24>
 8014410:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014414:	fa1e f381 	uxtah	r3, lr, r1
 8014418:	141a      	asrs	r2, r3, #16
 801441a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801441e:	b29b      	uxth	r3, r3
 8014420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014424:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014428:	f845 3b04 	str.w	r3, [r5], #4
 801442c:	e7e9      	b.n	8014402 <__mdiff+0x8a>
 801442e:	3e01      	subs	r6, #1
 8014430:	e7e9      	b.n	8014406 <__mdiff+0x8e>
	...

08014434 <__ulp>:
 8014434:	4b12      	ldr	r3, [pc, #72]	; (8014480 <__ulp+0x4c>)
 8014436:	ee10 2a90 	vmov	r2, s1
 801443a:	401a      	ands	r2, r3
 801443c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014440:	2b00      	cmp	r3, #0
 8014442:	dd04      	ble.n	801444e <__ulp+0x1a>
 8014444:	2000      	movs	r0, #0
 8014446:	4619      	mov	r1, r3
 8014448:	ec41 0b10 	vmov	d0, r0, r1
 801444c:	4770      	bx	lr
 801444e:	425b      	negs	r3, r3
 8014450:	151b      	asrs	r3, r3, #20
 8014452:	2b13      	cmp	r3, #19
 8014454:	f04f 0000 	mov.w	r0, #0
 8014458:	f04f 0100 	mov.w	r1, #0
 801445c:	dc04      	bgt.n	8014468 <__ulp+0x34>
 801445e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014462:	fa42 f103 	asr.w	r1, r2, r3
 8014466:	e7ef      	b.n	8014448 <__ulp+0x14>
 8014468:	3b14      	subs	r3, #20
 801446a:	2b1e      	cmp	r3, #30
 801446c:	f04f 0201 	mov.w	r2, #1
 8014470:	bfda      	itte	le
 8014472:	f1c3 031f 	rsble	r3, r3, #31
 8014476:	fa02 f303 	lslle.w	r3, r2, r3
 801447a:	4613      	movgt	r3, r2
 801447c:	4618      	mov	r0, r3
 801447e:	e7e3      	b.n	8014448 <__ulp+0x14>
 8014480:	7ff00000 	.word	0x7ff00000

08014484 <__b2d>:
 8014484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014486:	6905      	ldr	r5, [r0, #16]
 8014488:	f100 0714 	add.w	r7, r0, #20
 801448c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014490:	1f2e      	subs	r6, r5, #4
 8014492:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014496:	4620      	mov	r0, r4
 8014498:	f7ff fdc4 	bl	8014024 <__hi0bits>
 801449c:	f1c0 0320 	rsb	r3, r0, #32
 80144a0:	280a      	cmp	r0, #10
 80144a2:	600b      	str	r3, [r1, #0]
 80144a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801451c <__b2d+0x98>
 80144a8:	dc14      	bgt.n	80144d4 <__b2d+0x50>
 80144aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80144ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80144b2:	42b7      	cmp	r7, r6
 80144b4:	ea41 030c 	orr.w	r3, r1, ip
 80144b8:	bf34      	ite	cc
 80144ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80144be:	2100      	movcs	r1, #0
 80144c0:	3015      	adds	r0, #21
 80144c2:	fa04 f000 	lsl.w	r0, r4, r0
 80144c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80144ca:	ea40 0201 	orr.w	r2, r0, r1
 80144ce:	ec43 2b10 	vmov	d0, r2, r3
 80144d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d4:	42b7      	cmp	r7, r6
 80144d6:	bf3a      	itte	cc
 80144d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80144dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80144e0:	2100      	movcs	r1, #0
 80144e2:	380b      	subs	r0, #11
 80144e4:	d015      	beq.n	8014512 <__b2d+0x8e>
 80144e6:	4084      	lsls	r4, r0
 80144e8:	f1c0 0520 	rsb	r5, r0, #32
 80144ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80144f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80144f4:	42be      	cmp	r6, r7
 80144f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80144fa:	ea44 030c 	orr.w	r3, r4, ip
 80144fe:	bf8c      	ite	hi
 8014500:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014504:	2400      	movls	r4, #0
 8014506:	fa01 f000 	lsl.w	r0, r1, r0
 801450a:	40ec      	lsrs	r4, r5
 801450c:	ea40 0204 	orr.w	r2, r0, r4
 8014510:	e7dd      	b.n	80144ce <__b2d+0x4a>
 8014512:	ea44 030c 	orr.w	r3, r4, ip
 8014516:	460a      	mov	r2, r1
 8014518:	e7d9      	b.n	80144ce <__b2d+0x4a>
 801451a:	bf00      	nop
 801451c:	3ff00000 	.word	0x3ff00000

08014520 <__d2b>:
 8014520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014524:	460e      	mov	r6, r1
 8014526:	2101      	movs	r1, #1
 8014528:	ec59 8b10 	vmov	r8, r9, d0
 801452c:	4615      	mov	r5, r2
 801452e:	f7ff fcb5 	bl	8013e9c <_Balloc>
 8014532:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014536:	4607      	mov	r7, r0
 8014538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801453c:	bb34      	cbnz	r4, 801458c <__d2b+0x6c>
 801453e:	9301      	str	r3, [sp, #4]
 8014540:	f1b8 0300 	subs.w	r3, r8, #0
 8014544:	d027      	beq.n	8014596 <__d2b+0x76>
 8014546:	a802      	add	r0, sp, #8
 8014548:	f840 3d08 	str.w	r3, [r0, #-8]!
 801454c:	f7ff fd89 	bl	8014062 <__lo0bits>
 8014550:	9900      	ldr	r1, [sp, #0]
 8014552:	b1f0      	cbz	r0, 8014592 <__d2b+0x72>
 8014554:	9a01      	ldr	r2, [sp, #4]
 8014556:	f1c0 0320 	rsb	r3, r0, #32
 801455a:	fa02 f303 	lsl.w	r3, r2, r3
 801455e:	430b      	orrs	r3, r1
 8014560:	40c2      	lsrs	r2, r0
 8014562:	617b      	str	r3, [r7, #20]
 8014564:	9201      	str	r2, [sp, #4]
 8014566:	9b01      	ldr	r3, [sp, #4]
 8014568:	61bb      	str	r3, [r7, #24]
 801456a:	2b00      	cmp	r3, #0
 801456c:	bf14      	ite	ne
 801456e:	2102      	movne	r1, #2
 8014570:	2101      	moveq	r1, #1
 8014572:	6139      	str	r1, [r7, #16]
 8014574:	b1c4      	cbz	r4, 80145a8 <__d2b+0x88>
 8014576:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801457a:	4404      	add	r4, r0
 801457c:	6034      	str	r4, [r6, #0]
 801457e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014582:	6028      	str	r0, [r5, #0]
 8014584:	4638      	mov	r0, r7
 8014586:	b003      	add	sp, #12
 8014588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801458c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014590:	e7d5      	b.n	801453e <__d2b+0x1e>
 8014592:	6179      	str	r1, [r7, #20]
 8014594:	e7e7      	b.n	8014566 <__d2b+0x46>
 8014596:	a801      	add	r0, sp, #4
 8014598:	f7ff fd63 	bl	8014062 <__lo0bits>
 801459c:	9b01      	ldr	r3, [sp, #4]
 801459e:	617b      	str	r3, [r7, #20]
 80145a0:	2101      	movs	r1, #1
 80145a2:	6139      	str	r1, [r7, #16]
 80145a4:	3020      	adds	r0, #32
 80145a6:	e7e5      	b.n	8014574 <__d2b+0x54>
 80145a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80145ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80145b0:	6030      	str	r0, [r6, #0]
 80145b2:	6918      	ldr	r0, [r3, #16]
 80145b4:	f7ff fd36 	bl	8014024 <__hi0bits>
 80145b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80145bc:	e7e1      	b.n	8014582 <__d2b+0x62>

080145be <__ratio>:
 80145be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c2:	4688      	mov	r8, r1
 80145c4:	4669      	mov	r1, sp
 80145c6:	4681      	mov	r9, r0
 80145c8:	f7ff ff5c 	bl	8014484 <__b2d>
 80145cc:	a901      	add	r1, sp, #4
 80145ce:	4640      	mov	r0, r8
 80145d0:	ec57 6b10 	vmov	r6, r7, d0
 80145d4:	f7ff ff56 	bl	8014484 <__b2d>
 80145d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80145e0:	eba3 0c02 	sub.w	ip, r3, r2
 80145e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80145e8:	1a9b      	subs	r3, r3, r2
 80145ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80145ee:	ec5b ab10 	vmov	sl, fp, d0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	bfce      	itee	gt
 80145f6:	463a      	movgt	r2, r7
 80145f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80145fc:	465a      	movle	r2, fp
 80145fe:	4659      	mov	r1, fp
 8014600:	463d      	mov	r5, r7
 8014602:	bfd4      	ite	le
 8014604:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014608:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801460c:	4630      	mov	r0, r6
 801460e:	ee10 2a10 	vmov	r2, s0
 8014612:	460b      	mov	r3, r1
 8014614:	4629      	mov	r1, r5
 8014616:	f7ec f919 	bl	800084c <__aeabi_ddiv>
 801461a:	ec41 0b10 	vmov	d0, r0, r1
 801461e:	b003      	add	sp, #12
 8014620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014624 <__copybits>:
 8014624:	3901      	subs	r1, #1
 8014626:	b510      	push	{r4, lr}
 8014628:	1149      	asrs	r1, r1, #5
 801462a:	6914      	ldr	r4, [r2, #16]
 801462c:	3101      	adds	r1, #1
 801462e:	f102 0314 	add.w	r3, r2, #20
 8014632:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014636:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801463a:	42a3      	cmp	r3, r4
 801463c:	4602      	mov	r2, r0
 801463e:	d303      	bcc.n	8014648 <__copybits+0x24>
 8014640:	2300      	movs	r3, #0
 8014642:	428a      	cmp	r2, r1
 8014644:	d305      	bcc.n	8014652 <__copybits+0x2e>
 8014646:	bd10      	pop	{r4, pc}
 8014648:	f853 2b04 	ldr.w	r2, [r3], #4
 801464c:	f840 2b04 	str.w	r2, [r0], #4
 8014650:	e7f3      	b.n	801463a <__copybits+0x16>
 8014652:	f842 3b04 	str.w	r3, [r2], #4
 8014656:	e7f4      	b.n	8014642 <__copybits+0x1e>

08014658 <__any_on>:
 8014658:	f100 0214 	add.w	r2, r0, #20
 801465c:	6900      	ldr	r0, [r0, #16]
 801465e:	114b      	asrs	r3, r1, #5
 8014660:	4298      	cmp	r0, r3
 8014662:	b510      	push	{r4, lr}
 8014664:	db11      	blt.n	801468a <__any_on+0x32>
 8014666:	dd0a      	ble.n	801467e <__any_on+0x26>
 8014668:	f011 011f 	ands.w	r1, r1, #31
 801466c:	d007      	beq.n	801467e <__any_on+0x26>
 801466e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014672:	fa24 f001 	lsr.w	r0, r4, r1
 8014676:	fa00 f101 	lsl.w	r1, r0, r1
 801467a:	428c      	cmp	r4, r1
 801467c:	d10b      	bne.n	8014696 <__any_on+0x3e>
 801467e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014682:	4293      	cmp	r3, r2
 8014684:	d803      	bhi.n	801468e <__any_on+0x36>
 8014686:	2000      	movs	r0, #0
 8014688:	bd10      	pop	{r4, pc}
 801468a:	4603      	mov	r3, r0
 801468c:	e7f7      	b.n	801467e <__any_on+0x26>
 801468e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014692:	2900      	cmp	r1, #0
 8014694:	d0f5      	beq.n	8014682 <__any_on+0x2a>
 8014696:	2001      	movs	r0, #1
 8014698:	e7f6      	b.n	8014688 <__any_on+0x30>

0801469a <_calloc_r>:
 801469a:	b538      	push	{r3, r4, r5, lr}
 801469c:	fb02 f401 	mul.w	r4, r2, r1
 80146a0:	4621      	mov	r1, r4
 80146a2:	f000 f857 	bl	8014754 <_malloc_r>
 80146a6:	4605      	mov	r5, r0
 80146a8:	b118      	cbz	r0, 80146b2 <_calloc_r+0x18>
 80146aa:	4622      	mov	r2, r4
 80146ac:	2100      	movs	r1, #0
 80146ae:	f7fc fc32 	bl	8010f16 <memset>
 80146b2:	4628      	mov	r0, r5
 80146b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080146b8 <_free_r>:
 80146b8:	b538      	push	{r3, r4, r5, lr}
 80146ba:	4605      	mov	r5, r0
 80146bc:	2900      	cmp	r1, #0
 80146be:	d045      	beq.n	801474c <_free_r+0x94>
 80146c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146c4:	1f0c      	subs	r4, r1, #4
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	bfb8      	it	lt
 80146ca:	18e4      	addlt	r4, r4, r3
 80146cc:	f000 fdc3 	bl	8015256 <__malloc_lock>
 80146d0:	4a1f      	ldr	r2, [pc, #124]	; (8014750 <_free_r+0x98>)
 80146d2:	6813      	ldr	r3, [r2, #0]
 80146d4:	4610      	mov	r0, r2
 80146d6:	b933      	cbnz	r3, 80146e6 <_free_r+0x2e>
 80146d8:	6063      	str	r3, [r4, #4]
 80146da:	6014      	str	r4, [r2, #0]
 80146dc:	4628      	mov	r0, r5
 80146de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146e2:	f000 bdb9 	b.w	8015258 <__malloc_unlock>
 80146e6:	42a3      	cmp	r3, r4
 80146e8:	d90c      	bls.n	8014704 <_free_r+0x4c>
 80146ea:	6821      	ldr	r1, [r4, #0]
 80146ec:	1862      	adds	r2, r4, r1
 80146ee:	4293      	cmp	r3, r2
 80146f0:	bf04      	itt	eq
 80146f2:	681a      	ldreq	r2, [r3, #0]
 80146f4:	685b      	ldreq	r3, [r3, #4]
 80146f6:	6063      	str	r3, [r4, #4]
 80146f8:	bf04      	itt	eq
 80146fa:	1852      	addeq	r2, r2, r1
 80146fc:	6022      	streq	r2, [r4, #0]
 80146fe:	6004      	str	r4, [r0, #0]
 8014700:	e7ec      	b.n	80146dc <_free_r+0x24>
 8014702:	4613      	mov	r3, r2
 8014704:	685a      	ldr	r2, [r3, #4]
 8014706:	b10a      	cbz	r2, 801470c <_free_r+0x54>
 8014708:	42a2      	cmp	r2, r4
 801470a:	d9fa      	bls.n	8014702 <_free_r+0x4a>
 801470c:	6819      	ldr	r1, [r3, #0]
 801470e:	1858      	adds	r0, r3, r1
 8014710:	42a0      	cmp	r0, r4
 8014712:	d10b      	bne.n	801472c <_free_r+0x74>
 8014714:	6820      	ldr	r0, [r4, #0]
 8014716:	4401      	add	r1, r0
 8014718:	1858      	adds	r0, r3, r1
 801471a:	4282      	cmp	r2, r0
 801471c:	6019      	str	r1, [r3, #0]
 801471e:	d1dd      	bne.n	80146dc <_free_r+0x24>
 8014720:	6810      	ldr	r0, [r2, #0]
 8014722:	6852      	ldr	r2, [r2, #4]
 8014724:	605a      	str	r2, [r3, #4]
 8014726:	4401      	add	r1, r0
 8014728:	6019      	str	r1, [r3, #0]
 801472a:	e7d7      	b.n	80146dc <_free_r+0x24>
 801472c:	d902      	bls.n	8014734 <_free_r+0x7c>
 801472e:	230c      	movs	r3, #12
 8014730:	602b      	str	r3, [r5, #0]
 8014732:	e7d3      	b.n	80146dc <_free_r+0x24>
 8014734:	6820      	ldr	r0, [r4, #0]
 8014736:	1821      	adds	r1, r4, r0
 8014738:	428a      	cmp	r2, r1
 801473a:	bf04      	itt	eq
 801473c:	6811      	ldreq	r1, [r2, #0]
 801473e:	6852      	ldreq	r2, [r2, #4]
 8014740:	6062      	str	r2, [r4, #4]
 8014742:	bf04      	itt	eq
 8014744:	1809      	addeq	r1, r1, r0
 8014746:	6021      	streq	r1, [r4, #0]
 8014748:	605c      	str	r4, [r3, #4]
 801474a:	e7c7      	b.n	80146dc <_free_r+0x24>
 801474c:	bd38      	pop	{r3, r4, r5, pc}
 801474e:	bf00      	nop
 8014750:	2000420c 	.word	0x2000420c

08014754 <_malloc_r>:
 8014754:	b570      	push	{r4, r5, r6, lr}
 8014756:	1ccd      	adds	r5, r1, #3
 8014758:	f025 0503 	bic.w	r5, r5, #3
 801475c:	3508      	adds	r5, #8
 801475e:	2d0c      	cmp	r5, #12
 8014760:	bf38      	it	cc
 8014762:	250c      	movcc	r5, #12
 8014764:	2d00      	cmp	r5, #0
 8014766:	4606      	mov	r6, r0
 8014768:	db01      	blt.n	801476e <_malloc_r+0x1a>
 801476a:	42a9      	cmp	r1, r5
 801476c:	d903      	bls.n	8014776 <_malloc_r+0x22>
 801476e:	230c      	movs	r3, #12
 8014770:	6033      	str	r3, [r6, #0]
 8014772:	2000      	movs	r0, #0
 8014774:	bd70      	pop	{r4, r5, r6, pc}
 8014776:	f000 fd6e 	bl	8015256 <__malloc_lock>
 801477a:	4a21      	ldr	r2, [pc, #132]	; (8014800 <_malloc_r+0xac>)
 801477c:	6814      	ldr	r4, [r2, #0]
 801477e:	4621      	mov	r1, r4
 8014780:	b991      	cbnz	r1, 80147a8 <_malloc_r+0x54>
 8014782:	4c20      	ldr	r4, [pc, #128]	; (8014804 <_malloc_r+0xb0>)
 8014784:	6823      	ldr	r3, [r4, #0]
 8014786:	b91b      	cbnz	r3, 8014790 <_malloc_r+0x3c>
 8014788:	4630      	mov	r0, r6
 801478a:	f000 facf 	bl	8014d2c <_sbrk_r>
 801478e:	6020      	str	r0, [r4, #0]
 8014790:	4629      	mov	r1, r5
 8014792:	4630      	mov	r0, r6
 8014794:	f000 faca 	bl	8014d2c <_sbrk_r>
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d124      	bne.n	80147e6 <_malloc_r+0x92>
 801479c:	230c      	movs	r3, #12
 801479e:	6033      	str	r3, [r6, #0]
 80147a0:	4630      	mov	r0, r6
 80147a2:	f000 fd59 	bl	8015258 <__malloc_unlock>
 80147a6:	e7e4      	b.n	8014772 <_malloc_r+0x1e>
 80147a8:	680b      	ldr	r3, [r1, #0]
 80147aa:	1b5b      	subs	r3, r3, r5
 80147ac:	d418      	bmi.n	80147e0 <_malloc_r+0x8c>
 80147ae:	2b0b      	cmp	r3, #11
 80147b0:	d90f      	bls.n	80147d2 <_malloc_r+0x7e>
 80147b2:	600b      	str	r3, [r1, #0]
 80147b4:	50cd      	str	r5, [r1, r3]
 80147b6:	18cc      	adds	r4, r1, r3
 80147b8:	4630      	mov	r0, r6
 80147ba:	f000 fd4d 	bl	8015258 <__malloc_unlock>
 80147be:	f104 000b 	add.w	r0, r4, #11
 80147c2:	1d23      	adds	r3, r4, #4
 80147c4:	f020 0007 	bic.w	r0, r0, #7
 80147c8:	1ac3      	subs	r3, r0, r3
 80147ca:	d0d3      	beq.n	8014774 <_malloc_r+0x20>
 80147cc:	425a      	negs	r2, r3
 80147ce:	50e2      	str	r2, [r4, r3]
 80147d0:	e7d0      	b.n	8014774 <_malloc_r+0x20>
 80147d2:	428c      	cmp	r4, r1
 80147d4:	684b      	ldr	r3, [r1, #4]
 80147d6:	bf16      	itet	ne
 80147d8:	6063      	strne	r3, [r4, #4]
 80147da:	6013      	streq	r3, [r2, #0]
 80147dc:	460c      	movne	r4, r1
 80147de:	e7eb      	b.n	80147b8 <_malloc_r+0x64>
 80147e0:	460c      	mov	r4, r1
 80147e2:	6849      	ldr	r1, [r1, #4]
 80147e4:	e7cc      	b.n	8014780 <_malloc_r+0x2c>
 80147e6:	1cc4      	adds	r4, r0, #3
 80147e8:	f024 0403 	bic.w	r4, r4, #3
 80147ec:	42a0      	cmp	r0, r4
 80147ee:	d005      	beq.n	80147fc <_malloc_r+0xa8>
 80147f0:	1a21      	subs	r1, r4, r0
 80147f2:	4630      	mov	r0, r6
 80147f4:	f000 fa9a 	bl	8014d2c <_sbrk_r>
 80147f8:	3001      	adds	r0, #1
 80147fa:	d0cf      	beq.n	801479c <_malloc_r+0x48>
 80147fc:	6025      	str	r5, [r4, #0]
 80147fe:	e7db      	b.n	80147b8 <_malloc_r+0x64>
 8014800:	2000420c 	.word	0x2000420c
 8014804:	20004210 	.word	0x20004210

08014808 <__ssputs_r>:
 8014808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801480c:	688e      	ldr	r6, [r1, #8]
 801480e:	429e      	cmp	r6, r3
 8014810:	4682      	mov	sl, r0
 8014812:	460c      	mov	r4, r1
 8014814:	4690      	mov	r8, r2
 8014816:	4699      	mov	r9, r3
 8014818:	d837      	bhi.n	801488a <__ssputs_r+0x82>
 801481a:	898a      	ldrh	r2, [r1, #12]
 801481c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014820:	d031      	beq.n	8014886 <__ssputs_r+0x7e>
 8014822:	6825      	ldr	r5, [r4, #0]
 8014824:	6909      	ldr	r1, [r1, #16]
 8014826:	1a6f      	subs	r7, r5, r1
 8014828:	6965      	ldr	r5, [r4, #20]
 801482a:	2302      	movs	r3, #2
 801482c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014830:	fb95 f5f3 	sdiv	r5, r5, r3
 8014834:	f109 0301 	add.w	r3, r9, #1
 8014838:	443b      	add	r3, r7
 801483a:	429d      	cmp	r5, r3
 801483c:	bf38      	it	cc
 801483e:	461d      	movcc	r5, r3
 8014840:	0553      	lsls	r3, r2, #21
 8014842:	d530      	bpl.n	80148a6 <__ssputs_r+0x9e>
 8014844:	4629      	mov	r1, r5
 8014846:	f7ff ff85 	bl	8014754 <_malloc_r>
 801484a:	4606      	mov	r6, r0
 801484c:	b950      	cbnz	r0, 8014864 <__ssputs_r+0x5c>
 801484e:	230c      	movs	r3, #12
 8014850:	f8ca 3000 	str.w	r3, [sl]
 8014854:	89a3      	ldrh	r3, [r4, #12]
 8014856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801485a:	81a3      	strh	r3, [r4, #12]
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014864:	463a      	mov	r2, r7
 8014866:	6921      	ldr	r1, [r4, #16]
 8014868:	f7fc fb4a 	bl	8010f00 <memcpy>
 801486c:	89a3      	ldrh	r3, [r4, #12]
 801486e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014876:	81a3      	strh	r3, [r4, #12]
 8014878:	6126      	str	r6, [r4, #16]
 801487a:	6165      	str	r5, [r4, #20]
 801487c:	443e      	add	r6, r7
 801487e:	1bed      	subs	r5, r5, r7
 8014880:	6026      	str	r6, [r4, #0]
 8014882:	60a5      	str	r5, [r4, #8]
 8014884:	464e      	mov	r6, r9
 8014886:	454e      	cmp	r6, r9
 8014888:	d900      	bls.n	801488c <__ssputs_r+0x84>
 801488a:	464e      	mov	r6, r9
 801488c:	4632      	mov	r2, r6
 801488e:	4641      	mov	r1, r8
 8014890:	6820      	ldr	r0, [r4, #0]
 8014892:	f000 fcc7 	bl	8015224 <memmove>
 8014896:	68a3      	ldr	r3, [r4, #8]
 8014898:	1b9b      	subs	r3, r3, r6
 801489a:	60a3      	str	r3, [r4, #8]
 801489c:	6823      	ldr	r3, [r4, #0]
 801489e:	441e      	add	r6, r3
 80148a0:	6026      	str	r6, [r4, #0]
 80148a2:	2000      	movs	r0, #0
 80148a4:	e7dc      	b.n	8014860 <__ssputs_r+0x58>
 80148a6:	462a      	mov	r2, r5
 80148a8:	f000 fcd7 	bl	801525a <_realloc_r>
 80148ac:	4606      	mov	r6, r0
 80148ae:	2800      	cmp	r0, #0
 80148b0:	d1e2      	bne.n	8014878 <__ssputs_r+0x70>
 80148b2:	6921      	ldr	r1, [r4, #16]
 80148b4:	4650      	mov	r0, sl
 80148b6:	f7ff feff 	bl	80146b8 <_free_r>
 80148ba:	e7c8      	b.n	801484e <__ssputs_r+0x46>

080148bc <_svfiprintf_r>:
 80148bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c0:	461d      	mov	r5, r3
 80148c2:	898b      	ldrh	r3, [r1, #12]
 80148c4:	061f      	lsls	r7, r3, #24
 80148c6:	b09d      	sub	sp, #116	; 0x74
 80148c8:	4680      	mov	r8, r0
 80148ca:	460c      	mov	r4, r1
 80148cc:	4616      	mov	r6, r2
 80148ce:	d50f      	bpl.n	80148f0 <_svfiprintf_r+0x34>
 80148d0:	690b      	ldr	r3, [r1, #16]
 80148d2:	b96b      	cbnz	r3, 80148f0 <_svfiprintf_r+0x34>
 80148d4:	2140      	movs	r1, #64	; 0x40
 80148d6:	f7ff ff3d 	bl	8014754 <_malloc_r>
 80148da:	6020      	str	r0, [r4, #0]
 80148dc:	6120      	str	r0, [r4, #16]
 80148de:	b928      	cbnz	r0, 80148ec <_svfiprintf_r+0x30>
 80148e0:	230c      	movs	r3, #12
 80148e2:	f8c8 3000 	str.w	r3, [r8]
 80148e6:	f04f 30ff 	mov.w	r0, #4294967295
 80148ea:	e0c8      	b.n	8014a7e <_svfiprintf_r+0x1c2>
 80148ec:	2340      	movs	r3, #64	; 0x40
 80148ee:	6163      	str	r3, [r4, #20]
 80148f0:	2300      	movs	r3, #0
 80148f2:	9309      	str	r3, [sp, #36]	; 0x24
 80148f4:	2320      	movs	r3, #32
 80148f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80148fa:	2330      	movs	r3, #48	; 0x30
 80148fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014900:	9503      	str	r5, [sp, #12]
 8014902:	f04f 0b01 	mov.w	fp, #1
 8014906:	4637      	mov	r7, r6
 8014908:	463d      	mov	r5, r7
 801490a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801490e:	b10b      	cbz	r3, 8014914 <_svfiprintf_r+0x58>
 8014910:	2b25      	cmp	r3, #37	; 0x25
 8014912:	d13e      	bne.n	8014992 <_svfiprintf_r+0xd6>
 8014914:	ebb7 0a06 	subs.w	sl, r7, r6
 8014918:	d00b      	beq.n	8014932 <_svfiprintf_r+0x76>
 801491a:	4653      	mov	r3, sl
 801491c:	4632      	mov	r2, r6
 801491e:	4621      	mov	r1, r4
 8014920:	4640      	mov	r0, r8
 8014922:	f7ff ff71 	bl	8014808 <__ssputs_r>
 8014926:	3001      	adds	r0, #1
 8014928:	f000 80a4 	beq.w	8014a74 <_svfiprintf_r+0x1b8>
 801492c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801492e:	4453      	add	r3, sl
 8014930:	9309      	str	r3, [sp, #36]	; 0x24
 8014932:	783b      	ldrb	r3, [r7, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	f000 809d 	beq.w	8014a74 <_svfiprintf_r+0x1b8>
 801493a:	2300      	movs	r3, #0
 801493c:	f04f 32ff 	mov.w	r2, #4294967295
 8014940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014944:	9304      	str	r3, [sp, #16]
 8014946:	9307      	str	r3, [sp, #28]
 8014948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801494c:	931a      	str	r3, [sp, #104]	; 0x68
 801494e:	462f      	mov	r7, r5
 8014950:	2205      	movs	r2, #5
 8014952:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014956:	4850      	ldr	r0, [pc, #320]	; (8014a98 <_svfiprintf_r+0x1dc>)
 8014958:	f7eb fc42 	bl	80001e0 <memchr>
 801495c:	9b04      	ldr	r3, [sp, #16]
 801495e:	b9d0      	cbnz	r0, 8014996 <_svfiprintf_r+0xda>
 8014960:	06d9      	lsls	r1, r3, #27
 8014962:	bf44      	itt	mi
 8014964:	2220      	movmi	r2, #32
 8014966:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801496a:	071a      	lsls	r2, r3, #28
 801496c:	bf44      	itt	mi
 801496e:	222b      	movmi	r2, #43	; 0x2b
 8014970:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014974:	782a      	ldrb	r2, [r5, #0]
 8014976:	2a2a      	cmp	r2, #42	; 0x2a
 8014978:	d015      	beq.n	80149a6 <_svfiprintf_r+0xea>
 801497a:	9a07      	ldr	r2, [sp, #28]
 801497c:	462f      	mov	r7, r5
 801497e:	2000      	movs	r0, #0
 8014980:	250a      	movs	r5, #10
 8014982:	4639      	mov	r1, r7
 8014984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014988:	3b30      	subs	r3, #48	; 0x30
 801498a:	2b09      	cmp	r3, #9
 801498c:	d94d      	bls.n	8014a2a <_svfiprintf_r+0x16e>
 801498e:	b1b8      	cbz	r0, 80149c0 <_svfiprintf_r+0x104>
 8014990:	e00f      	b.n	80149b2 <_svfiprintf_r+0xf6>
 8014992:	462f      	mov	r7, r5
 8014994:	e7b8      	b.n	8014908 <_svfiprintf_r+0x4c>
 8014996:	4a40      	ldr	r2, [pc, #256]	; (8014a98 <_svfiprintf_r+0x1dc>)
 8014998:	1a80      	subs	r0, r0, r2
 801499a:	fa0b f000 	lsl.w	r0, fp, r0
 801499e:	4318      	orrs	r0, r3
 80149a0:	9004      	str	r0, [sp, #16]
 80149a2:	463d      	mov	r5, r7
 80149a4:	e7d3      	b.n	801494e <_svfiprintf_r+0x92>
 80149a6:	9a03      	ldr	r2, [sp, #12]
 80149a8:	1d11      	adds	r1, r2, #4
 80149aa:	6812      	ldr	r2, [r2, #0]
 80149ac:	9103      	str	r1, [sp, #12]
 80149ae:	2a00      	cmp	r2, #0
 80149b0:	db01      	blt.n	80149b6 <_svfiprintf_r+0xfa>
 80149b2:	9207      	str	r2, [sp, #28]
 80149b4:	e004      	b.n	80149c0 <_svfiprintf_r+0x104>
 80149b6:	4252      	negs	r2, r2
 80149b8:	f043 0302 	orr.w	r3, r3, #2
 80149bc:	9207      	str	r2, [sp, #28]
 80149be:	9304      	str	r3, [sp, #16]
 80149c0:	783b      	ldrb	r3, [r7, #0]
 80149c2:	2b2e      	cmp	r3, #46	; 0x2e
 80149c4:	d10c      	bne.n	80149e0 <_svfiprintf_r+0x124>
 80149c6:	787b      	ldrb	r3, [r7, #1]
 80149c8:	2b2a      	cmp	r3, #42	; 0x2a
 80149ca:	d133      	bne.n	8014a34 <_svfiprintf_r+0x178>
 80149cc:	9b03      	ldr	r3, [sp, #12]
 80149ce:	1d1a      	adds	r2, r3, #4
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	9203      	str	r2, [sp, #12]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	bfb8      	it	lt
 80149d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80149dc:	3702      	adds	r7, #2
 80149de:	9305      	str	r3, [sp, #20]
 80149e0:	4d2e      	ldr	r5, [pc, #184]	; (8014a9c <_svfiprintf_r+0x1e0>)
 80149e2:	7839      	ldrb	r1, [r7, #0]
 80149e4:	2203      	movs	r2, #3
 80149e6:	4628      	mov	r0, r5
 80149e8:	f7eb fbfa 	bl	80001e0 <memchr>
 80149ec:	b138      	cbz	r0, 80149fe <_svfiprintf_r+0x142>
 80149ee:	2340      	movs	r3, #64	; 0x40
 80149f0:	1b40      	subs	r0, r0, r5
 80149f2:	fa03 f000 	lsl.w	r0, r3, r0
 80149f6:	9b04      	ldr	r3, [sp, #16]
 80149f8:	4303      	orrs	r3, r0
 80149fa:	3701      	adds	r7, #1
 80149fc:	9304      	str	r3, [sp, #16]
 80149fe:	7839      	ldrb	r1, [r7, #0]
 8014a00:	4827      	ldr	r0, [pc, #156]	; (8014aa0 <_svfiprintf_r+0x1e4>)
 8014a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a06:	2206      	movs	r2, #6
 8014a08:	1c7e      	adds	r6, r7, #1
 8014a0a:	f7eb fbe9 	bl	80001e0 <memchr>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d038      	beq.n	8014a84 <_svfiprintf_r+0x1c8>
 8014a12:	4b24      	ldr	r3, [pc, #144]	; (8014aa4 <_svfiprintf_r+0x1e8>)
 8014a14:	bb13      	cbnz	r3, 8014a5c <_svfiprintf_r+0x1a0>
 8014a16:	9b03      	ldr	r3, [sp, #12]
 8014a18:	3307      	adds	r3, #7
 8014a1a:	f023 0307 	bic.w	r3, r3, #7
 8014a1e:	3308      	adds	r3, #8
 8014a20:	9303      	str	r3, [sp, #12]
 8014a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a24:	444b      	add	r3, r9
 8014a26:	9309      	str	r3, [sp, #36]	; 0x24
 8014a28:	e76d      	b.n	8014906 <_svfiprintf_r+0x4a>
 8014a2a:	fb05 3202 	mla	r2, r5, r2, r3
 8014a2e:	2001      	movs	r0, #1
 8014a30:	460f      	mov	r7, r1
 8014a32:	e7a6      	b.n	8014982 <_svfiprintf_r+0xc6>
 8014a34:	2300      	movs	r3, #0
 8014a36:	3701      	adds	r7, #1
 8014a38:	9305      	str	r3, [sp, #20]
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	250a      	movs	r5, #10
 8014a3e:	4638      	mov	r0, r7
 8014a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a44:	3a30      	subs	r2, #48	; 0x30
 8014a46:	2a09      	cmp	r2, #9
 8014a48:	d903      	bls.n	8014a52 <_svfiprintf_r+0x196>
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d0c8      	beq.n	80149e0 <_svfiprintf_r+0x124>
 8014a4e:	9105      	str	r1, [sp, #20]
 8014a50:	e7c6      	b.n	80149e0 <_svfiprintf_r+0x124>
 8014a52:	fb05 2101 	mla	r1, r5, r1, r2
 8014a56:	2301      	movs	r3, #1
 8014a58:	4607      	mov	r7, r0
 8014a5a:	e7f0      	b.n	8014a3e <_svfiprintf_r+0x182>
 8014a5c:	ab03      	add	r3, sp, #12
 8014a5e:	9300      	str	r3, [sp, #0]
 8014a60:	4622      	mov	r2, r4
 8014a62:	4b11      	ldr	r3, [pc, #68]	; (8014aa8 <_svfiprintf_r+0x1ec>)
 8014a64:	a904      	add	r1, sp, #16
 8014a66:	4640      	mov	r0, r8
 8014a68:	f7fc faf2 	bl	8011050 <_printf_float>
 8014a6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014a70:	4681      	mov	r9, r0
 8014a72:	d1d6      	bne.n	8014a22 <_svfiprintf_r+0x166>
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	065b      	lsls	r3, r3, #25
 8014a78:	f53f af35 	bmi.w	80148e6 <_svfiprintf_r+0x2a>
 8014a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a7e:	b01d      	add	sp, #116	; 0x74
 8014a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a84:	ab03      	add	r3, sp, #12
 8014a86:	9300      	str	r3, [sp, #0]
 8014a88:	4622      	mov	r2, r4
 8014a8a:	4b07      	ldr	r3, [pc, #28]	; (8014aa8 <_svfiprintf_r+0x1ec>)
 8014a8c:	a904      	add	r1, sp, #16
 8014a8e:	4640      	mov	r0, r8
 8014a90:	f7fc fd94 	bl	80115bc <_printf_i>
 8014a94:	e7ea      	b.n	8014a6c <_svfiprintf_r+0x1b0>
 8014a96:	bf00      	nop
 8014a98:	08015c24 	.word	0x08015c24
 8014a9c:	08015c2a 	.word	0x08015c2a
 8014aa0:	08015c2e 	.word	0x08015c2e
 8014aa4:	08011051 	.word	0x08011051
 8014aa8:	08014809 	.word	0x08014809

08014aac <__sfputc_r>:
 8014aac:	6893      	ldr	r3, [r2, #8]
 8014aae:	3b01      	subs	r3, #1
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	b410      	push	{r4}
 8014ab4:	6093      	str	r3, [r2, #8]
 8014ab6:	da08      	bge.n	8014aca <__sfputc_r+0x1e>
 8014ab8:	6994      	ldr	r4, [r2, #24]
 8014aba:	42a3      	cmp	r3, r4
 8014abc:	db01      	blt.n	8014ac2 <__sfputc_r+0x16>
 8014abe:	290a      	cmp	r1, #10
 8014ac0:	d103      	bne.n	8014aca <__sfputc_r+0x1e>
 8014ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ac6:	f000 b997 	b.w	8014df8 <__swbuf_r>
 8014aca:	6813      	ldr	r3, [r2, #0]
 8014acc:	1c58      	adds	r0, r3, #1
 8014ace:	6010      	str	r0, [r2, #0]
 8014ad0:	7019      	strb	r1, [r3, #0]
 8014ad2:	4608      	mov	r0, r1
 8014ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ad8:	4770      	bx	lr

08014ada <__sfputs_r>:
 8014ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014adc:	4606      	mov	r6, r0
 8014ade:	460f      	mov	r7, r1
 8014ae0:	4614      	mov	r4, r2
 8014ae2:	18d5      	adds	r5, r2, r3
 8014ae4:	42ac      	cmp	r4, r5
 8014ae6:	d101      	bne.n	8014aec <__sfputs_r+0x12>
 8014ae8:	2000      	movs	r0, #0
 8014aea:	e007      	b.n	8014afc <__sfputs_r+0x22>
 8014aec:	463a      	mov	r2, r7
 8014aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014af2:	4630      	mov	r0, r6
 8014af4:	f7ff ffda 	bl	8014aac <__sfputc_r>
 8014af8:	1c43      	adds	r3, r0, #1
 8014afa:	d1f3      	bne.n	8014ae4 <__sfputs_r+0xa>
 8014afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b00 <_vfiprintf_r>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	460c      	mov	r4, r1
 8014b06:	b09d      	sub	sp, #116	; 0x74
 8014b08:	4617      	mov	r7, r2
 8014b0a:	461d      	mov	r5, r3
 8014b0c:	4606      	mov	r6, r0
 8014b0e:	b118      	cbz	r0, 8014b18 <_vfiprintf_r+0x18>
 8014b10:	6983      	ldr	r3, [r0, #24]
 8014b12:	b90b      	cbnz	r3, 8014b18 <_vfiprintf_r+0x18>
 8014b14:	f7fe fde4 	bl	80136e0 <__sinit>
 8014b18:	4b7c      	ldr	r3, [pc, #496]	; (8014d0c <_vfiprintf_r+0x20c>)
 8014b1a:	429c      	cmp	r4, r3
 8014b1c:	d158      	bne.n	8014bd0 <_vfiprintf_r+0xd0>
 8014b1e:	6874      	ldr	r4, [r6, #4]
 8014b20:	89a3      	ldrh	r3, [r4, #12]
 8014b22:	0718      	lsls	r0, r3, #28
 8014b24:	d55e      	bpl.n	8014be4 <_vfiprintf_r+0xe4>
 8014b26:	6923      	ldr	r3, [r4, #16]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d05b      	beq.n	8014be4 <_vfiprintf_r+0xe4>
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b30:	2320      	movs	r3, #32
 8014b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b36:	2330      	movs	r3, #48	; 0x30
 8014b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b3c:	9503      	str	r5, [sp, #12]
 8014b3e:	f04f 0b01 	mov.w	fp, #1
 8014b42:	46b8      	mov	r8, r7
 8014b44:	4645      	mov	r5, r8
 8014b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014b4a:	b10b      	cbz	r3, 8014b50 <_vfiprintf_r+0x50>
 8014b4c:	2b25      	cmp	r3, #37	; 0x25
 8014b4e:	d154      	bne.n	8014bfa <_vfiprintf_r+0xfa>
 8014b50:	ebb8 0a07 	subs.w	sl, r8, r7
 8014b54:	d00b      	beq.n	8014b6e <_vfiprintf_r+0x6e>
 8014b56:	4653      	mov	r3, sl
 8014b58:	463a      	mov	r2, r7
 8014b5a:	4621      	mov	r1, r4
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	f7ff ffbc 	bl	8014ada <__sfputs_r>
 8014b62:	3001      	adds	r0, #1
 8014b64:	f000 80c2 	beq.w	8014cec <_vfiprintf_r+0x1ec>
 8014b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b6a:	4453      	add	r3, sl
 8014b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014b6e:	f898 3000 	ldrb.w	r3, [r8]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	f000 80ba 	beq.w	8014cec <_vfiprintf_r+0x1ec>
 8014b78:	2300      	movs	r3, #0
 8014b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b82:	9304      	str	r3, [sp, #16]
 8014b84:	9307      	str	r3, [sp, #28]
 8014b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b8c:	46a8      	mov	r8, r5
 8014b8e:	2205      	movs	r2, #5
 8014b90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014b94:	485e      	ldr	r0, [pc, #376]	; (8014d10 <_vfiprintf_r+0x210>)
 8014b96:	f7eb fb23 	bl	80001e0 <memchr>
 8014b9a:	9b04      	ldr	r3, [sp, #16]
 8014b9c:	bb78      	cbnz	r0, 8014bfe <_vfiprintf_r+0xfe>
 8014b9e:	06d9      	lsls	r1, r3, #27
 8014ba0:	bf44      	itt	mi
 8014ba2:	2220      	movmi	r2, #32
 8014ba4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014ba8:	071a      	lsls	r2, r3, #28
 8014baa:	bf44      	itt	mi
 8014bac:	222b      	movmi	r2, #43	; 0x2b
 8014bae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014bb2:	782a      	ldrb	r2, [r5, #0]
 8014bb4:	2a2a      	cmp	r2, #42	; 0x2a
 8014bb6:	d02a      	beq.n	8014c0e <_vfiprintf_r+0x10e>
 8014bb8:	9a07      	ldr	r2, [sp, #28]
 8014bba:	46a8      	mov	r8, r5
 8014bbc:	2000      	movs	r0, #0
 8014bbe:	250a      	movs	r5, #10
 8014bc0:	4641      	mov	r1, r8
 8014bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bc6:	3b30      	subs	r3, #48	; 0x30
 8014bc8:	2b09      	cmp	r3, #9
 8014bca:	d969      	bls.n	8014ca0 <_vfiprintf_r+0x1a0>
 8014bcc:	b360      	cbz	r0, 8014c28 <_vfiprintf_r+0x128>
 8014bce:	e024      	b.n	8014c1a <_vfiprintf_r+0x11a>
 8014bd0:	4b50      	ldr	r3, [pc, #320]	; (8014d14 <_vfiprintf_r+0x214>)
 8014bd2:	429c      	cmp	r4, r3
 8014bd4:	d101      	bne.n	8014bda <_vfiprintf_r+0xda>
 8014bd6:	68b4      	ldr	r4, [r6, #8]
 8014bd8:	e7a2      	b.n	8014b20 <_vfiprintf_r+0x20>
 8014bda:	4b4f      	ldr	r3, [pc, #316]	; (8014d18 <_vfiprintf_r+0x218>)
 8014bdc:	429c      	cmp	r4, r3
 8014bde:	bf08      	it	eq
 8014be0:	68f4      	ldreq	r4, [r6, #12]
 8014be2:	e79d      	b.n	8014b20 <_vfiprintf_r+0x20>
 8014be4:	4621      	mov	r1, r4
 8014be6:	4630      	mov	r0, r6
 8014be8:	f000 f978 	bl	8014edc <__swsetup_r>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d09d      	beq.n	8014b2c <_vfiprintf_r+0x2c>
 8014bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf4:	b01d      	add	sp, #116	; 0x74
 8014bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bfa:	46a8      	mov	r8, r5
 8014bfc:	e7a2      	b.n	8014b44 <_vfiprintf_r+0x44>
 8014bfe:	4a44      	ldr	r2, [pc, #272]	; (8014d10 <_vfiprintf_r+0x210>)
 8014c00:	1a80      	subs	r0, r0, r2
 8014c02:	fa0b f000 	lsl.w	r0, fp, r0
 8014c06:	4318      	orrs	r0, r3
 8014c08:	9004      	str	r0, [sp, #16]
 8014c0a:	4645      	mov	r5, r8
 8014c0c:	e7be      	b.n	8014b8c <_vfiprintf_r+0x8c>
 8014c0e:	9a03      	ldr	r2, [sp, #12]
 8014c10:	1d11      	adds	r1, r2, #4
 8014c12:	6812      	ldr	r2, [r2, #0]
 8014c14:	9103      	str	r1, [sp, #12]
 8014c16:	2a00      	cmp	r2, #0
 8014c18:	db01      	blt.n	8014c1e <_vfiprintf_r+0x11e>
 8014c1a:	9207      	str	r2, [sp, #28]
 8014c1c:	e004      	b.n	8014c28 <_vfiprintf_r+0x128>
 8014c1e:	4252      	negs	r2, r2
 8014c20:	f043 0302 	orr.w	r3, r3, #2
 8014c24:	9207      	str	r2, [sp, #28]
 8014c26:	9304      	str	r3, [sp, #16]
 8014c28:	f898 3000 	ldrb.w	r3, [r8]
 8014c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8014c2e:	d10e      	bne.n	8014c4e <_vfiprintf_r+0x14e>
 8014c30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014c34:	2b2a      	cmp	r3, #42	; 0x2a
 8014c36:	d138      	bne.n	8014caa <_vfiprintf_r+0x1aa>
 8014c38:	9b03      	ldr	r3, [sp, #12]
 8014c3a:	1d1a      	adds	r2, r3, #4
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	9203      	str	r2, [sp, #12]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	bfb8      	it	lt
 8014c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c48:	f108 0802 	add.w	r8, r8, #2
 8014c4c:	9305      	str	r3, [sp, #20]
 8014c4e:	4d33      	ldr	r5, [pc, #204]	; (8014d1c <_vfiprintf_r+0x21c>)
 8014c50:	f898 1000 	ldrb.w	r1, [r8]
 8014c54:	2203      	movs	r2, #3
 8014c56:	4628      	mov	r0, r5
 8014c58:	f7eb fac2 	bl	80001e0 <memchr>
 8014c5c:	b140      	cbz	r0, 8014c70 <_vfiprintf_r+0x170>
 8014c5e:	2340      	movs	r3, #64	; 0x40
 8014c60:	1b40      	subs	r0, r0, r5
 8014c62:	fa03 f000 	lsl.w	r0, r3, r0
 8014c66:	9b04      	ldr	r3, [sp, #16]
 8014c68:	4303      	orrs	r3, r0
 8014c6a:	f108 0801 	add.w	r8, r8, #1
 8014c6e:	9304      	str	r3, [sp, #16]
 8014c70:	f898 1000 	ldrb.w	r1, [r8]
 8014c74:	482a      	ldr	r0, [pc, #168]	; (8014d20 <_vfiprintf_r+0x220>)
 8014c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c7a:	2206      	movs	r2, #6
 8014c7c:	f108 0701 	add.w	r7, r8, #1
 8014c80:	f7eb faae 	bl	80001e0 <memchr>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d037      	beq.n	8014cf8 <_vfiprintf_r+0x1f8>
 8014c88:	4b26      	ldr	r3, [pc, #152]	; (8014d24 <_vfiprintf_r+0x224>)
 8014c8a:	bb1b      	cbnz	r3, 8014cd4 <_vfiprintf_r+0x1d4>
 8014c8c:	9b03      	ldr	r3, [sp, #12]
 8014c8e:	3307      	adds	r3, #7
 8014c90:	f023 0307 	bic.w	r3, r3, #7
 8014c94:	3308      	adds	r3, #8
 8014c96:	9303      	str	r3, [sp, #12]
 8014c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9a:	444b      	add	r3, r9
 8014c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c9e:	e750      	b.n	8014b42 <_vfiprintf_r+0x42>
 8014ca0:	fb05 3202 	mla	r2, r5, r2, r3
 8014ca4:	2001      	movs	r0, #1
 8014ca6:	4688      	mov	r8, r1
 8014ca8:	e78a      	b.n	8014bc0 <_vfiprintf_r+0xc0>
 8014caa:	2300      	movs	r3, #0
 8014cac:	f108 0801 	add.w	r8, r8, #1
 8014cb0:	9305      	str	r3, [sp, #20]
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	250a      	movs	r5, #10
 8014cb6:	4640      	mov	r0, r8
 8014cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cbc:	3a30      	subs	r2, #48	; 0x30
 8014cbe:	2a09      	cmp	r2, #9
 8014cc0:	d903      	bls.n	8014cca <_vfiprintf_r+0x1ca>
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d0c3      	beq.n	8014c4e <_vfiprintf_r+0x14e>
 8014cc6:	9105      	str	r1, [sp, #20]
 8014cc8:	e7c1      	b.n	8014c4e <_vfiprintf_r+0x14e>
 8014cca:	fb05 2101 	mla	r1, r5, r1, r2
 8014cce:	2301      	movs	r3, #1
 8014cd0:	4680      	mov	r8, r0
 8014cd2:	e7f0      	b.n	8014cb6 <_vfiprintf_r+0x1b6>
 8014cd4:	ab03      	add	r3, sp, #12
 8014cd6:	9300      	str	r3, [sp, #0]
 8014cd8:	4622      	mov	r2, r4
 8014cda:	4b13      	ldr	r3, [pc, #76]	; (8014d28 <_vfiprintf_r+0x228>)
 8014cdc:	a904      	add	r1, sp, #16
 8014cde:	4630      	mov	r0, r6
 8014ce0:	f7fc f9b6 	bl	8011050 <_printf_float>
 8014ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014ce8:	4681      	mov	r9, r0
 8014cea:	d1d5      	bne.n	8014c98 <_vfiprintf_r+0x198>
 8014cec:	89a3      	ldrh	r3, [r4, #12]
 8014cee:	065b      	lsls	r3, r3, #25
 8014cf0:	f53f af7e 	bmi.w	8014bf0 <_vfiprintf_r+0xf0>
 8014cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cf6:	e77d      	b.n	8014bf4 <_vfiprintf_r+0xf4>
 8014cf8:	ab03      	add	r3, sp, #12
 8014cfa:	9300      	str	r3, [sp, #0]
 8014cfc:	4622      	mov	r2, r4
 8014cfe:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <_vfiprintf_r+0x228>)
 8014d00:	a904      	add	r1, sp, #16
 8014d02:	4630      	mov	r0, r6
 8014d04:	f7fc fc5a 	bl	80115bc <_printf_i>
 8014d08:	e7ec      	b.n	8014ce4 <_vfiprintf_r+0x1e4>
 8014d0a:	bf00      	nop
 8014d0c:	08015ad8 	.word	0x08015ad8
 8014d10:	08015c24 	.word	0x08015c24
 8014d14:	08015af8 	.word	0x08015af8
 8014d18:	08015ab8 	.word	0x08015ab8
 8014d1c:	08015c2a 	.word	0x08015c2a
 8014d20:	08015c2e 	.word	0x08015c2e
 8014d24:	08011051 	.word	0x08011051
 8014d28:	08014adb 	.word	0x08014adb

08014d2c <_sbrk_r>:
 8014d2c:	b538      	push	{r3, r4, r5, lr}
 8014d2e:	4c06      	ldr	r4, [pc, #24]	; (8014d48 <_sbrk_r+0x1c>)
 8014d30:	2300      	movs	r3, #0
 8014d32:	4605      	mov	r5, r0
 8014d34:	4608      	mov	r0, r1
 8014d36:	6023      	str	r3, [r4, #0]
 8014d38:	f7ed f98e 	bl	8002058 <_sbrk>
 8014d3c:	1c43      	adds	r3, r0, #1
 8014d3e:	d102      	bne.n	8014d46 <_sbrk_r+0x1a>
 8014d40:	6823      	ldr	r3, [r4, #0]
 8014d42:	b103      	cbz	r3, 8014d46 <_sbrk_r+0x1a>
 8014d44:	602b      	str	r3, [r5, #0]
 8014d46:	bd38      	pop	{r3, r4, r5, pc}
 8014d48:	200049a4 	.word	0x200049a4

08014d4c <__sread>:
 8014d4c:	b510      	push	{r4, lr}
 8014d4e:	460c      	mov	r4, r1
 8014d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d54:	f000 faa8 	bl	80152a8 <_read_r>
 8014d58:	2800      	cmp	r0, #0
 8014d5a:	bfab      	itete	ge
 8014d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8014d60:	181b      	addge	r3, r3, r0
 8014d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d66:	bfac      	ite	ge
 8014d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d6a:	81a3      	strhlt	r3, [r4, #12]
 8014d6c:	bd10      	pop	{r4, pc}

08014d6e <__swrite>:
 8014d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d72:	461f      	mov	r7, r3
 8014d74:	898b      	ldrh	r3, [r1, #12]
 8014d76:	05db      	lsls	r3, r3, #23
 8014d78:	4605      	mov	r5, r0
 8014d7a:	460c      	mov	r4, r1
 8014d7c:	4616      	mov	r6, r2
 8014d7e:	d505      	bpl.n	8014d8c <__swrite+0x1e>
 8014d80:	2302      	movs	r3, #2
 8014d82:	2200      	movs	r2, #0
 8014d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d88:	f000 f9d6 	bl	8015138 <_lseek_r>
 8014d8c:	89a3      	ldrh	r3, [r4, #12]
 8014d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d96:	81a3      	strh	r3, [r4, #12]
 8014d98:	4632      	mov	r2, r6
 8014d9a:	463b      	mov	r3, r7
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014da2:	f000 b889 	b.w	8014eb8 <_write_r>

08014da6 <__sseek>:
 8014da6:	b510      	push	{r4, lr}
 8014da8:	460c      	mov	r4, r1
 8014daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dae:	f000 f9c3 	bl	8015138 <_lseek_r>
 8014db2:	1c43      	adds	r3, r0, #1
 8014db4:	89a3      	ldrh	r3, [r4, #12]
 8014db6:	bf15      	itete	ne
 8014db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014dc2:	81a3      	strheq	r3, [r4, #12]
 8014dc4:	bf18      	it	ne
 8014dc6:	81a3      	strhne	r3, [r4, #12]
 8014dc8:	bd10      	pop	{r4, pc}

08014dca <__sclose>:
 8014dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dce:	f000 b8f3 	b.w	8014fb8 <_close_r>

08014dd2 <strncmp>:
 8014dd2:	b510      	push	{r4, lr}
 8014dd4:	b16a      	cbz	r2, 8014df2 <strncmp+0x20>
 8014dd6:	3901      	subs	r1, #1
 8014dd8:	1884      	adds	r4, r0, r2
 8014dda:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014dde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d103      	bne.n	8014dee <strncmp+0x1c>
 8014de6:	42a0      	cmp	r0, r4
 8014de8:	d001      	beq.n	8014dee <strncmp+0x1c>
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1f5      	bne.n	8014dda <strncmp+0x8>
 8014dee:	1a98      	subs	r0, r3, r2
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	4610      	mov	r0, r2
 8014df4:	e7fc      	b.n	8014df0 <strncmp+0x1e>
	...

08014df8 <__swbuf_r>:
 8014df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dfa:	460e      	mov	r6, r1
 8014dfc:	4614      	mov	r4, r2
 8014dfe:	4605      	mov	r5, r0
 8014e00:	b118      	cbz	r0, 8014e0a <__swbuf_r+0x12>
 8014e02:	6983      	ldr	r3, [r0, #24]
 8014e04:	b90b      	cbnz	r3, 8014e0a <__swbuf_r+0x12>
 8014e06:	f7fe fc6b 	bl	80136e0 <__sinit>
 8014e0a:	4b21      	ldr	r3, [pc, #132]	; (8014e90 <__swbuf_r+0x98>)
 8014e0c:	429c      	cmp	r4, r3
 8014e0e:	d12a      	bne.n	8014e66 <__swbuf_r+0x6e>
 8014e10:	686c      	ldr	r4, [r5, #4]
 8014e12:	69a3      	ldr	r3, [r4, #24]
 8014e14:	60a3      	str	r3, [r4, #8]
 8014e16:	89a3      	ldrh	r3, [r4, #12]
 8014e18:	071a      	lsls	r2, r3, #28
 8014e1a:	d52e      	bpl.n	8014e7a <__swbuf_r+0x82>
 8014e1c:	6923      	ldr	r3, [r4, #16]
 8014e1e:	b363      	cbz	r3, 8014e7a <__swbuf_r+0x82>
 8014e20:	6923      	ldr	r3, [r4, #16]
 8014e22:	6820      	ldr	r0, [r4, #0]
 8014e24:	1ac0      	subs	r0, r0, r3
 8014e26:	6963      	ldr	r3, [r4, #20]
 8014e28:	b2f6      	uxtb	r6, r6
 8014e2a:	4283      	cmp	r3, r0
 8014e2c:	4637      	mov	r7, r6
 8014e2e:	dc04      	bgt.n	8014e3a <__swbuf_r+0x42>
 8014e30:	4621      	mov	r1, r4
 8014e32:	4628      	mov	r0, r5
 8014e34:	f000 f956 	bl	80150e4 <_fflush_r>
 8014e38:	bb28      	cbnz	r0, 8014e86 <__swbuf_r+0x8e>
 8014e3a:	68a3      	ldr	r3, [r4, #8]
 8014e3c:	3b01      	subs	r3, #1
 8014e3e:	60a3      	str	r3, [r4, #8]
 8014e40:	6823      	ldr	r3, [r4, #0]
 8014e42:	1c5a      	adds	r2, r3, #1
 8014e44:	6022      	str	r2, [r4, #0]
 8014e46:	701e      	strb	r6, [r3, #0]
 8014e48:	6963      	ldr	r3, [r4, #20]
 8014e4a:	3001      	adds	r0, #1
 8014e4c:	4283      	cmp	r3, r0
 8014e4e:	d004      	beq.n	8014e5a <__swbuf_r+0x62>
 8014e50:	89a3      	ldrh	r3, [r4, #12]
 8014e52:	07db      	lsls	r3, r3, #31
 8014e54:	d519      	bpl.n	8014e8a <__swbuf_r+0x92>
 8014e56:	2e0a      	cmp	r6, #10
 8014e58:	d117      	bne.n	8014e8a <__swbuf_r+0x92>
 8014e5a:	4621      	mov	r1, r4
 8014e5c:	4628      	mov	r0, r5
 8014e5e:	f000 f941 	bl	80150e4 <_fflush_r>
 8014e62:	b190      	cbz	r0, 8014e8a <__swbuf_r+0x92>
 8014e64:	e00f      	b.n	8014e86 <__swbuf_r+0x8e>
 8014e66:	4b0b      	ldr	r3, [pc, #44]	; (8014e94 <__swbuf_r+0x9c>)
 8014e68:	429c      	cmp	r4, r3
 8014e6a:	d101      	bne.n	8014e70 <__swbuf_r+0x78>
 8014e6c:	68ac      	ldr	r4, [r5, #8]
 8014e6e:	e7d0      	b.n	8014e12 <__swbuf_r+0x1a>
 8014e70:	4b09      	ldr	r3, [pc, #36]	; (8014e98 <__swbuf_r+0xa0>)
 8014e72:	429c      	cmp	r4, r3
 8014e74:	bf08      	it	eq
 8014e76:	68ec      	ldreq	r4, [r5, #12]
 8014e78:	e7cb      	b.n	8014e12 <__swbuf_r+0x1a>
 8014e7a:	4621      	mov	r1, r4
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	f000 f82d 	bl	8014edc <__swsetup_r>
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d0cc      	beq.n	8014e20 <__swbuf_r+0x28>
 8014e86:	f04f 37ff 	mov.w	r7, #4294967295
 8014e8a:	4638      	mov	r0, r7
 8014e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	08015ad8 	.word	0x08015ad8
 8014e94:	08015af8 	.word	0x08015af8
 8014e98:	08015ab8 	.word	0x08015ab8

08014e9c <__ascii_wctomb>:
 8014e9c:	b149      	cbz	r1, 8014eb2 <__ascii_wctomb+0x16>
 8014e9e:	2aff      	cmp	r2, #255	; 0xff
 8014ea0:	bf85      	ittet	hi
 8014ea2:	238a      	movhi	r3, #138	; 0x8a
 8014ea4:	6003      	strhi	r3, [r0, #0]
 8014ea6:	700a      	strbls	r2, [r1, #0]
 8014ea8:	f04f 30ff 	movhi.w	r0, #4294967295
 8014eac:	bf98      	it	ls
 8014eae:	2001      	movls	r0, #1
 8014eb0:	4770      	bx	lr
 8014eb2:	4608      	mov	r0, r1
 8014eb4:	4770      	bx	lr
	...

08014eb8 <_write_r>:
 8014eb8:	b538      	push	{r3, r4, r5, lr}
 8014eba:	4c07      	ldr	r4, [pc, #28]	; (8014ed8 <_write_r+0x20>)
 8014ebc:	4605      	mov	r5, r0
 8014ebe:	4608      	mov	r0, r1
 8014ec0:	4611      	mov	r1, r2
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	6022      	str	r2, [r4, #0]
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	f7ed f875 	bl	8001fb6 <_write>
 8014ecc:	1c43      	adds	r3, r0, #1
 8014ece:	d102      	bne.n	8014ed6 <_write_r+0x1e>
 8014ed0:	6823      	ldr	r3, [r4, #0]
 8014ed2:	b103      	cbz	r3, 8014ed6 <_write_r+0x1e>
 8014ed4:	602b      	str	r3, [r5, #0]
 8014ed6:	bd38      	pop	{r3, r4, r5, pc}
 8014ed8:	200049a4 	.word	0x200049a4

08014edc <__swsetup_r>:
 8014edc:	4b32      	ldr	r3, [pc, #200]	; (8014fa8 <__swsetup_r+0xcc>)
 8014ede:	b570      	push	{r4, r5, r6, lr}
 8014ee0:	681d      	ldr	r5, [r3, #0]
 8014ee2:	4606      	mov	r6, r0
 8014ee4:	460c      	mov	r4, r1
 8014ee6:	b125      	cbz	r5, 8014ef2 <__swsetup_r+0x16>
 8014ee8:	69ab      	ldr	r3, [r5, #24]
 8014eea:	b913      	cbnz	r3, 8014ef2 <__swsetup_r+0x16>
 8014eec:	4628      	mov	r0, r5
 8014eee:	f7fe fbf7 	bl	80136e0 <__sinit>
 8014ef2:	4b2e      	ldr	r3, [pc, #184]	; (8014fac <__swsetup_r+0xd0>)
 8014ef4:	429c      	cmp	r4, r3
 8014ef6:	d10f      	bne.n	8014f18 <__swsetup_r+0x3c>
 8014ef8:	686c      	ldr	r4, [r5, #4]
 8014efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014efe:	b29a      	uxth	r2, r3
 8014f00:	0715      	lsls	r5, r2, #28
 8014f02:	d42c      	bmi.n	8014f5e <__swsetup_r+0x82>
 8014f04:	06d0      	lsls	r0, r2, #27
 8014f06:	d411      	bmi.n	8014f2c <__swsetup_r+0x50>
 8014f08:	2209      	movs	r2, #9
 8014f0a:	6032      	str	r2, [r6, #0]
 8014f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f10:	81a3      	strh	r3, [r4, #12]
 8014f12:	f04f 30ff 	mov.w	r0, #4294967295
 8014f16:	e03e      	b.n	8014f96 <__swsetup_r+0xba>
 8014f18:	4b25      	ldr	r3, [pc, #148]	; (8014fb0 <__swsetup_r+0xd4>)
 8014f1a:	429c      	cmp	r4, r3
 8014f1c:	d101      	bne.n	8014f22 <__swsetup_r+0x46>
 8014f1e:	68ac      	ldr	r4, [r5, #8]
 8014f20:	e7eb      	b.n	8014efa <__swsetup_r+0x1e>
 8014f22:	4b24      	ldr	r3, [pc, #144]	; (8014fb4 <__swsetup_r+0xd8>)
 8014f24:	429c      	cmp	r4, r3
 8014f26:	bf08      	it	eq
 8014f28:	68ec      	ldreq	r4, [r5, #12]
 8014f2a:	e7e6      	b.n	8014efa <__swsetup_r+0x1e>
 8014f2c:	0751      	lsls	r1, r2, #29
 8014f2e:	d512      	bpl.n	8014f56 <__swsetup_r+0x7a>
 8014f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f32:	b141      	cbz	r1, 8014f46 <__swsetup_r+0x6a>
 8014f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f38:	4299      	cmp	r1, r3
 8014f3a:	d002      	beq.n	8014f42 <__swsetup_r+0x66>
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	f7ff fbbb 	bl	80146b8 <_free_r>
 8014f42:	2300      	movs	r3, #0
 8014f44:	6363      	str	r3, [r4, #52]	; 0x34
 8014f46:	89a3      	ldrh	r3, [r4, #12]
 8014f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f4c:	81a3      	strh	r3, [r4, #12]
 8014f4e:	2300      	movs	r3, #0
 8014f50:	6063      	str	r3, [r4, #4]
 8014f52:	6923      	ldr	r3, [r4, #16]
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	89a3      	ldrh	r3, [r4, #12]
 8014f58:	f043 0308 	orr.w	r3, r3, #8
 8014f5c:	81a3      	strh	r3, [r4, #12]
 8014f5e:	6923      	ldr	r3, [r4, #16]
 8014f60:	b94b      	cbnz	r3, 8014f76 <__swsetup_r+0x9a>
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f6c:	d003      	beq.n	8014f76 <__swsetup_r+0x9a>
 8014f6e:	4621      	mov	r1, r4
 8014f70:	4630      	mov	r0, r6
 8014f72:	f000 f917 	bl	80151a4 <__smakebuf_r>
 8014f76:	89a2      	ldrh	r2, [r4, #12]
 8014f78:	f012 0301 	ands.w	r3, r2, #1
 8014f7c:	d00c      	beq.n	8014f98 <__swsetup_r+0xbc>
 8014f7e:	2300      	movs	r3, #0
 8014f80:	60a3      	str	r3, [r4, #8]
 8014f82:	6963      	ldr	r3, [r4, #20]
 8014f84:	425b      	negs	r3, r3
 8014f86:	61a3      	str	r3, [r4, #24]
 8014f88:	6923      	ldr	r3, [r4, #16]
 8014f8a:	b953      	cbnz	r3, 8014fa2 <__swsetup_r+0xc6>
 8014f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014f94:	d1ba      	bne.n	8014f0c <__swsetup_r+0x30>
 8014f96:	bd70      	pop	{r4, r5, r6, pc}
 8014f98:	0792      	lsls	r2, r2, #30
 8014f9a:	bf58      	it	pl
 8014f9c:	6963      	ldrpl	r3, [r4, #20]
 8014f9e:	60a3      	str	r3, [r4, #8]
 8014fa0:	e7f2      	b.n	8014f88 <__swsetup_r+0xac>
 8014fa2:	2000      	movs	r0, #0
 8014fa4:	e7f7      	b.n	8014f96 <__swsetup_r+0xba>
 8014fa6:	bf00      	nop
 8014fa8:	20000010 	.word	0x20000010
 8014fac:	08015ad8 	.word	0x08015ad8
 8014fb0:	08015af8 	.word	0x08015af8
 8014fb4:	08015ab8 	.word	0x08015ab8

08014fb8 <_close_r>:
 8014fb8:	b538      	push	{r3, r4, r5, lr}
 8014fba:	4c06      	ldr	r4, [pc, #24]	; (8014fd4 <_close_r+0x1c>)
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	4605      	mov	r5, r0
 8014fc0:	4608      	mov	r0, r1
 8014fc2:	6023      	str	r3, [r4, #0]
 8014fc4:	f7ed f813 	bl	8001fee <_close>
 8014fc8:	1c43      	adds	r3, r0, #1
 8014fca:	d102      	bne.n	8014fd2 <_close_r+0x1a>
 8014fcc:	6823      	ldr	r3, [r4, #0]
 8014fce:	b103      	cbz	r3, 8014fd2 <_close_r+0x1a>
 8014fd0:	602b      	str	r3, [r5, #0]
 8014fd2:	bd38      	pop	{r3, r4, r5, pc}
 8014fd4:	200049a4 	.word	0x200049a4

08014fd8 <__sflush_r>:
 8014fd8:	898a      	ldrh	r2, [r1, #12]
 8014fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fde:	4605      	mov	r5, r0
 8014fe0:	0710      	lsls	r0, r2, #28
 8014fe2:	460c      	mov	r4, r1
 8014fe4:	d458      	bmi.n	8015098 <__sflush_r+0xc0>
 8014fe6:	684b      	ldr	r3, [r1, #4]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	dc05      	bgt.n	8014ff8 <__sflush_r+0x20>
 8014fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	dc02      	bgt.n	8014ff8 <__sflush_r+0x20>
 8014ff2:	2000      	movs	r0, #0
 8014ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ffa:	2e00      	cmp	r6, #0
 8014ffc:	d0f9      	beq.n	8014ff2 <__sflush_r+0x1a>
 8014ffe:	2300      	movs	r3, #0
 8015000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015004:	682f      	ldr	r7, [r5, #0]
 8015006:	6a21      	ldr	r1, [r4, #32]
 8015008:	602b      	str	r3, [r5, #0]
 801500a:	d032      	beq.n	8015072 <__sflush_r+0x9a>
 801500c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801500e:	89a3      	ldrh	r3, [r4, #12]
 8015010:	075a      	lsls	r2, r3, #29
 8015012:	d505      	bpl.n	8015020 <__sflush_r+0x48>
 8015014:	6863      	ldr	r3, [r4, #4]
 8015016:	1ac0      	subs	r0, r0, r3
 8015018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801501a:	b10b      	cbz	r3, 8015020 <__sflush_r+0x48>
 801501c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801501e:	1ac0      	subs	r0, r0, r3
 8015020:	2300      	movs	r3, #0
 8015022:	4602      	mov	r2, r0
 8015024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015026:	6a21      	ldr	r1, [r4, #32]
 8015028:	4628      	mov	r0, r5
 801502a:	47b0      	blx	r6
 801502c:	1c43      	adds	r3, r0, #1
 801502e:	89a3      	ldrh	r3, [r4, #12]
 8015030:	d106      	bne.n	8015040 <__sflush_r+0x68>
 8015032:	6829      	ldr	r1, [r5, #0]
 8015034:	291d      	cmp	r1, #29
 8015036:	d848      	bhi.n	80150ca <__sflush_r+0xf2>
 8015038:	4a29      	ldr	r2, [pc, #164]	; (80150e0 <__sflush_r+0x108>)
 801503a:	40ca      	lsrs	r2, r1
 801503c:	07d6      	lsls	r6, r2, #31
 801503e:	d544      	bpl.n	80150ca <__sflush_r+0xf2>
 8015040:	2200      	movs	r2, #0
 8015042:	6062      	str	r2, [r4, #4]
 8015044:	04d9      	lsls	r1, r3, #19
 8015046:	6922      	ldr	r2, [r4, #16]
 8015048:	6022      	str	r2, [r4, #0]
 801504a:	d504      	bpl.n	8015056 <__sflush_r+0x7e>
 801504c:	1c42      	adds	r2, r0, #1
 801504e:	d101      	bne.n	8015054 <__sflush_r+0x7c>
 8015050:	682b      	ldr	r3, [r5, #0]
 8015052:	b903      	cbnz	r3, 8015056 <__sflush_r+0x7e>
 8015054:	6560      	str	r0, [r4, #84]	; 0x54
 8015056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015058:	602f      	str	r7, [r5, #0]
 801505a:	2900      	cmp	r1, #0
 801505c:	d0c9      	beq.n	8014ff2 <__sflush_r+0x1a>
 801505e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015062:	4299      	cmp	r1, r3
 8015064:	d002      	beq.n	801506c <__sflush_r+0x94>
 8015066:	4628      	mov	r0, r5
 8015068:	f7ff fb26 	bl	80146b8 <_free_r>
 801506c:	2000      	movs	r0, #0
 801506e:	6360      	str	r0, [r4, #52]	; 0x34
 8015070:	e7c0      	b.n	8014ff4 <__sflush_r+0x1c>
 8015072:	2301      	movs	r3, #1
 8015074:	4628      	mov	r0, r5
 8015076:	47b0      	blx	r6
 8015078:	1c41      	adds	r1, r0, #1
 801507a:	d1c8      	bne.n	801500e <__sflush_r+0x36>
 801507c:	682b      	ldr	r3, [r5, #0]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d0c5      	beq.n	801500e <__sflush_r+0x36>
 8015082:	2b1d      	cmp	r3, #29
 8015084:	d001      	beq.n	801508a <__sflush_r+0xb2>
 8015086:	2b16      	cmp	r3, #22
 8015088:	d101      	bne.n	801508e <__sflush_r+0xb6>
 801508a:	602f      	str	r7, [r5, #0]
 801508c:	e7b1      	b.n	8014ff2 <__sflush_r+0x1a>
 801508e:	89a3      	ldrh	r3, [r4, #12]
 8015090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015094:	81a3      	strh	r3, [r4, #12]
 8015096:	e7ad      	b.n	8014ff4 <__sflush_r+0x1c>
 8015098:	690f      	ldr	r7, [r1, #16]
 801509a:	2f00      	cmp	r7, #0
 801509c:	d0a9      	beq.n	8014ff2 <__sflush_r+0x1a>
 801509e:	0793      	lsls	r3, r2, #30
 80150a0:	680e      	ldr	r6, [r1, #0]
 80150a2:	bf08      	it	eq
 80150a4:	694b      	ldreq	r3, [r1, #20]
 80150a6:	600f      	str	r7, [r1, #0]
 80150a8:	bf18      	it	ne
 80150aa:	2300      	movne	r3, #0
 80150ac:	eba6 0807 	sub.w	r8, r6, r7
 80150b0:	608b      	str	r3, [r1, #8]
 80150b2:	f1b8 0f00 	cmp.w	r8, #0
 80150b6:	dd9c      	ble.n	8014ff2 <__sflush_r+0x1a>
 80150b8:	4643      	mov	r3, r8
 80150ba:	463a      	mov	r2, r7
 80150bc:	6a21      	ldr	r1, [r4, #32]
 80150be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80150c0:	4628      	mov	r0, r5
 80150c2:	47b0      	blx	r6
 80150c4:	2800      	cmp	r0, #0
 80150c6:	dc06      	bgt.n	80150d6 <__sflush_r+0xfe>
 80150c8:	89a3      	ldrh	r3, [r4, #12]
 80150ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150ce:	81a3      	strh	r3, [r4, #12]
 80150d0:	f04f 30ff 	mov.w	r0, #4294967295
 80150d4:	e78e      	b.n	8014ff4 <__sflush_r+0x1c>
 80150d6:	4407      	add	r7, r0
 80150d8:	eba8 0800 	sub.w	r8, r8, r0
 80150dc:	e7e9      	b.n	80150b2 <__sflush_r+0xda>
 80150de:	bf00      	nop
 80150e0:	20400001 	.word	0x20400001

080150e4 <_fflush_r>:
 80150e4:	b538      	push	{r3, r4, r5, lr}
 80150e6:	690b      	ldr	r3, [r1, #16]
 80150e8:	4605      	mov	r5, r0
 80150ea:	460c      	mov	r4, r1
 80150ec:	b1db      	cbz	r3, 8015126 <_fflush_r+0x42>
 80150ee:	b118      	cbz	r0, 80150f8 <_fflush_r+0x14>
 80150f0:	6983      	ldr	r3, [r0, #24]
 80150f2:	b90b      	cbnz	r3, 80150f8 <_fflush_r+0x14>
 80150f4:	f7fe faf4 	bl	80136e0 <__sinit>
 80150f8:	4b0c      	ldr	r3, [pc, #48]	; (801512c <_fflush_r+0x48>)
 80150fa:	429c      	cmp	r4, r3
 80150fc:	d109      	bne.n	8015112 <_fflush_r+0x2e>
 80150fe:	686c      	ldr	r4, [r5, #4]
 8015100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015104:	b17b      	cbz	r3, 8015126 <_fflush_r+0x42>
 8015106:	4621      	mov	r1, r4
 8015108:	4628      	mov	r0, r5
 801510a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801510e:	f7ff bf63 	b.w	8014fd8 <__sflush_r>
 8015112:	4b07      	ldr	r3, [pc, #28]	; (8015130 <_fflush_r+0x4c>)
 8015114:	429c      	cmp	r4, r3
 8015116:	d101      	bne.n	801511c <_fflush_r+0x38>
 8015118:	68ac      	ldr	r4, [r5, #8]
 801511a:	e7f1      	b.n	8015100 <_fflush_r+0x1c>
 801511c:	4b05      	ldr	r3, [pc, #20]	; (8015134 <_fflush_r+0x50>)
 801511e:	429c      	cmp	r4, r3
 8015120:	bf08      	it	eq
 8015122:	68ec      	ldreq	r4, [r5, #12]
 8015124:	e7ec      	b.n	8015100 <_fflush_r+0x1c>
 8015126:	2000      	movs	r0, #0
 8015128:	bd38      	pop	{r3, r4, r5, pc}
 801512a:	bf00      	nop
 801512c:	08015ad8 	.word	0x08015ad8
 8015130:	08015af8 	.word	0x08015af8
 8015134:	08015ab8 	.word	0x08015ab8

08015138 <_lseek_r>:
 8015138:	b538      	push	{r3, r4, r5, lr}
 801513a:	4c07      	ldr	r4, [pc, #28]	; (8015158 <_lseek_r+0x20>)
 801513c:	4605      	mov	r5, r0
 801513e:	4608      	mov	r0, r1
 8015140:	4611      	mov	r1, r2
 8015142:	2200      	movs	r2, #0
 8015144:	6022      	str	r2, [r4, #0]
 8015146:	461a      	mov	r2, r3
 8015148:	f7ec ff78 	bl	800203c <_lseek>
 801514c:	1c43      	adds	r3, r0, #1
 801514e:	d102      	bne.n	8015156 <_lseek_r+0x1e>
 8015150:	6823      	ldr	r3, [r4, #0]
 8015152:	b103      	cbz	r3, 8015156 <_lseek_r+0x1e>
 8015154:	602b      	str	r3, [r5, #0]
 8015156:	bd38      	pop	{r3, r4, r5, pc}
 8015158:	200049a4 	.word	0x200049a4

0801515c <__swhatbuf_r>:
 801515c:	b570      	push	{r4, r5, r6, lr}
 801515e:	460e      	mov	r6, r1
 8015160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015164:	2900      	cmp	r1, #0
 8015166:	b096      	sub	sp, #88	; 0x58
 8015168:	4614      	mov	r4, r2
 801516a:	461d      	mov	r5, r3
 801516c:	da07      	bge.n	801517e <__swhatbuf_r+0x22>
 801516e:	2300      	movs	r3, #0
 8015170:	602b      	str	r3, [r5, #0]
 8015172:	89b3      	ldrh	r3, [r6, #12]
 8015174:	061a      	lsls	r2, r3, #24
 8015176:	d410      	bmi.n	801519a <__swhatbuf_r+0x3e>
 8015178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801517c:	e00e      	b.n	801519c <__swhatbuf_r+0x40>
 801517e:	466a      	mov	r2, sp
 8015180:	f000 f8a4 	bl	80152cc <_fstat_r>
 8015184:	2800      	cmp	r0, #0
 8015186:	dbf2      	blt.n	801516e <__swhatbuf_r+0x12>
 8015188:	9a01      	ldr	r2, [sp, #4]
 801518a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801518e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015192:	425a      	negs	r2, r3
 8015194:	415a      	adcs	r2, r3
 8015196:	602a      	str	r2, [r5, #0]
 8015198:	e7ee      	b.n	8015178 <__swhatbuf_r+0x1c>
 801519a:	2340      	movs	r3, #64	; 0x40
 801519c:	2000      	movs	r0, #0
 801519e:	6023      	str	r3, [r4, #0]
 80151a0:	b016      	add	sp, #88	; 0x58
 80151a2:	bd70      	pop	{r4, r5, r6, pc}

080151a4 <__smakebuf_r>:
 80151a4:	898b      	ldrh	r3, [r1, #12]
 80151a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151a8:	079d      	lsls	r5, r3, #30
 80151aa:	4606      	mov	r6, r0
 80151ac:	460c      	mov	r4, r1
 80151ae:	d507      	bpl.n	80151c0 <__smakebuf_r+0x1c>
 80151b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80151b4:	6023      	str	r3, [r4, #0]
 80151b6:	6123      	str	r3, [r4, #16]
 80151b8:	2301      	movs	r3, #1
 80151ba:	6163      	str	r3, [r4, #20]
 80151bc:	b002      	add	sp, #8
 80151be:	bd70      	pop	{r4, r5, r6, pc}
 80151c0:	ab01      	add	r3, sp, #4
 80151c2:	466a      	mov	r2, sp
 80151c4:	f7ff ffca 	bl	801515c <__swhatbuf_r>
 80151c8:	9900      	ldr	r1, [sp, #0]
 80151ca:	4605      	mov	r5, r0
 80151cc:	4630      	mov	r0, r6
 80151ce:	f7ff fac1 	bl	8014754 <_malloc_r>
 80151d2:	b948      	cbnz	r0, 80151e8 <__smakebuf_r+0x44>
 80151d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151d8:	059a      	lsls	r2, r3, #22
 80151da:	d4ef      	bmi.n	80151bc <__smakebuf_r+0x18>
 80151dc:	f023 0303 	bic.w	r3, r3, #3
 80151e0:	f043 0302 	orr.w	r3, r3, #2
 80151e4:	81a3      	strh	r3, [r4, #12]
 80151e6:	e7e3      	b.n	80151b0 <__smakebuf_r+0xc>
 80151e8:	4b0d      	ldr	r3, [pc, #52]	; (8015220 <__smakebuf_r+0x7c>)
 80151ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80151ec:	89a3      	ldrh	r3, [r4, #12]
 80151ee:	6020      	str	r0, [r4, #0]
 80151f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151f4:	81a3      	strh	r3, [r4, #12]
 80151f6:	9b00      	ldr	r3, [sp, #0]
 80151f8:	6163      	str	r3, [r4, #20]
 80151fa:	9b01      	ldr	r3, [sp, #4]
 80151fc:	6120      	str	r0, [r4, #16]
 80151fe:	b15b      	cbz	r3, 8015218 <__smakebuf_r+0x74>
 8015200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015204:	4630      	mov	r0, r6
 8015206:	f000 f873 	bl	80152f0 <_isatty_r>
 801520a:	b128      	cbz	r0, 8015218 <__smakebuf_r+0x74>
 801520c:	89a3      	ldrh	r3, [r4, #12]
 801520e:	f023 0303 	bic.w	r3, r3, #3
 8015212:	f043 0301 	orr.w	r3, r3, #1
 8015216:	81a3      	strh	r3, [r4, #12]
 8015218:	89a3      	ldrh	r3, [r4, #12]
 801521a:	431d      	orrs	r5, r3
 801521c:	81a5      	strh	r5, [r4, #12]
 801521e:	e7cd      	b.n	80151bc <__smakebuf_r+0x18>
 8015220:	080136a9 	.word	0x080136a9

08015224 <memmove>:
 8015224:	4288      	cmp	r0, r1
 8015226:	b510      	push	{r4, lr}
 8015228:	eb01 0302 	add.w	r3, r1, r2
 801522c:	d807      	bhi.n	801523e <memmove+0x1a>
 801522e:	1e42      	subs	r2, r0, #1
 8015230:	4299      	cmp	r1, r3
 8015232:	d00a      	beq.n	801524a <memmove+0x26>
 8015234:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015238:	f802 4f01 	strb.w	r4, [r2, #1]!
 801523c:	e7f8      	b.n	8015230 <memmove+0xc>
 801523e:	4283      	cmp	r3, r0
 8015240:	d9f5      	bls.n	801522e <memmove+0xa>
 8015242:	1881      	adds	r1, r0, r2
 8015244:	1ad2      	subs	r2, r2, r3
 8015246:	42d3      	cmn	r3, r2
 8015248:	d100      	bne.n	801524c <memmove+0x28>
 801524a:	bd10      	pop	{r4, pc}
 801524c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015250:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015254:	e7f7      	b.n	8015246 <memmove+0x22>

08015256 <__malloc_lock>:
 8015256:	4770      	bx	lr

08015258 <__malloc_unlock>:
 8015258:	4770      	bx	lr

0801525a <_realloc_r>:
 801525a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801525c:	4607      	mov	r7, r0
 801525e:	4614      	mov	r4, r2
 8015260:	460e      	mov	r6, r1
 8015262:	b921      	cbnz	r1, 801526e <_realloc_r+0x14>
 8015264:	4611      	mov	r1, r2
 8015266:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801526a:	f7ff ba73 	b.w	8014754 <_malloc_r>
 801526e:	b922      	cbnz	r2, 801527a <_realloc_r+0x20>
 8015270:	f7ff fa22 	bl	80146b8 <_free_r>
 8015274:	4625      	mov	r5, r4
 8015276:	4628      	mov	r0, r5
 8015278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801527a:	f000 f849 	bl	8015310 <_malloc_usable_size_r>
 801527e:	42a0      	cmp	r0, r4
 8015280:	d20f      	bcs.n	80152a2 <_realloc_r+0x48>
 8015282:	4621      	mov	r1, r4
 8015284:	4638      	mov	r0, r7
 8015286:	f7ff fa65 	bl	8014754 <_malloc_r>
 801528a:	4605      	mov	r5, r0
 801528c:	2800      	cmp	r0, #0
 801528e:	d0f2      	beq.n	8015276 <_realloc_r+0x1c>
 8015290:	4631      	mov	r1, r6
 8015292:	4622      	mov	r2, r4
 8015294:	f7fb fe34 	bl	8010f00 <memcpy>
 8015298:	4631      	mov	r1, r6
 801529a:	4638      	mov	r0, r7
 801529c:	f7ff fa0c 	bl	80146b8 <_free_r>
 80152a0:	e7e9      	b.n	8015276 <_realloc_r+0x1c>
 80152a2:	4635      	mov	r5, r6
 80152a4:	e7e7      	b.n	8015276 <_realloc_r+0x1c>
	...

080152a8 <_read_r>:
 80152a8:	b538      	push	{r3, r4, r5, lr}
 80152aa:	4c07      	ldr	r4, [pc, #28]	; (80152c8 <_read_r+0x20>)
 80152ac:	4605      	mov	r5, r0
 80152ae:	4608      	mov	r0, r1
 80152b0:	4611      	mov	r1, r2
 80152b2:	2200      	movs	r2, #0
 80152b4:	6022      	str	r2, [r4, #0]
 80152b6:	461a      	mov	r2, r3
 80152b8:	f7ec fe60 	bl	8001f7c <_read>
 80152bc:	1c43      	adds	r3, r0, #1
 80152be:	d102      	bne.n	80152c6 <_read_r+0x1e>
 80152c0:	6823      	ldr	r3, [r4, #0]
 80152c2:	b103      	cbz	r3, 80152c6 <_read_r+0x1e>
 80152c4:	602b      	str	r3, [r5, #0]
 80152c6:	bd38      	pop	{r3, r4, r5, pc}
 80152c8:	200049a4 	.word	0x200049a4

080152cc <_fstat_r>:
 80152cc:	b538      	push	{r3, r4, r5, lr}
 80152ce:	4c07      	ldr	r4, [pc, #28]	; (80152ec <_fstat_r+0x20>)
 80152d0:	2300      	movs	r3, #0
 80152d2:	4605      	mov	r5, r0
 80152d4:	4608      	mov	r0, r1
 80152d6:	4611      	mov	r1, r2
 80152d8:	6023      	str	r3, [r4, #0]
 80152da:	f7ec fe94 	bl	8002006 <_fstat>
 80152de:	1c43      	adds	r3, r0, #1
 80152e0:	d102      	bne.n	80152e8 <_fstat_r+0x1c>
 80152e2:	6823      	ldr	r3, [r4, #0]
 80152e4:	b103      	cbz	r3, 80152e8 <_fstat_r+0x1c>
 80152e6:	602b      	str	r3, [r5, #0]
 80152e8:	bd38      	pop	{r3, r4, r5, pc}
 80152ea:	bf00      	nop
 80152ec:	200049a4 	.word	0x200049a4

080152f0 <_isatty_r>:
 80152f0:	b538      	push	{r3, r4, r5, lr}
 80152f2:	4c06      	ldr	r4, [pc, #24]	; (801530c <_isatty_r+0x1c>)
 80152f4:	2300      	movs	r3, #0
 80152f6:	4605      	mov	r5, r0
 80152f8:	4608      	mov	r0, r1
 80152fa:	6023      	str	r3, [r4, #0]
 80152fc:	f7ec fe93 	bl	8002026 <_isatty>
 8015300:	1c43      	adds	r3, r0, #1
 8015302:	d102      	bne.n	801530a <_isatty_r+0x1a>
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	b103      	cbz	r3, 801530a <_isatty_r+0x1a>
 8015308:	602b      	str	r3, [r5, #0]
 801530a:	bd38      	pop	{r3, r4, r5, pc}
 801530c:	200049a4 	.word	0x200049a4

08015310 <_malloc_usable_size_r>:
 8015310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015314:	1f18      	subs	r0, r3, #4
 8015316:	2b00      	cmp	r3, #0
 8015318:	bfbc      	itt	lt
 801531a:	580b      	ldrlt	r3, [r1, r0]
 801531c:	18c0      	addlt	r0, r0, r3
 801531e:	4770      	bx	lr

08015320 <_init>:
 8015320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015322:	bf00      	nop
 8015324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015326:	bc08      	pop	{r3}
 8015328:	469e      	mov	lr, r3
 801532a:	4770      	bx	lr

0801532c <_fini>:
 801532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801532e:	bf00      	nop
 8015330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015332:	bc08      	pop	{r3}
 8015334:	469e      	mov	lr, r3
 8015336:	4770      	bx	lr
